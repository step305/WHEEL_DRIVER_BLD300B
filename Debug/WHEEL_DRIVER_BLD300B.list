
WHEEL_DRIVER_BLD300B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800cc60  0800cc60  0001cc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d184  0800d184  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d18c  0800d18c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001e4  0800d378  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800d378  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cff  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  00037f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020513  00000000  00000000  0003d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017611  00000000  00000000  0005db53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf9c  00000000  00000000  00075164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  00140150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc44 	.word	0x0800cc44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800cc44 	.word	0x0800cc44

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2230      	movs	r2, #48	; 0x30
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f006 fd55 	bl	8007b04 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_DAC1_Init+0x80>)
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <MX_DAC1_Init+0x84>)
 800105e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <MX_DAC1_Init+0x80>)
 8001062:	f001 fae2 	bl	800262a <HAL_DAC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800106c:	f000 fd6d 	bl	8001b4a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001070:	2302      	movs	r3, #2
 8001072:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001080:	2302      	movs	r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <MX_DAC1_Init+0x80>)
 800109c:	f001 fb10 	bl	80026c0 <HAL_DAC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80010a6:	f000 fd50 	bl	8001b4a <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_DAC1_Init+0x80>)
 80010b2:	f001 fb05 	bl	80026c0 <HAL_DAC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80010bc:	f000 fd45 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000200 	.word	0x20000200
 80010cc:	50000800 	.word	0x50000800

080010d0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <HAL_DAC_MspInit+0x74>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d124      	bne.n	800113c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_DAC_MspInit+0x78>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_DAC_MspInit+0x78>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_DAC_MspInit+0x78>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_DAC_MspInit+0x78>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_DAC_MspInit+0x78>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = WHEEL1_TORQ_Pin|GPIO_PIN_5;
 8001122:	2330      	movs	r3, #48	; 0x30
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 ffec 	bl	8003114 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	50000800 	.word	0x50000800
 8001148:	40021000 	.word	0x40021000

0800114c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_DMA_Init+0x70>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MX_DMA_Init+0x70>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6493      	str	r3, [r2, #72]	; 0x48
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_DMA_Init+0x70>)
 8001160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_DMA_Init+0x70>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_DMA_Init+0x70>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6493      	str	r3, [r2, #72]	; 0x48
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_DMA_Init+0x70>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	200b      	movs	r0, #11
 8001188:	f001 fa1b 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f001 fa32 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	200c      	movs	r0, #12
 8001198:	f001 fa13 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800119c:	200c      	movs	r0, #12
 800119e:	f001 fa2a 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	200d      	movs	r0, #13
 80011a8:	f001 fa0b 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011ac:	200d      	movs	r0, #13
 80011ae:	f001 fa22 	bl	80025f6 <HAL_NVIC_EnableIRQ>

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <MX_GPIO_Init+0x110>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <MX_GPIO_Init+0x110>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_GPIO_Init+0x110>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <MX_GPIO_Init+0x110>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_GPIO_Init+0x110>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <MX_GPIO_Init+0x110>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_GPIO_Init+0x110>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_GPIO_Init+0x114>)
 800123e:	f002 f8eb 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001242:	2303      	movs	r3, #3
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <MX_GPIO_Init+0x118>)
 8001256:	f001 ff5d 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0x11c>)
 8001270:	f001 ff50 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001274:	f649 73c0 	movw	r3, #40896	; 0x9fc0
 8001278:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f001 ff42 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001290:	23f1      	movs	r3, #241	; 0xf1
 8001292:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	2303      	movs	r3, #3
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0x114>)
 80012a4:	f001 ff36 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0x114>)
 80012c2:	f001 ff27 	bl	8003114 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48001400 	.word	0x48001400
 80012dc:	48001800 	.word	0x48001800

080012e0 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_UART_TxCpltCallback+0x24>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_UART_TxCpltCallback+0x16>
        tx_buffer_ready = 1;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_UART_TxCpltCallback+0x28>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000618 	.word	0x20000618
 8001308:	20000000 	.word	0x20000000

0800130c <try_send_data>:

void try_send_data(uint8_t *buffer, uint16_t len) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
    if (tx_buffer_ready == 1) {
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <try_send_data+0x30>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <try_send_data+0x26>
        tx_buffer_ready = 0;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <try_send_data+0x30>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	461a      	mov	r2, r3
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <try_send_data+0x34>)
 800132e:	f004 fb39 	bl	80059a4 <HAL_UART_Transmit_DMA>
    }
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	20000618 	.word	0x20000618

08001344 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d102      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x16>
        timer100Hz_elapsed = 1;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
    }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2000050c 	.word	0x2000050c
 800136c:	200004b8 	.word	0x200004b8

08001370 <HAL_TIM_IC_CaptureHalfCpltCallback>:

void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    switch (htim->Channel) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7f1b      	ldrb	r3, [r3, #28]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d002      	beq.n	8001386 <HAL_TIM_IC_CaptureHalfCpltCallback+0x16>
 8001380:	2b02      	cmp	r3, #2
 8001382:	d009      	beq.n	8001398 <HAL_TIM_IC_CaptureHalfCpltCallback+0x28>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            memcpy(&dma_buffer_timer_channel_2_safe[1], dma_buffer_timer_channel_2, DMA_TIMER_CHANNEL_HALF_LEN*4);
            dma_timer_channel_2_ready = 1;
            break;
        default:
            break;
 8001384:	e011      	b.n	80013aa <HAL_TIM_IC_CaptureHalfCpltCallback+0x3a>
            memcpy(&dma_buffer_timer_channel_1_safe[1], dma_buffer_timer_channel_1, DMA_TIMER_CHANNEL_HALF_LEN*4);
 8001386:	2208      	movs	r2, #8
 8001388:	490a      	ldr	r1, [pc, #40]	; (80013b4 <HAL_TIM_IC_CaptureHalfCpltCallback+0x44>)
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x48>)
 800138c:	f006 fbac 	bl	8007ae8 <memcpy>
            dma_timer_channel_1_ready = 1;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_TIM_IC_CaptureHalfCpltCallback+0x4c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
            break;
 8001396:	e008      	b.n	80013aa <HAL_TIM_IC_CaptureHalfCpltCallback+0x3a>
            memcpy(&dma_buffer_timer_channel_2_safe[1], dma_buffer_timer_channel_2, DMA_TIMER_CHANNEL_HALF_LEN*4);
 8001398:	2208      	movs	r2, #8
 800139a:	4909      	ldr	r1, [pc, #36]	; (80013c0 <HAL_TIM_IC_CaptureHalfCpltCallback+0x50>)
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_TIM_IC_CaptureHalfCpltCallback+0x54>)
 800139e:	f006 fba3 	bl	8007ae8 <memcpy>
            dma_timer_channel_2_ready = 1;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x58>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
            break;
 80013a8:	bf00      	nop
    }
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000430 	.word	0x20000430
 80013b8:	20000454 	.word	0x20000454
 80013bc:	20000468 	.word	0x20000468
 80013c0:	20000440 	.word	0x20000440
 80013c4:	20000460 	.word	0x20000460
 80013c8:	20000469 	.word	0x20000469

080013cc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    switch (htim->Channel) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7f1b      	ldrb	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <HAL_TIM_IC_CaptureCallback+0x16>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d009      	beq.n	80013f4 <HAL_TIM_IC_CaptureCallback+0x28>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            memcpy(&dma_buffer_timer_channel_2_safe[1], &dma_buffer_timer_channel_2[DMA_TIMER_CHANNEL_HALF_LEN], DMA_TIMER_CHANNEL_HALF_LEN*4);
            dma_timer_channel_2_ready = 1;
            break;
        default:
            break;
 80013e0:	e011      	b.n	8001406 <HAL_TIM_IC_CaptureCallback+0x3a>
            memcpy(&dma_buffer_timer_channel_1_safe[1], &dma_buffer_timer_channel_1[DMA_TIMER_CHANNEL_HALF_LEN], DMA_TIMER_CHANNEL_HALF_LEN*4);
 80013e2:	2208      	movs	r2, #8
 80013e4:	490a      	ldr	r1, [pc, #40]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x44>)
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x48>)
 80013e8:	f006 fb7e 	bl	8007ae8 <memcpy>
            dma_timer_channel_1_ready = 1;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
            break;
 80013f2:	e008      	b.n	8001406 <HAL_TIM_IC_CaptureCallback+0x3a>
            memcpy(&dma_buffer_timer_channel_2_safe[1], &dma_buffer_timer_channel_2[DMA_TIMER_CHANNEL_HALF_LEN], DMA_TIMER_CHANNEL_HALF_LEN*4);
 80013f4:	2208      	movs	r2, #8
 80013f6:	4909      	ldr	r1, [pc, #36]	; (800141c <HAL_TIM_IC_CaptureCallback+0x50>)
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x54>)
 80013fa:	f006 fb75 	bl	8007ae8 <memcpy>
            dma_timer_channel_2_ready = 1;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
            break;
 8001404:	bf00      	nop
    }
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000438 	.word	0x20000438
 8001414:	20000454 	.word	0x20000454
 8001418:	20000468 	.word	0x20000468
 800141c:	20000448 	.word	0x20000448
 8001420:	20000460 	.word	0x20000460
 8001424:	20000469 	.word	0x20000469

08001428 <calc_mean_diff>:

float calc_mean_diff(__IO uint32_t array[], uint32_t len) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    uint32_t sum_delta = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 1; i < len; i++) {
 8001436:	2301      	movs	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	e013      	b.n	8001464 <calc_mean_diff+0x3c>
        sum_delta += (uint32_t)(array[i] - array[i - 1]);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800144c:	3b01      	subs	r3, #1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	440b      	add	r3, r1
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 1; i < len; i++) {
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3e7      	bcc.n	800143c <calc_mean_diff+0x14>
    }
    return ((float)sum_delta) / (float)(len - 1);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001482:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001486:	eef0 7a66 	vmov.f32	s15, s13
}
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <calc_mean>:

float calc_mean(float array[], uint32_t len) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < len; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	e00e      	b.n	80014cc <calc_mean+0x34>
        sum += array[i];
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint32_t i = 0; i < len; i++) {
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3ec      	bcc.n	80014ae <calc_mean+0x16>
    }
    return sum / (float)len;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014de:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <iterate_moving_average_filter>:

void iterate_moving_average_filter(MOVING_AVERAGE_FILTER_STATE *state) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    state->data[state->index] = state->new_inp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6892      	ldr	r2, [r2, #8]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	601a      	str	r2, [r3, #0]
    state->index++;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
    if (state->index == MOVING_AVERAGE_FILTER_LEN) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d102      	bne.n	8001528 <iterate_moving_average_filter+0x30>
        state->index = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
    }
    state->out = 170000000.0f / calc_mean(state->data, MOVING_AVERAGE_FILTER_LEN) * 60.0f / WHEEL_POLES / 60.0f * 360.0f / 3.0f/1.1125f;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ffb3 	bl	8001498 <calc_mean>
 8001532:	eeb0 7a40 	vmov.f32	s14, s0
 8001536:	eddf 6a11 	vldr	s13, [pc, #68]	; 800157c <iterate_moving_average_filter+0x84>
 800153a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001580 <iterate_moving_average_filter+0x88>
 8001542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001546:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 800154a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800154e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001580 <iterate_moving_average_filter+0x88>
 8001552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001556:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001584 <iterate_moving_average_filter+0x8c>
 800155a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001562:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001566:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001588 <iterate_moving_average_filter+0x90>
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	4d221fe8 	.word	0x4d221fe8
 8001580:	42700000 	.word	0x42700000
 8001584:	43b40000 	.word	0x43b40000
 8001588:	3f8e6666 	.word	0x3f8e6666

0800158c <control_wheels>:
    Z[1] = x * B[2] + -y * A[1];
    y = 170000000.0f / y * 10.0f;
    return y;
}

void control_wheels(uint32_t torq1, uint32_t torq2) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, torq1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <control_wheels+0x30>)
 800159e:	f001 f866 	bl	800266e <HAL_DAC_SetValue>
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, torq2);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <control_wheels+0x30>)
 80015aa:	f001 f860 	bl	800266e <HAL_DAC_SetValue>
    HAL_DACEx_DualStart(&hdac1);
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <control_wheels+0x30>)
 80015b0:	f001 fa2e 	bl	8002a10 <HAL_DACEx_DualStart>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000200 	.word	0x20000200

080015c0 <set_torque>:

void set_torque(uint32_t *torq, float speed) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	ed87 0a00 	vstr	s0, [r7]
    speed = speed / UNIT_TORQUE;
 80015cc:	ed97 7a00 	vldr	s14, [r7]
 80015d0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001618 <set_torque+0x58>
 80015d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d8:	edc7 7a00 	vstr	s15, [r7]
    if (speed > 1.0f) {
 80015dc:	edd7 7a00 	vldr	s15, [r7]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd0c      	ble.n	8001608 <set_torque+0x48>
        *torq = (uint32_t)(250.0f * speed);
 80015ee:	edd7 7a00 	vldr	s15, [r7]
 80015f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800161c <set_torque+0x5c>
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
        return;
 8001606:	e002      	b.n	800160e <set_torque+0x4e>
    } else {
        *torq = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    }
}
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	42a00000 	.word	0x42a00000
 800161c:	437a0000 	.word	0x437a0000

08001620 <parse_next_byte>:

int8_t parse_next_byte(char byte, ParserStateType* state) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af02      	add	r7, sp, #8
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
    int8_t result = -1;
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	75fb      	strb	r3, [r7, #23]
    float speed1 = 0.0f;
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
    float speed2 = 0.0f;
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
    char request = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	72fb      	strb	r3, [r7, #11]

    switch((state->state)) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <parse_next_byte+0x2e>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d027      	beq.n	800169c <parse_next_byte+0x7c>
 800164c:	e07b      	b.n	8001746 <parse_next_byte+0x126>
        case(WAIT_START_PACKET):
            if(byte == '$') {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b24      	cmp	r3, #36	; 0x24
 8001652:	d17c      	bne.n	800174e <parse_next_byte+0x12e>
                memset(state->buffer, 0, 255);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fa51 	bl	8007b04 <memset>
                state->data_cnt = 0;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                state->buffer[state->data_cnt] = byte;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	705a      	strb	r2, [r3, #1]
                state->data_cnt++;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001688:	b29b      	uxth	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
                state->state = WAIT_END_PACKET;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
            }
            break;
 800169a:	e058      	b.n	800174e <parse_next_byte+0x12e>
        case(WAIT_END_PACKET):
            if (state->data_cnt < RX_BUFFER_LEN) {
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2bfe      	cmp	r3, #254	; 0xfe
 80016a6:	d84a      	bhi.n	800173e <parse_next_byte+0x11e>
                if(byte=='\n') {
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d131      	bne.n	8001712 <parse_next_byte+0xf2>
                    if (state->data_cnt > 0) {
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d027      	beq.n	800170a <parse_next_byte+0xea>
                        if (sscanf(&state->buffer[0], "$%c W1:%f W2:%f", &request, &speed1, &speed2) == 3) {
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	1c58      	adds	r0, r3, #1
 80016be:	f107 0110 	add.w	r1, r7, #16
 80016c2:	f107 020b 	add.w	r2, r7, #11
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	4923      	ldr	r1, [pc, #140]	; (800175c <parse_next_byte+0x13c>)
 80016d0:	f007 f8c0 	bl	8008854 <siscanf>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d117      	bne.n	800170a <parse_next_byte+0xea>
                            if (request == '?') {
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b3f      	cmp	r3, #63	; 0x3f
 80016de:	d104      	bne.n	80016ea <parse_next_byte+0xca>
                                state->is_request = 1;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80016e8:	e003      	b.n	80016f2 <parse_next_byte+0xd2>
                            } else {
                                state->is_request = 0;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                            }
                            state->speed1 = speed1;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80016fa:	601a      	str	r2, [r3, #0]
                            state->speed2 = speed2;
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001704:	601a      	str	r2, [r3, #0]
                            result = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
                        }
                    }
                    state->state = WAIT_START_PACKET;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
                    state->state = WAIT_END_PACKET;
                }
            } else {
                state->state = WAIT_START_PACKET;
            }
            break;
 8001710:	e01e      	b.n	8001750 <parse_next_byte+0x130>
                    state->buffer[state->data_cnt] = byte;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	705a      	strb	r2, [r3, #1]
                    state->data_cnt++;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800172a:	b29b      	uxth	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
                    state->state = WAIT_END_PACKET;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
            break;
 800173c:	e008      	b.n	8001750 <parse_next_byte+0x130>
                state->state = WAIT_START_PACKET;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
            break;
 8001744:	e004      	b.n	8001750 <parse_next_byte+0x130>
        default:
            state->state = WAIT_START_PACKET;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
            break;
 800174c:	e000      	b.n	8001750 <parse_next_byte+0x130>
            break;
 800174e:	bf00      	nop
    }
    return result;
 8001750:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	0800cc60 	.word	0x0800cc60

08001760 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d11f      	bne.n	80017b0 <HAL_UART_RxCpltCallback+0x50>
        if (parse_next_byte(rx_buffer, &rx_state) > 0) {
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_UART_RxCpltCallback+0x5c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4912      	ldr	r1, [pc, #72]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff52 	bl	8001620 <parse_next_byte>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd11      	ble.n	80017a6 <HAL_UART_RxCpltCallback+0x46>
            rx_command.speed1 = rx_state.speed1;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 8001784:	f8d3 3102 	ldr.w	r3, [r3, #258]	; 0x102
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_UART_RxCpltCallback+0x64>)
 800178a:	6013      	str	r3, [r2, #0]
            rx_command.speed2 = rx_state.speed2;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 800178e:	f8d3 3106 	ldr.w	r3, [r3, #262]	; 0x106
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_UART_RxCpltCallback+0x64>)
 8001794:	6053      	str	r3, [r2, #4]
            rx_command.is_request = rx_state.is_request;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 8001798:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_UART_RxCpltCallback+0x64>)
 800179e:	721a      	strb	r2, [r3, #8]
            rx_buffer_ready = 1;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_UART_RxCpltCallback+0x68>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	4904      	ldr	r1, [pc, #16]	; (80017bc <HAL_UART_RxCpltCallback+0x5c>)
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 80017ac:	f004 f8a4 	bl	80058f8 <HAL_UART_Receive_IT>
    }
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000618 	.word	0x20000618
 80017bc:	20000314 	.word	0x20000314
 80017c0:	20000318 	.word	0x20000318
 80017c4:	20000424 	.word	0x20000424
 80017c8:	20000001 	.word	0x20000001

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  float torq1 = 0.0f;
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  uint32_t loop_cnt = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  float target_speed1 = 0.0f;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  float target_speed2 = 0.0f;
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e8:	f000 fd7d 	bl	80022e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ec:	f000 f962 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f0:	f7ff fce6 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f4:	f7ff fcaa 	bl	800114c <MX_DMA_Init>
  MX_DAC1_Init();
 80017f8:	f7ff fc26 	bl	8001048 <MX_DAC1_Init>
  MX_TIM2_Init();
 80017fc:	f000 fb02 	bl	8001e04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001800:	f000 fc70 	bl	80020e4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001804:	f000 fb7a 	bl	8001efc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, dma_buffer_timer_channel_1, DMA_TIMER_CHANNEL_LEN);
 8001808:	2304      	movs	r3, #4
 800180a:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <main+0x280>)
 800180c:	2100      	movs	r1, #0
 800180e:	4890      	ldr	r0, [pc, #576]	; (8001a50 <main+0x284>)
 8001810:	f002 ff06 	bl	8004620 <HAL_TIM_IC_Start_DMA>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, dma_buffer_timer_channel_2, DMA_TIMER_CHANNEL_LEN);
 8001814:	2304      	movs	r3, #4
 8001816:	4a8f      	ldr	r2, [pc, #572]	; (8001a54 <main+0x288>)
 8001818:	2104      	movs	r1, #4
 800181a:	488d      	ldr	r0, [pc, #564]	; (8001a50 <main+0x284>)
 800181c:	f002 ff00 	bl	8004620 <HAL_TIM_IC_Start_DMA>

    HAL_TIM_Base_Start_IT(&htim7);
 8001820:	488d      	ldr	r0, [pc, #564]	; (8001a58 <main+0x28c>)
 8001822:	f002 fe31 	bl	8004488 <HAL_TIM_Base_Start_IT>
    set_torque(&torque1_value, 80.0f);
 8001826:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001a5c <main+0x290>
 800182a:	488d      	ldr	r0, [pc, #564]	; (8001a60 <main+0x294>)
 800182c:	f7ff fec8 	bl	80015c0 <set_torque>
    set_torque(&torque2_value, 0.0f);
 8001830:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8001a64 <main+0x298>
 8001834:	488c      	ldr	r0, [pc, #560]	; (8001a68 <main+0x29c>)
 8001836:	f7ff fec3 	bl	80015c0 <set_torque>
    control_wheels(torque1_value, torque2_value);
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <main+0x294>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a8a      	ldr	r2, [pc, #552]	; (8001a68 <main+0x29c>)
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fea1 	bl	800158c <control_wheels>
    HAL_Delay(100);
 800184a:	2064      	movs	r0, #100	; 0x64
 800184c:	f000 fdbc 	bl	80023c8 <HAL_Delay>
    HAL_UART_Receive_IT(&huart2, &rx_buffer, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	4986      	ldr	r1, [pc, #536]	; (8001a6c <main+0x2a0>)
 8001854:	4886      	ldr	r0, [pc, #536]	; (8001a70 <main+0x2a4>)
 8001856:	f004 f84f 	bl	80058f8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (dma_timer_channel_1_ready == 1) {
 800185a:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <main+0x2a8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d117      	bne.n	8001894 <main+0xc8>
          dma_timer_channel_1_ready = 0;
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <main+0x2a8>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
          timestamp_channel_1 = HAL_GetTick();
 800186a:	f000 fda1 	bl	80023b0 <HAL_GetTick>
 800186e:	4603      	mov	r3, r0
 8001870:	4a81      	ldr	r2, [pc, #516]	; (8001a78 <main+0x2ac>)
 8001872:	6013      	str	r3, [r2, #0]
          filter_1_state.new_inp = calc_mean_diff(dma_buffer_timer_channel_1_safe, DMA_TIMER_CHANNEL_HALF_LEN + 1);
 8001874:	2103      	movs	r1, #3
 8001876:	4881      	ldr	r0, [pc, #516]	; (8001a7c <main+0x2b0>)
 8001878:	f7ff fdd6 	bl	8001428 <calc_mean_diff>
 800187c:	eef0 7a40 	vmov.f32	s15, s0
 8001880:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <main+0x2b4>)
 8001882:	edc3 7a02 	vstr	s15, [r3, #8]
          //filter_1_state.out = filter_butter(filter_1_state.new_inp, filter_1_state.filter_state);
          iterate_moving_average_filter(&filter_1_state);
 8001886:	487e      	ldr	r0, [pc, #504]	; (8001a80 <main+0x2b4>)
 8001888:	f7ff fe36 	bl	80014f8 <iterate_moving_average_filter>
          dma_buffer_timer_channel_1_safe[0] = dma_buffer_timer_channel_1_safe[DMA_TIMER_CHANNEL_HALF_LEN];
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <main+0x2b0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <main+0x2b0>)
 8001892:	6013      	str	r3, [r2, #0]
      }
      if (dma_timer_channel_2_ready == 1) {
 8001894:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <main+0x2b8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d117      	bne.n	80018ce <main+0x102>
          dma_timer_channel_2_ready = 0;
 800189e:	4b79      	ldr	r3, [pc, #484]	; (8001a84 <main+0x2b8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
          timestamp_channel_2 = HAL_GetTick();
 80018a4:	f000 fd84 	bl	80023b0 <HAL_GetTick>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <main+0x2bc>)
 80018ac:	6013      	str	r3, [r2, #0]
          filter_2_state.new_inp = calc_mean_diff(dma_buffer_timer_channel_2_safe, DMA_TIMER_CHANNEL_HALF_LEN + 1);
 80018ae:	2103      	movs	r1, #3
 80018b0:	4876      	ldr	r0, [pc, #472]	; (8001a8c <main+0x2c0>)
 80018b2:	f7ff fdb9 	bl	8001428 <calc_mean_diff>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
 80018ba:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <main+0x2c4>)
 80018bc:	edc3 7a02 	vstr	s15, [r3, #8]
          //filter_2_state.out = filter_butter(filter_2_state.new_inp, filter_2_state.filter_state);
          iterate_moving_average_filter(&filter_2_state);
 80018c0:	4873      	ldr	r0, [pc, #460]	; (8001a90 <main+0x2c4>)
 80018c2:	f7ff fe19 	bl	80014f8 <iterate_moving_average_filter>
          dma_buffer_timer_channel_2_safe[0] = dma_buffer_timer_channel_2_safe[DMA_TIMER_CHANNEL_HALF_LEN];
 80018c6:	4b71      	ldr	r3, [pc, #452]	; (8001a8c <main+0x2c0>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4a70      	ldr	r2, [pc, #448]	; (8001a8c <main+0x2c0>)
 80018cc:	6013      	str	r3, [r2, #0]
      }

      timestamp = HAL_GetTick();
 80018ce:	f000 fd6f 	bl	80023b0 <HAL_GetTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a6f      	ldr	r2, [pc, #444]	; (8001a94 <main+0x2c8>)
 80018d6:	6013      	str	r3, [r2, #0]
      if ((timestamp - timestamp_channel_1)>= TIMEOUT_MS) {
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <main+0x2c8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <main+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b45      	cmp	r3, #69	; 0x45
 80018e4:	d903      	bls.n	80018ee <main+0x122>
          filter_1_state.out = 0.0f;
 80018e6:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <main+0x2b4>)
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
      }
      if ((timestamp - timestamp_channel_2)>= TIMEOUT_MS) {
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <main+0x2c8>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <main+0x2bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b45      	cmp	r3, #69	; 0x45
 80018fa:	d903      	bls.n	8001904 <main+0x138>
          filter_2_state.out = 0.0f;
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <main+0x2c4>)
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
      }

      if (timer100Hz_elapsed == 1) {
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <main+0x2cc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d162      	bne.n	80019d4 <main+0x208>
          if (loop_cnt % 100 == 0) {
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4b62      	ldr	r3, [pc, #392]	; (8001a9c <main+0x2d0>)
 8001912:	fba3 1302 	umull	r1, r3, r3, r2
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2164      	movs	r1, #100	; 0x64
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d12a      	bne.n	800197a <main+0x1ae>
              if (fabsf(filter_1_state.out - target_speed1) > 10.0f) {
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <main+0x2b4>)
 8001926:	ed93 7a03 	vldr	s14, [r3, #12]
 800192a:	edd7 7a02 	vldr	s15, [r7, #8]
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	eef0 7ae7 	vabs.f32	s15, s15
 8001936:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800193a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	dd1a      	ble.n	800197a <main+0x1ae>
                  if (filter_1_state.out > target_speed1) {
 8001944:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <main+0x2b4>)
 8001946:	edd3 7a03 	vldr	s15, [r3, #12]
 800194a:	ed97 7a02 	vldr	s14, [r7, #8]
 800194e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d508      	bpl.n	800196a <main+0x19e>
                      torq1 -= 1.0f;
 8001958:	edd7 7a03 	vldr	s15, [r7, #12]
 800195c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001964:	edc7 7a03 	vstr	s15, [r7, #12]
 8001968:	e007      	b.n	800197a <main+0x1ae>
                  } else {
                      torq1 += 1.0f;
 800196a:	edd7 7a03 	vldr	s15, [r7, #12]
 800196e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001976:	edc7 7a03 	vstr	s15, [r7, #12]
                  }
              }
          }
          if (target_speed1 < MIN_SPEED) {
 800197a:	edd7 7a02 	vldr	s15, [r7, #8]
 800197e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001a5c <main+0x290>
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d503      	bpl.n	8001994 <main+0x1c8>
              torq1 = 0.0f;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e00a      	b.n	80019aa <main+0x1de>
          } else {
              if (torq1 < UNIT_TORQUE) {
 8001994:	edd7 7a03 	vldr	s15, [r7, #12]
 8001998:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001a5c <main+0x290>
 800199c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d501      	bpl.n	80019aa <main+0x1de>
                  torq1 = UNIT_TORQUE;
 80019a6:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <main+0x2d4>)
 80019a8:	60fb      	str	r3, [r7, #12]
              }
          }
          set_torque(&torque1_value, torq1);
 80019aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ae:	482c      	ldr	r0, [pc, #176]	; (8001a60 <main+0x294>)
 80019b0:	f7ff fe06 	bl	80015c0 <set_torque>
          set_torque(&torque2_value, 0.0f);
 80019b4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001a64 <main+0x298>
 80019b8:	482b      	ldr	r0, [pc, #172]	; (8001a68 <main+0x29c>)
 80019ba:	f7ff fe01 	bl	80015c0 <set_torque>
          control_wheels(torque1_value, torque2_value);
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <main+0x294>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <main+0x29c>)
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fddf 	bl	800158c <control_wheels>
          timer100Hz_elapsed = 0;
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <main+0x2cc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
      }
      if (rx_buffer_ready == 1) {
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <main+0x2d8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f47f af3e 	bne.w	800185a <main+0x8e>
          rx_buffer_ready = 0;
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <main+0x2d8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
          if (rx_command.is_request == 1) {
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <main+0x2dc>)
 80019e6:	7a1b      	ldrb	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d11f      	bne.n	8001a2c <main+0x260>
              sprintf((char *)tx_buffer, "%0.7f; %0.7f\r\n",
                      filter_1_state.out,
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <main+0x2b4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
              sprintf((char *)tx_buffer, "%0.7f; %0.7f\r\n",
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdd1 	bl	8000598 <__aeabi_f2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
                      filter_2_state.out);
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <main+0x2c4>)
 80019fc:	68db      	ldr	r3, [r3, #12]
              sprintf((char *)tx_buffer, "%0.7f; %0.7f\r\n",
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdca 	bl	8000598 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 2300 	strd	r2, r3, [sp]
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	462b      	mov	r3, r5
 8001a10:	4926      	ldr	r1, [pc, #152]	; (8001aac <main+0x2e0>)
 8001a12:	4827      	ldr	r0, [pc, #156]	; (8001ab0 <main+0x2e4>)
 8001a14:	f006 fefe 	bl	8008814 <siprintf>
              try_send_data(tx_buffer, strlen((char *) tx_buffer));
 8001a18:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <main+0x2e4>)
 8001a1a:	f7fe fc01 	bl	8000220 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <main+0x2e4>)
 8001a26:	f7ff fc71 	bl	800130c <try_send_data>
 8001a2a:	e716      	b.n	800185a <main+0x8e>
          } else {
              target_speed1 = rx_command.speed1;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <main+0x2dc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60bb      	str	r3, [r7, #8]
              if (target_speed1 < MIN_SPEED) {
 8001a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a36:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001a5c <main+0x290>
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d502      	bpl.n	8001a4a <main+0x27e>
                  target_speed1 = 0.0f;
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
      if (dma_timer_channel_1_ready == 1) {
 8001a4a:	e706      	b.n	800185a <main+0x8e>
 8001a4c:	20000430 	.word	0x20000430
 8001a50:	200004c0 	.word	0x200004c0
 8001a54:	20000440 	.word	0x20000440
 8001a58:	2000050c 	.word	0x2000050c
 8001a5c:	42a00000 	.word	0x42a00000
 8001a60:	200004b0 	.word	0x200004b0
 8001a64:	00000000 	.word	0x00000000
 8001a68:	200004b4 	.word	0x200004b4
 8001a6c:	20000314 	.word	0x20000314
 8001a70:	20000618 	.word	0x20000618
 8001a74:	20000468 	.word	0x20000468
 8001a78:	2000046c 	.word	0x2000046c
 8001a7c:	20000450 	.word	0x20000450
 8001a80:	20000478 	.word	0x20000478
 8001a84:	20000469 	.word	0x20000469
 8001a88:	20000470 	.word	0x20000470
 8001a8c:	2000045c 	.word	0x2000045c
 8001a90:	20000494 	.word	0x20000494
 8001a94:	20000474 	.word	0x20000474
 8001a98:	200004b8 	.word	0x200004b8
 8001a9c:	51eb851f 	.word	0x51eb851f
 8001aa0:	42a00000 	.word	0x42a00000
 8001aa4:	20000001 	.word	0x20000001
 8001aa8:	20000424 	.word	0x20000424
 8001aac:	0800cc70 	.word	0x0800cc70
 8001ab0:	20000214 	.word	0x20000214

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 f81e 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f001 fcb6 	bl	8003448 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aea:	2302      	movs	r3, #2
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aee:	2302      	movs	r3, #2
 8001af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001af6:	2355      	movs	r3, #85	; 0x55
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 fd40 	bl	8003590 <HAL_RCC_OscConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b16:	f000 f818 	bl	8001b4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2104      	movs	r1, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 f844 	bl	8003bc0 <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b3e:	f000 f804 	bl	8001b4a <Error_Handler>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3750      	adds	r7, #80	; 0x50
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4e:	b672      	cpsid	i
}
 8001b50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <Error_Handler+0x8>

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_MspInit+0x44>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_MspInit+0x44>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6613      	str	r3, [r2, #96]	; 0x60
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_MspInit+0x44>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_MspInit+0x44>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_MspInit+0x44>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_MspInit+0x44>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 fbd0 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Channel1_IRQHandler+0x10>)
 8001bf6:	f001 f93e 	bl	8002e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200006a8 	.word	0x200006a8

08001c04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Channel2_IRQHandler+0x10>)
 8001c0a:	f001 f934 	bl	8002e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000558 	.word	0x20000558

08001c18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA1_Channel3_IRQHandler+0x10>)
 8001c1e:	f001 f92a 	bl	8002e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200005b8 	.word	0x200005b8

08001c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART2_IRQHandler+0x10>)
 8001c32:	f003 ff49 	bl	8005ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000618 	.word	0x20000618

08001c40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM7_IRQHandler+0x10>)
 8001c46:	f002 feaf 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000050c 	.word	0x2000050c

08001c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_kill>:

int _kill(int pid, int sig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c6e:	f005 ff11 	bl	8007a94 <__errno>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2216      	movs	r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
	return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_exit>:

void _exit (int status)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c96:	e7fe      	b.n	8001c96 <_exit+0x12>

08001c98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e00a      	b.n	8001cc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001caa:	f3af 8000 	nop.w
 8001cae:	4601      	mov	r1, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	b2ca      	uxtb	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf0      	blt.n	8001caa <_read+0x12>
	}

return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e009      	b.n	8001cf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf1      	blt.n	8001ce4 <_write+0x12>
	}
	return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_close>:

int _close(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	605a      	str	r2, [r3, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_isatty>:

int _isatty(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f005 fe76 	bl	8007a94 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20008000 	.word	0x20008000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200004bc 	.word	0x200004bc
 8001ddc:	20000720 	.word	0x20000720

08001de0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e46:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e58:	4827      	ldr	r0, [pc, #156]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e5a:	f002 fabd 	bl	80043d8 <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001e64:	f7ff fe71 	bl	8001b4a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4619      	mov	r1, r3
 8001e74:	4820      	ldr	r0, [pc, #128]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e76:	f002 ffb3 	bl	8004de0 <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001e80:	f7ff fe63 	bl	8001b4a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e84:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001e86:	f002 fb69 	bl	800455c <HAL_TIM_IC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e90:	f7ff fe5b 	bl	8001b4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001ea4:	f003 fc10 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001eae:	f7ff fe4c 	bl	8001b4a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001eca:	f002 feec 	bl	8004ca6 <HAL_TIM_IC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001ed4:	f7ff fe39 	bl	8001b4a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2204      	movs	r2, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_TIM2_Init+0xf4>)
 8001ee0:	f002 fee1 	bl	8004ca6 <HAL_TIM_IC_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001eea:	f7ff fe2e 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3730      	adds	r7, #48	; 0x30
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200004c0 	.word	0x200004c0

08001efc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <MX_TIM7_Init+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f14:	22a9      	movs	r2, #169	; 0xa9
 8001f16:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f20:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f24:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f2e:	f002 fa53 	bl	80043d8 <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f38:	f7ff fe07 	bl	8001b4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_TIM7_Init+0x64>)
 8001f4a:	f003 fbbd 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f54:	f7ff fdf9 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000050c 	.word	0x2000050c
 8001f64:	40001400 	.word	0x40001400

08001f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	f040 8082 	bne.w	8002090 <HAL_TIM_Base_MspInit+0x128>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4b49      	ldr	r3, [pc, #292]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = WHEEL1_SPEED_Pin|GPIO_PIN_1;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f001 f89b 	bl	8003114 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <HAL_TIM_Base_MspInit+0x16c>)
 8001fe2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff0:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8002006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800200a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 800200e:	2220      	movs	r2, #32
 8002010:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8002014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800201a:	482d      	ldr	r0, [pc, #180]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 800201c:	f000 fd48 	bl	8002ab0 <HAL_DMA_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_TIM_Base_MspInit+0xc2>
    {
      Error_Handler();
 8002026:	f7ff fd90 	bl	8001b4a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_TIM_Base_MspInit+0x168>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002038:	4a28      	ldr	r2, [pc, #160]	; (80020dc <HAL_TIM_Base_MspInit+0x174>)
 800203a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 800203e:	2239      	movs	r2, #57	; 0x39
 8002040:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 800205e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002062:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002066:	2220      	movs	r2, #32
 8002068:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 800206c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8002072:	4819      	ldr	r0, [pc, #100]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002074:	f000 fd1c 	bl	8002ab0 <HAL_DMA_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_TIM_Base_MspInit+0x11a>
    {
      Error_Handler();
 800207e:	f7ff fd64 	bl	8001b4a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_TIM_Base_MspInit+0x170>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800208e:	e018      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x15a>
  else if(tim_baseHandle->Instance==TIM7)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_TIM_Base_MspInit+0x178>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_TIM_Base_MspInit+0x164>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2103      	movs	r1, #3
 80020b6:	2037      	movs	r0, #55	; 0x37
 80020b8:	f000 fa83 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020bc:	2037      	movs	r0, #55	; 0x37
 80020be:	f000 fa9a 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	20000558 	.word	0x20000558
 80020d4:	4002001c 	.word	0x4002001c
 80020d8:	200005b8 	.word	0x200005b8
 80020dc:	40020030 	.word	0x40020030
 80020e0:	40001400 	.word	0x40001400

080020e4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <MX_USART2_UART_Init+0x94>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212c:	4811      	ldr	r0, [pc, #68]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800212e:	f003 fb93 	bl	8005858 <HAL_UART_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002138:	f7ff fd07 	bl	8001b4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213c:	2100      	movs	r1, #0
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002140:	f005 fbdd 	bl	80078fe <HAL_UARTEx_SetTxFifoThreshold>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800214a:	f7ff fcfe 	bl	8001b4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	4808      	ldr	r0, [pc, #32]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002152:	f005 fc12 	bl	800797a <HAL_UARTEx_SetRxFifoThreshold>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800215c:	f7ff fcf5 	bl	8001b4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002162:	f005 fb93 	bl	800788c <HAL_UARTEx_DisableFifoMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800216c:	f7ff fced 	bl	8001b4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000618 	.word	0x20000618
 8002178:	40004400 	.word	0x40004400

0800217c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b09a      	sub	sp, #104	; 0x68
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2244      	movs	r2, #68	; 0x44
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f005 fcb1 	bl	8007b04 <memset>
  if(uartHandle->Instance==USART2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a37      	ldr	r2, [pc, #220]	; (8002284 <HAL_UART_MspInit+0x108>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d167      	bne.n	800227c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 ff1d 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c4:	f7ff fcc1 	bl	8001b4a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_UART_MspInit+0x10c>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80021f8:	230c      	movs	r3, #12
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002208:	2307      	movs	r3, #7
 800220a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002216:	f000 ff7d 	bl	8003114 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_UART_MspInit+0x110>)
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_UART_MspInit+0x114>)
 800221e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_UART_MspInit+0x110>)
 8002222:	221b      	movs	r2, #27
 8002224:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_UART_MspInit+0x110>)
 8002228:	2210      	movs	r2, #16
 800222a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_UART_MspInit+0x110>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_UART_MspInit+0x110>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_UART_MspInit+0x110>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_UART_MspInit+0x110>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_UART_MspInit+0x110>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_UART_MspInit+0x110>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002250:	480e      	ldr	r0, [pc, #56]	; (800228c <HAL_UART_MspInit+0x110>)
 8002252:	f000 fc2d 	bl	8002ab0 <HAL_DMA_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800225c:	f7ff fc75 	bl	8001b4a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <HAL_UART_MspInit+0x110>)
 8002264:	679a      	str	r2, [r3, #120]	; 0x78
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_UART_MspInit+0x110>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2106      	movs	r1, #6
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f000 f9a6 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002276:	2026      	movs	r0, #38	; 0x26
 8002278:	f000 f9bd 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800227c:	bf00      	nop
 800227e:	3768      	adds	r7, #104	; 0x68
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004400 	.word	0x40004400
 8002288:	40021000 	.word	0x40021000
 800228c:	200006a8 	.word	0x200006a8
 8002290:	40020008 	.word	0x40020008

08002294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002296:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800229a:	490e      	ldr	r1, [pc, #56]	; (80022d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <LoopForever+0xe>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b0:	4c0b      	ldr	r4, [pc, #44]	; (80022e0 <LoopForever+0x16>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022be:	f7ff fd8f 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f005 fbed 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c6:	f7ff fa81 	bl	80017cc <main>

080022ca <LoopForever>:

LoopForever:
    b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   r0, =_estack
 80022cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022d8:	0800d194 	.word	0x0800d194
  ldr r2, =_sbss
 80022dc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80022e0:	2000071c 	.word	0x2000071c

080022e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_2_IRQHandler>

080022e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f95b 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f80e 	bl	8002318 <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e001      	b.n	800230c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002308:	f7ff fc24 	bl	8001b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800230c:	79fb      	ldrb	r3, [r7, #7]

}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_InitTick+0x68>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_InitTick+0x6c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_InitTick+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f966 	bl	8002612 <HAL_SYSTICK_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d809      	bhi.n	8002366 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002352:	2200      	movs	r2, #0
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	f000 f932 	bl	80025c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_InitTick+0x70>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e007      	b.n	8002376 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e004      	b.n	8002376 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000000c 	.word	0x2000000c
 8002384:	20000004 	.word	0x20000004
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_IncTick+0x1c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_IncTick+0x20>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4413      	add	r3, r2
 800239a:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <HAL_IncTick+0x1c>)
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	20000708 	.word	0x20000708
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000708 	.word	0x20000708

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d004      	beq.n	80023ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_Delay+0x40>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ec:	bf00      	nop
 80023ee:	f7ff ffdf 	bl	80023b0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d8f7      	bhi.n	80023ee <HAL_Delay+0x26>
  {
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	2000000c 	.word	0x2000000c

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff40 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff90 	bl	8002500 <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5f 	bl	80024ac <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff33 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa4 	bl	8002568 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e014      	b.n	8002666 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7fe fd3f 	bl	80010d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800266e:	b480      	push	{r7}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	3308      	adds	r3, #8
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e004      	b.n	80026a8 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3314      	adds	r3, #20
 80026a6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	795b      	ldrb	r3, [r3, #5]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_DAC_ConfigChannel+0x18>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e192      	b.n	80029fe <HAL_DAC_ConfigChannel+0x33e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d174      	bne.n	80027d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80026ec:	f7ff fe60 	bl	80023b0 <HAL_GetTick>
 80026f0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d134      	bne.n	8002762 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026f8:	e011      	b.n	800271e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026fa:	f7ff fe59 	bl	80023b0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d90a      	bls.n	800271e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f043 0208 	orr.w	r2, r3, #8
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2203      	movs	r2, #3
 8002718:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e16f      	b.n	80029fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e6      	bne.n	80026fa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fe4b 	bl	80023c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
 800273c:	e01e      	b.n	800277c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800273e:	f7ff fe37 	bl	80023b0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d90a      	bls.n	8002762 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f043 0208 	orr.w	r2, r3, #8
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2203      	movs	r2, #3
 800275c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e14d      	b.n	80029fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	dbe8      	blt.n	800273e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800276c:	2001      	movs	r0, #1
 800276e:	f7ff fe2b 	bl	80023c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	ea02 0103 	and.w	r1, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	21ff      	movs	r1, #255	; 0xff
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	ea02 0103 	and.w	r1, r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d11d      	bne.n	800281a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	4013      	ands	r3, r2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	4313      	orrs	r3, r2
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2207      	movs	r2, #7
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4013      	ands	r3, r2
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	e00f      	b.n	8002864 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d102      	bne.n	8002852 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800284c:	2301      	movs	r3, #1
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	e008      	b.n	8002864 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800285a:	2301      	movs	r3, #1
 800285c:	623b      	str	r3, [r7, #32]
 800285e:	e001      	b.n	8002864 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	4013      	ands	r3, r2
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	791b      	ldrb	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_DAC_ConfigChannel+0x1d8>
 8002892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002896:	e000      	b.n	800289a <HAL_DAC_ConfigChannel+0x1da>
 8002898:	2300      	movs	r3, #0
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	4013      	ands	r3, r2
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	795b      	ldrb	r3, [r3, #5]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_DAC_ConfigChannel+0x204>
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	e000      	b.n	80028c6 <HAL_DAC_ConfigChannel+0x206>
 80028c4:	2300      	movs	r3, #0
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d114      	bne.n	8002906 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80028dc:	f001 fb0e 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 80028e0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_DAC_ConfigChannel+0x348>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d904      	bls.n	80028f4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e00f      	b.n	8002914 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4a45      	ldr	r2, [pc, #276]	; (8002a0c <HAL_DAC_ConfigChannel+0x34c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d90a      	bls.n	8002912 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	e006      	b.n	8002914 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	4313      	orrs	r3, r2
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e000      	b.n	8002914 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002912:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	4313      	orrs	r3, r2
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	4013      	ands	r3, r2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	4313      	orrs	r3, r2
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	22c0      	movs	r2, #192	; 0xc0
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	400a      	ands	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	ea02 0103 	and.w	r1, r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	09896800 	.word	0x09896800
 8002a0c:	04c4b400 	.word	0x04c4b400

08002a10 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_DACEx_DualStart+0x18>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e03e      	b.n	8002aa6 <HAL_DACEx_DualStart+0x96>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a52:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7ff fcb7 	bl	80023c8 <HAL_Delay>

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d103      	bne.n	8002a70 <HAL_DACEx_DualStart+0x60>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 8002a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a7e:	d103      	bne.n	8002a88 <HAL_DACEx_DualStart+0x78>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08d      	b.n	8002bde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_DMA_Init+0x138>)
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d80f      	bhi.n	8002aee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <HAL_DMA_Init+0x13c>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_DMA_Init+0x140>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_DMA_Init+0x144>)
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
 8002aec:	e00e      	b.n	8002b0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <HAL_DMA_Init+0x148>)
 8002af6:	4413      	add	r3, r2
 8002af8:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <HAL_DMA_Init+0x140>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	009a      	lsls	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <HAL_DMA_Init+0x14c>)
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa76 	bl	8003050 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6c:	d102      	bne.n	8002b74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_DMA_Init+0x104>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d80c      	bhi.n	8002bb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa96 	bl	80030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e008      	b.n	8002bc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020407 	.word	0x40020407
 8002bec:	bffdfff8 	.word	0xbffdfff8
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	bffdfbf8 	.word	0xbffdfbf8
 8002bfc:	40020400 	.word	0x40020400

08002c00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e066      	b.n	8002cee <HAL_DMA_Start_IT+0xee>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d155      	bne.n	8002ce0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9bb 	bl	8002fd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 020e 	orr.w	r2, r2, #14
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 020a 	orr.w	r2, r2, #10
 8002c96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e005      	b.n	8002cec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d005      	beq.n	8002d1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2204      	movs	r2, #4
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e037      	b.n	8002d8a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 020e 	bic.w	r2, r2, #14
 8002d28:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d66:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00c      	beq.n	8002d8a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d88:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d00d      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e047      	b.n	8002e6c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 020e 	bic.w	r2, r2, #14
 8002dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
    }
  }
  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2204      	movs	r2, #4
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d026      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x7a>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0204 	bic.w	r2, r2, #4
 8002ec8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d071      	beq.n	8002fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eee:	e06c      	b.n	8002fca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2202      	movs	r2, #2
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02e      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020a 	bic.w	r2, r2, #10
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	2102      	movs	r1, #2
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d038      	beq.n	8002fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f60:	e033      	b.n	8002fca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d02a      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d025      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
}
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ffc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d108      	bne.n	8003034 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003032:	e007      	b.n	8003044 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d802      	bhi.n	800306a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e001      	b.n	800306e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800306c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3b08      	subs	r3, #8
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	461a      	mov	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800309a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40020407 	.word	0x40020407
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020820 	.word	0x40020820
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	40020880 	.word	0x40020880

080030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	1000823f 	.word	0x1000823f
 8003110:	40020940 	.word	0x40020940

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003122:	e15a      	b.n	80033da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 814c 	beq.w	80033d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d005      	beq.n	8003154 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003150:	2b02      	cmp	r3, #2
 8003152:	d130      	bne.n	80031b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800318a:	2201      	movs	r2, #1
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0201 	and.w	r2, r3, #1
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d017      	beq.n	80031f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d123      	bne.n	8003246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	220f      	movs	r2, #15
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	6939      	ldr	r1, [r7, #16]
 8003242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0203 	and.w	r2, r3, #3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a6 	beq.w	80033d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <HAL_GPIO_Init+0x2e4>)
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	4a5a      	ldr	r2, [pc, #360]	; (80033f8 <HAL_GPIO_Init+0x2e4>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6613      	str	r3, [r2, #96]	; 0x60
 8003294:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <HAL_GPIO_Init+0x2e4>)
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a0:	4a56      	ldr	r2, [pc, #344]	; (80033fc <HAL_GPIO_Init+0x2e8>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ca:	d01f      	beq.n	800330c <HAL_GPIO_Init+0x1f8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_GPIO_Init+0x2ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d019      	beq.n	8003308 <HAL_GPIO_Init+0x1f4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_GPIO_Init+0x2f0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_GPIO_Init+0x1f0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <HAL_GPIO_Init+0x2f4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00d      	beq.n	8003300 <HAL_GPIO_Init+0x1ec>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_GPIO_Init+0x2f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <HAL_GPIO_Init+0x1e8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a48      	ldr	r2, [pc, #288]	; (8003410 <HAL_GPIO_Init+0x2fc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_GPIO_Init+0x1e4>
 80032f4:	2305      	movs	r3, #5
 80032f6:	e00a      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 80032f8:	2306      	movs	r3, #6
 80032fa:	e008      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e006      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 8003300:	2303      	movs	r3, #3
 8003302:	e004      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_Init+0x1fa>
 800330c:	2300      	movs	r3, #0
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331e:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_GPIO_Init+0x2e8>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800332c:	4b39      	ldr	r3, [pc, #228]	; (8003414 <HAL_GPIO_Init+0x300>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003350:	4a30      	ldr	r2, [pc, #192]	; (8003414 <HAL_GPIO_Init+0x300>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_GPIO_Init+0x300>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800337a:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_GPIO_Init+0x300>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_GPIO_Init+0x300>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_GPIO_Init+0x300>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_GPIO_Init+0x300>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ce:	4a11      	ldr	r2, [pc, #68]	; (8003414 <HAL_GPIO_Init+0x300>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f ae9d 	bne.w	8003124 <HAL_GPIO_Init+0x10>
  }
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	48000400 	.word	0x48000400
 8003404:	48000800 	.word	0x48000800
 8003408:	48000c00 	.word	0x48000c00
 800340c:	48001000 	.word	0x48001000
 8003410:	48001400 	.word	0x48001400
 8003414:	40010400 	.word	0x40010400

08003418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
 8003424:	4613      	mov	r3, r2
 8003426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003434:	e002      	b.n	800343c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d141      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d131      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003464:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346a:	4a46      	ldr	r2, [pc, #280]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347c:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2232      	movs	r2, #50	; 0x32
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349a:	e002      	b.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d102      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d158      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e057      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034d8:	e04d      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d141      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d131      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	4a23      	ldr	r2, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2232      	movs	r2, #50	; 0x32
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003526:	e002      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b01      	subs	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d102      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d112      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e011      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003564:	e007      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003574:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40007000 	.word	0x40007000
 8003588:	20000004 	.word	0x20000004
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e306      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d075      	beq.n	800369a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ae:	4b97      	ldr	r3, [pc, #604]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_OscConfig+0x3e>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_OscConfig+0x44>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d10b      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	4b8d      	ldr	r3, [pc, #564]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05b      	beq.n	8003698 <HAL_RCC_OscConfig+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d157      	bne.n	8003698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e2e1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x74>
 80035f6:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a84      	ldr	r2, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003628:	4b78      	ldr	r3, [pc, #480]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a77      	ldr	r2, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b75      	ldr	r3, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a74      	ldr	r2, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe feb2 	bl	80023b0 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fe feae 	bl	80023b0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2a6      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xc0>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fe9e 	bl	80023b0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fe fe9a 	bl	80023b0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e292      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368a:	4b60      	ldr	r3, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0xe8>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d075      	beq.n	8003792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0x136>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_OscConfig+0x13c>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11f      	bne.n	800370c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x154>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e265      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4946      	ldr	r1, [pc, #280]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <HAL_RCC_OscConfig+0x280>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fe0b 	bl	8002318 <HAL_InitTick>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d043      	beq.n	8003790 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e251      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3c      	ldr	r2, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fe46 	bl	80023b0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fe42 	bl	80023b0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e23a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	492d      	ldr	r1, [pc, #180]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 800375a:	e01a      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fe22 	bl	80023b0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe fe1e 	bl	80023b0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e216      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x1e0>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d041      	beq.n	8003822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fe fdfb 	bl	80023b0 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037be:	f7fe fdf7 	bl	80023b0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1ef      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ef      	beq.n	80037be <HAL_RCC_OscConfig+0x22e>
 80037de:	e020      	b.n	8003822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fe fdde 	bl	80023b0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f6:	e00d      	b.n	8003814 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fe fdda 	bl	80023b0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d906      	bls.n	8003814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1d2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003814:	4b8c      	ldr	r3, [pc, #560]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ea      	bne.n	80037f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a6 	beq.w	800397c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_OscConfig+0x2b4>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x2b6>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	4a7e      	ldr	r2, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6593      	str	r3, [r2, #88]	; 0x58
 8003856:	4b7c      	ldr	r3, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b79      	ldr	r3, [pc, #484]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe fd97 	bl	80023b0 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe fd93 	bl	80023b0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e18b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d108      	bne.n	80038be <HAL_RCC_OscConfig+0x32e>
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a65      	ldr	r2, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038bc:	e024      	b.n	8003908 <HAL_RCC_OscConfig+0x378>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d110      	bne.n	80038e8 <HAL_RCC_OscConfig+0x358>
 80038c6:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x378>
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe fd4e 	bl	80023b0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fe fd4a 	bl	80023b0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e140      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392e:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ed      	beq.n	8003918 <HAL_RCC_OscConfig+0x388>
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe fd37 	bl	80023b0 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe fd33 	bl	80023b0 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e129      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ed      	bne.n	8003946 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d03c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01c      	beq.n	80039ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003996:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe fd06 	bl	80023b0 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a8:	f7fe fd02 	bl	80023b0 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0fa      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <HAL_RCC_OscConfig+0x418>
 80039c8:	e01b      	b.n	8003a02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fe fce9 	bl	80023b0 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e2:	f7fe fce5 	bl	80023b0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0dd      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ef      	bne.n	80039e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d1 	beq.w	8003bae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f000 808b 	beq.w	8003b30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d15e      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fcbf 	bl	80023b0 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e00c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fe fcbb 	bl	80023b0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d905      	bls.n	8003a50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0b3      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ec      	bne.n	8003a36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x62c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a11      	ldr	r1, [r2, #32]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a76:	0212      	lsls	r2, r2, #8
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0552      	lsls	r2, r2, #21
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a96:	06d2      	lsls	r2, r2, #27
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a44      	ldr	r2, [pc, #272]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fc7a 	bl	80023b0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fc76 	bl	80023b0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e06e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x530>
 8003ade:	e066      	b.n	8003bae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003afe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe fc52 	bl	80023b0 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe fc4e 	bl	80023b0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e046      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b22:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x580>
 8003b2e:	e03e      	b.n	8003bae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e039      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d12c      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d123      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d11b      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d113      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	019f800c 	.word	0x019f800c

08003bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e11e      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d910      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 020f 	bic.w	r2, r3, #15
 8003bee:	498c      	ldr	r1, [pc, #560]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e106      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d073      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d129      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1c:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0f4      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c2c:	f000 f99e 	bl	8003f6c <RCC_GetSysClockFreqFromPLLSource>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_RCC_ClockConfig+0x268>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d93f      	bls.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d033      	beq.n	8003cba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d12f      	bne.n	8003cba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c5a:	4b72      	ldr	r3, [pc, #456]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c62:	4a70      	ldr	r2, [pc, #448]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e024      	b.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0c6      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0be      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c98:	f000 f8ce 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a61      	ldr	r2, [pc, #388]	; (8003e28 <HAL_RCC_ClockConfig+0x268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d909      	bls.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	4a5d      	ldr	r2, [pc, #372]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4957      	ldr	r1, [pc, #348]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe fb70 	bl	80023b0 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7fe fb6c 	bl	80023b0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e095      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a42      	ldr	r2, [pc, #264]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d34:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4936      	ldr	r1, [pc, #216]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d105      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d56:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d62:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d21d      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 020f 	bic.w	r2, r3, #15
 8003d78:	4929      	ldr	r1, [pc, #164]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d80:	f7fe fb16 	bl	80023b0 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fe fb12 	bl	80023b0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03b      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1ed      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4917      	ldr	r1, [pc, #92]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490f      	ldr	r1, [pc, #60]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dea:	f000 f825 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490c      	ldr	r1, [pc, #48]	; (8003e2c <HAL_RCC_ClockConfig+0x26c>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x270>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fa82 	bl	8002318 <HAL_InitTick>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	04c4b400 	.word	0x04c4b400
 8003e2c:	0800cc8c 	.word	0x0800cc8c
 8003e30:	20000004 	.word	0x20000004
 8003e34:	20000008 	.word	0x20000008

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e047      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e03e      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d136      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3301      	adds	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e96:	68d2      	ldr	r2, [r2, #12]
 8003e98:	0a12      	lsrs	r2, r2, #8
 8003e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	617b      	str	r3, [r7, #20]
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	0a12      	lsrs	r2, r2, #8
 8003eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0e5b      	lsrs	r3, r3, #25
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e001      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ee0:	693b      	ldr	r3, [r7, #16]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	00f42400 	.word	0x00f42400
 8003ef8:	007a1200 	.word	0x007a1200

08003efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f18:	f7ff fff0 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800cc9c 	.word	0x0800cc9c

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f44:	f7ff ffda 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	0800cc9c 	.word	0x0800cc9c

08003f6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d10c      	bne.n	8003faa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f9a:	68d2      	ldr	r2, [r2, #12]
 8003f9c:	0a12      	lsrs	r2, r2, #8
 8003f9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
    break;
 8003fa8:	e00c      	b.n	8003fc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	0a12      	lsrs	r2, r2, #8
 8003fb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
    break;
 8003fc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0e5b      	lsrs	r3, r3, #25
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fde:	687b      	ldr	r3, [r7, #4]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	007a1200 	.word	0x007a1200
 8003ff4:	00f42400 	.word	0x00f42400

08003ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004000:	2300      	movs	r3, #0
 8004002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004004:	2300      	movs	r3, #0
 8004006:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8098 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a39      	ldr	r2, [pc, #228]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404e:	f7fe f9af 	bl	80023b0 <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004054:	e009      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fe f9ab 	bl	80023b0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	74fb      	strb	r3, [r7, #19]
        break;
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ef      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d159      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	d019      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe f96b 	bl	80023b0 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fe f967 	bl	80023b0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d902      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	74fb      	strb	r3, [r7, #19]
            break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ec      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	74bb      	strb	r3, [r7, #18]
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004134:	7c7b      	ldrb	r3, [r7, #17]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413a:	4ba6      	ldr	r3, [pc, #664]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	4aa5      	ldr	r2, [pc, #660]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004152:	4ba0      	ldr	r3, [pc, #640]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 0203 	bic.w	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	499c      	ldr	r1, [pc, #624]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004174:	4b97      	ldr	r3, [pc, #604]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 020c 	bic.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4994      	ldr	r1, [pc, #592]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004196:	4b8f      	ldr	r3, [pc, #572]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	498b      	ldr	r1, [pc, #556]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b8:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4983      	ldr	r1, [pc, #524]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041da:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	497a      	ldr	r1, [pc, #488]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fc:	4b75      	ldr	r3, [pc, #468]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	4972      	ldr	r1, [pc, #456]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421e:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	4969      	ldr	r1, [pc, #420]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4961      	ldr	r1, [pc, #388]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	4958      	ldr	r1, [pc, #352]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	4950      	ldr	r1, [pc, #320]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a4a      	ldr	r2, [pc, #296]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4942      	ldr	r1, [pc, #264]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042f4:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004312:	d105      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4926      	ldr	r1, [pc, #152]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434a:	d105      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004356:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	4918      	ldr	r1, [pc, #96]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ba:	d105      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000

080043d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e049      	b.n	800447e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd fdb2 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f000 fee6 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e04a      	b.n	8004536 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_TIM_Base_Start_IT+0xbc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x6c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d013      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x6c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <HAL_TIM_Base_Start_IT+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x6c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_TIM_Base_Start_IT+0xc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x6c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_TIM_Base_Start_IT+0xc8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x6c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a19      	ldr	r2, [pc, #100]	; (8004554 <HAL_TIM_Base_Start_IT+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d115      	bne.n	8004520 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <HAL_TIM_Base_Start_IT+0xd0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d015      	beq.n	8004532 <HAL_TIM_Base_Start_IT+0xaa>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d011      	beq.n	8004532 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e008      	b.n	8004532 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e000      	b.n	8004534 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40013400 	.word	0x40013400
 8004554:	40014000 	.word	0x40014000
 8004558:	00010007 	.word	0x00010007

0800455c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f841 	bl	800460a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fe24 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <HAL_TIM_IC_Start_DMA+0x22>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e023      	b.n	800468a <HAL_TIM_IC_Start_DMA+0x6a>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d104      	bne.n	8004652 <HAL_TIM_IC_Start_DMA+0x32>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e01b      	b.n	800468a <HAL_TIM_IC_Start_DMA+0x6a>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d104      	bne.n	8004662 <HAL_TIM_IC_Start_DMA+0x42>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465e:	b2db      	uxtb	r3, r3
 8004660:	e013      	b.n	800468a <HAL_TIM_IC_Start_DMA+0x6a>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d104      	bne.n	8004672 <HAL_TIM_IC_Start_DMA+0x52>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e00b      	b.n	800468a <HAL_TIM_IC_Start_DMA+0x6a>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b10      	cmp	r3, #16
 8004676:	d104      	bne.n	8004682 <HAL_TIM_IC_Start_DMA+0x62>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e003      	b.n	800468a <HAL_TIM_IC_Start_DMA+0x6a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004688:	b2db      	uxtb	r3, r3
 800468a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <HAL_TIM_IC_Start_DMA+0x7c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e013      	b.n	80046c4 <HAL_TIM_IC_Start_DMA+0xa4>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d104      	bne.n	80046ac <HAL_TIM_IC_Start_DMA+0x8c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e00b      	b.n	80046c4 <HAL_TIM_IC_Start_DMA+0xa4>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d104      	bne.n	80046bc <HAL_TIM_IC_Start_DMA+0x9c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e003      	b.n	80046c4 <HAL_TIM_IC_Start_DMA+0xa4>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80046c6:	7dbb      	ldrb	r3, [r7, #22]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d002      	beq.n	80046d2 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80046cc:	7d7b      	ldrb	r3, [r7, #21]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	e152      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	7dbb      	ldrb	r3, [r7, #22]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d153      	bne.n	8004784 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80046dc:	7d7b      	ldrb	r3, [r7, #21]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d150      	bne.n	8004784 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) && (Length > 0U))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_IC_Start_DMA+0xd2>
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e144      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_IC_Start_DMA+0xe2>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	e023      	b.n	800474a <HAL_TIM_IC_Start_DMA+0x12a>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_IC_Start_DMA+0xf2>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e01b      	b.n	800474a <HAL_TIM_IC_Start_DMA+0x12a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_IC_Start_DMA+0x102>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	e013      	b.n	800474a <HAL_TIM_IC_Start_DMA+0x12a>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d104      	bne.n	8004732 <HAL_TIM_IC_Start_DMA+0x112>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004730:	e00b      	b.n	800474a <HAL_TIM_IC_Start_DMA+0x12a>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d104      	bne.n	8004742 <HAL_TIM_IC_Start_DMA+0x122>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	e003      	b.n	800474a <HAL_TIM_IC_Start_DMA+0x12a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_TIM_IC_Start_DMA+0x13a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004758:	e016      	b.n	8004788 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d104      	bne.n	800476a <HAL_TIM_IC_Start_DMA+0x14a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8004768:	e00e      	b.n	8004788 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d104      	bne.n	800477a <HAL_TIM_IC_Start_DMA+0x15a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 8004778:	e006      	b.n	8004788 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 8004782:	e001      	b.n	8004788 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0f9      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 ff73 	bl	800567c <TIM_CCxChannelCmd>

  switch (Channel)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	f200 80ad 	bhi.w	80048f8 <HAL_TIM_IC_Start_DMA+0x2d8>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <HAL_TIM_IC_Start_DMA+0x184>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080048f9 	.word	0x080048f9
 80047ac:	080048f9 	.word	0x080048f9
 80047b0:	080048f9 	.word	0x080048f9
 80047b4:	08004821 	.word	0x08004821
 80047b8:	080048f9 	.word	0x080048f9
 80047bc:	080048f9 	.word	0x080048f9
 80047c0:	080048f9 	.word	0x080048f9
 80047c4:	08004869 	.word	0x08004869
 80047c8:	080048f9 	.word	0x080048f9
 80047cc:	080048f9 	.word	0x080048f9
 80047d0:	080048f9 	.word	0x080048f9
 80047d4:	080048b1 	.word	0x080048b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	4a69      	ldr	r2, [pc, #420]	; (8004984 <HAL_TIM_IC_Start_DMA+0x364>)
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_TIM_IC_Start_DMA+0x368>)
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	4a67      	ldr	r2, [pc, #412]	; (800498c <HAL_TIM_IC_Start_DMA+0x36c>)
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3334      	adds	r3, #52	; 0x34
 80047fa:	4619      	mov	r1, r3
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	f7fe f9fe 	bl	8002c00 <HAL_DMA_Start_IT>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0b6      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	60da      	str	r2, [r3, #12]
      break;
 800481e:	e06e      	b.n	80048fe <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_TIM_IC_Start_DMA+0x364>)
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	4a56      	ldr	r2, [pc, #344]	; (8004988 <HAL_TIM_IC_Start_DMA+0x368>)
 800482e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	4a55      	ldr	r2, [pc, #340]	; (800498c <HAL_TIM_IC_Start_DMA+0x36c>)
 8004836:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3338      	adds	r3, #56	; 0x38
 8004842:	4619      	mov	r1, r3
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	f7fe f9da 	bl	8002c00 <HAL_DMA_Start_IT>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e092      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004864:	60da      	str	r2, [r3, #12]
      break;
 8004866:	e04a      	b.n	80048fe <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a45      	ldr	r2, [pc, #276]	; (8004984 <HAL_TIM_IC_Start_DMA+0x364>)
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a44      	ldr	r2, [pc, #272]	; (8004988 <HAL_TIM_IC_Start_DMA+0x368>)
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a43      	ldr	r2, [pc, #268]	; (800498c <HAL_TIM_IC_Start_DMA+0x36c>)
 800487e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	333c      	adds	r3, #60	; 0x3c
 800488a:	4619      	mov	r1, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	f7fe f9b6 	bl	8002c00 <HAL_DMA_Start_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06e      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	60da      	str	r2, [r3, #12]
      break;
 80048ae:	e026      	b.n	80048fe <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_TIM_IC_Start_DMA+0x364>)
 80048b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	4a32      	ldr	r2, [pc, #200]	; (8004988 <HAL_TIM_IC_Start_DMA+0x368>)
 80048be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	4a31      	ldr	r2, [pc, #196]	; (800498c <HAL_TIM_IC_Start_DMA+0x36c>)
 80048c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3340      	adds	r3, #64	; 0x40
 80048d2:	4619      	mov	r1, r3
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	f7fe f992 	bl	8002c00 <HAL_DMA_Start_IT>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e04a      	b.n	800497c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f4:	60da      	str	r2, [r3, #12]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a23      	ldr	r2, [pc, #140]	; (8004990 <HAL_TIM_IC_Start_DMA+0x370>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d018      	beq.n	800493a <HAL_TIM_IC_Start_DMA+0x31a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d013      	beq.n	800493a <HAL_TIM_IC_Start_DMA+0x31a>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_TIM_IC_Start_DMA+0x374>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_TIM_IC_Start_DMA+0x31a>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_TIM_IC_Start_DMA+0x378>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_TIM_IC_Start_DMA+0x31a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_TIM_IC_Start_DMA+0x37c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIM_IC_Start_DMA+0x31a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_TIM_IC_Start_DMA+0x380>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d115      	bne.n	8004966 <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_TIM_IC_Start_DMA+0x384>)
 8004942:	4013      	ands	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b06      	cmp	r3, #6
 800494a:	d015      	beq.n	8004978 <HAL_TIM_IC_Start_DMA+0x358>
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004952:	d011      	beq.n	8004978 <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	e008      	b.n	8004978 <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e000      	b.n	800497a <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	bf00      	nop
  }

  /* Return function status */
  return status;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	080050b7 	.word	0x080050b7
 8004988:	0800517f 	.word	0x0800517f
 800498c:	08005025 	.word	0x08005025
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40013400 	.word	0x40013400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fcee 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 faee 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 faf5 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fcc4 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fac4 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 facb 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fc9a 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa9a 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 faa1 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc fc70 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa70 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa77 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fc0c 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fe44 	bl	80057e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fe37 	bl	80057f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa25 	bl	8004ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0220 	mvn.w	r2, #32
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fdf7 	bl	80057cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bec:	d10f      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fdfd 	bl	8005808 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c1c:	d10f      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fdef 	bl	800581c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fde1 	bl	8005830 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fdd3 	bl	8005844 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e088      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11b      	bne.n	8004d0a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f000 fb11 	bl	8005308 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 020c 	bic.w	r2, r2, #12
 8004cf4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6999      	ldr	r1, [r3, #24]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
 8004d08:	e060      	b.n	8004dcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d11c      	bne.n	8004d4a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f000 fb89 	bl	8005436 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d32:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
 8004d48:	e040      	b.n	8004dcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f000 fbd6 	bl	8005510 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 020c 	bic.w	r2, r2, #12
 8004d72:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69d9      	ldr	r1, [r3, #28]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
 8004d86:	e021      	b.n	8004dcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d11c      	bne.n	8004dc8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6819      	ldr	r1, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f000 fbf3 	bl	8005588 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004db0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	021a      	lsls	r2, r3, #8
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	61da      	str	r2, [r3, #28]
 8004dc6:	e001      	b.n	8004dcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_ConfigClockSource+0x1c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e0de      	b.n	8004fba <HAL_TIM_ConfigClockSource+0x1da>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f000 80a9 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004e3c:	4a61      	ldr	r2, [pc, #388]	; (8004fc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f200 80ae 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e44:	4a60      	ldr	r2, [pc, #384]	; (8004fc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f000 80a1 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004e4c:	4a5e      	ldr	r2, [pc, #376]	; (8004fc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	f200 80a6 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e54:	4a5d      	ldr	r2, [pc, #372]	; (8004fcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	f000 8099 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004e5c:	4a5b      	ldr	r2, [pc, #364]	; (8004fcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	f200 809e 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e64:	4a5a      	ldr	r2, [pc, #360]	; (8004fd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f000 8091 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004e6c:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f200 8096 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e78:	f000 8089 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004e7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e80:	f200 808e 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e88:	d03e      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x128>
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8e:	f200 8087 	bhi.w	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	f000 8086 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9e:	d87f      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ea0:	2b70      	cmp	r3, #112	; 0x70
 8004ea2:	d01a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0xfa>
 8004ea4:	2b70      	cmp	r3, #112	; 0x70
 8004ea6:	d87b      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ea8:	2b60      	cmp	r3, #96	; 0x60
 8004eaa:	d050      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x16e>
 8004eac:	2b60      	cmp	r3, #96	; 0x60
 8004eae:	d877      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004eb0:	2b50      	cmp	r3, #80	; 0x50
 8004eb2:	d03c      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x14e>
 8004eb4:	2b50      	cmp	r3, #80	; 0x50
 8004eb6:	d873      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d058      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x18e>
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d86f      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ec0:	2b30      	cmp	r3, #48	; 0x30
 8004ec2:	d064      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ec4:	2b30      	cmp	r3, #48	; 0x30
 8004ec6:	d86b      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d060      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d867      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05c      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d05a      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ed8:	e062      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6899      	ldr	r1, [r3, #8]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f000 fba7 	bl	800563c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	609a      	str	r2, [r3, #8]
      break;
 8004f06:	e04f      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6899      	ldr	r1, [r3, #8]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f000 fb90 	bl	800563c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f2a:	609a      	str	r2, [r3, #8]
      break;
 8004f2c:	e03c      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6859      	ldr	r1, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f000 fa4c 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2150      	movs	r1, #80	; 0x50
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb5b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f4c:	e02c      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f000 faa8 	bl	80054b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2160      	movs	r1, #96	; 0x60
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fb4b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f6c:	e01c      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f000 fa2c 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2140      	movs	r1, #64	; 0x40
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fb3b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f8c:	e00c      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f000 fb32 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004f9e:	e003      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e000      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	00100070 	.word	0x00100070
 8004fc8:	00100040 	.word	0x00100040
 8004fcc:	00100030 	.word	0x00100030
 8004fd0:	00100020 	.word	0x00100020

08004fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800504a:	e02a      	b.n	80050a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d107      	bne.n	8005066 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2202      	movs	r2, #2
 800505a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005064:	e01d      	b.n	80050a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d107      	bne.n	8005080 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2204      	movs	r2, #4
 8005074:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507e:	e010      	b.n	80050a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d107      	bne.n	800509a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005098:	e003      	b.n	80050a2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ffb4 	bl	8005010 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	771a      	strb	r2, [r3, #28]
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d10f      	bne.n	80050ee <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d146      	bne.n	800516a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	e03d      	b.n	800516a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d10f      	bne.n	8005118 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2202      	movs	r2, #2
 80050fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d131      	bne.n	800516a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005116:	e028      	b.n	800516a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d10f      	bne.n	8005142 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2204      	movs	r2, #4
 8005126:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11c      	bne.n	800516a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005140:	e013      	b.n	800516a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d10e      	bne.n	800516a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2208      	movs	r2, #8
 8005150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7fc f92e 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	771a      	strb	r2, [r3, #28]
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d103      	bne.n	800519e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	771a      	strb	r2, [r3, #28]
 800519c:	e019      	b.n	80051d2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d103      	bne.n	80051b0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2202      	movs	r2, #2
 80051ac:	771a      	strb	r2, [r3, #28]
 80051ae:	e010      	b.n	80051d2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d103      	bne.n	80051c2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
 80051c0:	e007      	b.n	80051d2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2208      	movs	r2, #8
 80051d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7fc f8cc 	bl	8001370 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3c      	ldr	r2, [pc, #240]	; (80052ec <TIM_Base_SetConfig+0x104>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a39      	ldr	r2, [pc, #228]	; (80052f0 <TIM_Base_SetConfig+0x108>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <TIM_Base_SetConfig+0x10c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <TIM_Base_SetConfig+0x110>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <TIM_Base_SetConfig+0x104>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01b      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d017      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <TIM_Base_SetConfig+0x108>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <TIM_Base_SetConfig+0x10c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_Base_SetConfig+0x110>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_Base_SetConfig+0x114>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a26      	ldr	r2, [pc, #152]	; (8005300 <TIM_Base_SetConfig+0x118>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <TIM_Base_SetConfig+0x11c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <TIM_Base_SetConfig+0x104>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00f      	beq.n	80052d0 <TIM_Base_SetConfig+0xe8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <TIM_Base_SetConfig+0x110>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_Base_SetConfig+0xe8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <TIM_Base_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_Base_SetConfig+0xe8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <TIM_Base_SetConfig+0x118>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xe8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <TIM_Base_SetConfig+0x11c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <TIM_TI1_SetConfig+0xbc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_TI1_SetConfig+0x56>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533c:	d00f      	beq.n	800535e <TIM_TI1_SetConfig+0x56>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <TIM_TI1_SetConfig+0xc0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_TI1_SetConfig+0x56>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a20      	ldr	r2, [pc, #128]	; (80053cc <TIM_TI1_SetConfig+0xc4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_TI1_SetConfig+0x56>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <TIM_TI1_SetConfig+0xc8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_TI1_SetConfig+0x56>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <TIM_TI1_SetConfig+0xcc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <TIM_TI1_SetConfig+0x5a>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <TIM_TI1_SetConfig+0x5c>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e003      	b.n	8005382 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	b2db      	uxtb	r3, r3
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f023 030a 	bic.w	r3, r3, #10
 800539c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 030a 	and.w	r3, r3, #10
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000

080053d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f023 0210 	bic.w	r2, r3, #16
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	b29b      	uxth	r3, r3
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005488:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 0210 	bic.w	r2, r3, #16
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	031b      	lsls	r3, r3, #12
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 0303 	bic.w	r3, r3, #3
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	b2db      	uxtb	r3, r3
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	031b      	lsls	r3, r3, #12
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80055da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	031b      	lsls	r3, r3, #12
 80055e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	f043 0307 	orr.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	431a      	orrs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2201      	movs	r2, #1
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e065      	b.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d108      	bne.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800571a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d013      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10c      	bne.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e042      	b.n	80058f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc fc7d 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc4c 	bl	8006138 <UART_SetConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e022      	b.n	80058f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 ff0c 	bl	80066d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 ff93 	bl	8006814 <UART_CheckIdleState>
 80058ee:	4603      	mov	r3, r0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	2b20      	cmp	r3, #32
 800590e:	d142      	bne.n	8005996 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Receive_IT+0x24>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e03b      	b.n	8005998 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_UART_Receive_IT+0x36>
 800592a:	2302      	movs	r3, #2
 800592c:	e034      	b.n	8005998 <HAL_UART_Receive_IT+0xa0>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <HAL_UART_Receive_IT+0xa8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01f      	beq.n	8005986 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d018      	beq.n	8005986 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	613b      	str	r3, [r7, #16]
   return(result);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	623b      	str	r3, [r7, #32]
 8005974:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e6      	bne.n	8005954 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	461a      	mov	r2, r3
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f001 f855 	bl	8006a3c <UART_Start_Receive_IT>
 8005992:	4603      	mov	r3, r0
 8005994:	e000      	b.n	8005998 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40008000 	.word	0x40008000

080059a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d17a      	bne.n	8005ab2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Transmit_DMA+0x24>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e073      	b.n	8005ab4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Transmit_DMA+0x36>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e06c      	b.n	8005ab4 <HAL_UART_Transmit_DMA+0x110>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2221      	movs	r2, #33	; 0x21
 8005a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02c      	beq.n	8005a6a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a14:	4a29      	ldr	r2, [pc, #164]	; (8005abc <HAL_UART_Transmit_DMA+0x118>)
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1c:	4a28      	ldr	r2, [pc, #160]	; (8005ac0 <HAL_UART_Transmit_DMA+0x11c>)
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a24:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <HAL_UART_Transmit_DMA+0x120>)
 8005a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	4619      	mov	r1, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	461a      	mov	r2, r3
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f7fd f8dc 	bl	8002c00 <HAL_DMA_Start_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2210      	movs	r2, #16
 8005a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e024      	b.n	8005ab4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	623a      	str	r2, [r7, #32]
 8005a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	69f9      	ldr	r1, [r7, #28]
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3728      	adds	r7, #40	; 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08006ddf 	.word	0x08006ddf
 8005ac0:	08006e79 	.word	0x08006e79
 8005ac4:	08006e95 	.word	0x08006e95

08005ac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b0ba      	sub	sp, #232	; 0xe8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005af2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005af6:	4013      	ands	r3, r2
 8005af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11b      	bne.n	8005b3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 82d6 	beq.w	80060de <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
      }
      return;
 8005b3a:	e2d0      	b.n	80060de <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 811f 	beq.w	8005d84 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b4a:	4b8b      	ldr	r3, [pc, #556]	; (8005d78 <HAL_UART_IRQHandler+0x2b0>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b56:	4b89      	ldr	r3, [pc, #548]	; (8005d7c <HAL_UART_IRQHandler+0x2b4>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8112 	beq.w	8005d84 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d011      	beq.n	8005b90 <HAL_UART_IRQHandler+0xc8>
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d011      	beq.n	8005bc0 <HAL_UART_IRQHandler+0xf8>
 8005b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2202      	movs	r2, #2
 8005bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f043 0204 	orr.w	r2, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x128>
 8005bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be6:	f043 0202 	orr.w	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	; (8005d78 <HAL_UART_IRQHandler+0x2b0>)
 8005c0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c22:	f043 0208 	orr.w	r2, r3, #8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_UART_IRQHandler+0x196>
 8005c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 823c 	beq.w	80060e2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d105      	bne.n	8005c8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d005      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04f      	beq.n	8005d62 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f825 	bl	8006d12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d141      	bne.n	8005d5a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1d9      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d013      	beq.n	8005d52 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2e:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <HAL_UART_IRQHandler+0x2b8>)
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd f836 	bl	8002da8 <HAL_DMA_Abort_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e00f      	b.n	8005d72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9da 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	e00b      	b.n	8005d72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9d6 	bl	800610c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	e007      	b.n	8005d72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9d2 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d70:	e1b7      	b.n	80060e2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d72:	bf00      	nop
    return;
 8005d74:	e1b5      	b.n	80060e2 <HAL_UART_IRQHandler+0x61a>
 8005d76:	bf00      	nop
 8005d78:	10000001 	.word	0x10000001
 8005d7c:	04000120 	.word	0x04000120
 8005d80:	08006f15 	.word	0x08006f15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	f040 814a 	bne.w	8006022 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8143 	beq.w	8006022 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 813c 	beq.w	8006022 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2210      	movs	r2, #16
 8005db0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	f040 80b5 	bne.w	8005f2c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8187 	beq.w	80060e6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de2:	429a      	cmp	r2, r3
 8005de4:	f080 817f 	bcs.w	80060e6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 8086 	bne.w	8005f10 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1da      	bne.n	8005e04 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e1      	bne.n	8005e4e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e3      	bne.n	8005e8a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	f023 0310 	bic.w	r3, r3, #16
 8005ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ef2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ef4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e4      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fc fef3 	bl	8002cf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8fb 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f2a:	e0dc      	b.n	80060e6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80ce 	beq.w	80060ea <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80c9 	beq.w	80060ea <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e4      	bne.n	8005f58 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e1      	bne.n	8005f8e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0310 	bic.w	r3, r3, #16
 8005ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	617b      	str	r3, [r7, #20]
   return(result);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e4      	bne.n	8005fde <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f880 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006020:	e063      	b.n	80060ea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <HAL_UART_IRQHandler+0x584>
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fc03 	bl	8007850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800604a:	e051      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b00      	cmp	r3, #0
 8006056:	d014      	beq.n	8006082 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	2b00      	cmp	r3, #0
 8006076:	d03a      	beq.n	80060ee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
    }
    return;
 8006080:	e035      	b.n	80060ee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_UART_IRQHandler+0x5da>
 800608e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ff50 	bl	8006f40 <UART_EndTransmit_IT>
    return;
 80060a0:	e026      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_UART_IRQHandler+0x5fa>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fbdc 	bl	8007878 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c0:	e016      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <HAL_UART_IRQHandler+0x628>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0c      	bge.n	80060f0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fbc4 	bl	8007864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060dc:	e008      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
      return;
 80060de:	bf00      	nop
 80060e0:	e006      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
    return;
 80060e2:	bf00      	nop
 80060e4:	e004      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
      return;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
      return;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <HAL_UART_IRQHandler+0x628>
    return;
 80060ee:	bf00      	nop
  }
}
 80060f0:	37e8      	adds	r7, #232	; 0xe8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop

080060f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b08c      	sub	sp, #48	; 0x30
 800613e:	af00      	add	r7, sp, #0
 8006140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	431a      	orrs	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4bab      	ldr	r3, [pc, #684]	; (8006414 <UART_SetConfig+0x2dc>)
 8006168:	4013      	ands	r3, r2
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006170:	430b      	orrs	r3, r1
 8006172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4aa0      	ldr	r2, [pc, #640]	; (8006418 <UART_SetConfig+0x2e0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f023 010f 	bic.w	r1, r3, #15
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a91      	ldr	r2, [pc, #580]	; (800641c <UART_SetConfig+0x2e4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d125      	bne.n	8006228 <UART_SetConfig+0xf0>
 80061dc:	4b90      	ldr	r3, [pc, #576]	; (8006420 <UART_SetConfig+0x2e8>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d81a      	bhi.n	8006220 <UART_SetConfig+0xe8>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <UART_SetConfig+0xb8>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006219 	.word	0x08006219
 8006200:	2301      	movs	r3, #1
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e0d6      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e0d2      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006216:	e0ce      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621e:	e0ca      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006226:	e0c6      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <UART_SetConfig+0x2ec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d138      	bne.n	80062a4 <UART_SetConfig+0x16c>
 8006232:	4b7b      	ldr	r3, [pc, #492]	; (8006420 <UART_SetConfig+0x2e8>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d82d      	bhi.n	800629c <UART_SetConfig+0x164>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x110>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800627d 	.word	0x0800627d
 800624c:	0800629d 	.word	0x0800629d
 8006250:	0800629d 	.word	0x0800629d
 8006254:	0800629d 	.word	0x0800629d
 8006258:	0800628d 	.word	0x0800628d
 800625c:	0800629d 	.word	0x0800629d
 8006260:	0800629d 	.word	0x0800629d
 8006264:	0800629d 	.word	0x0800629d
 8006268:	08006285 	.word	0x08006285
 800626c:	0800629d 	.word	0x0800629d
 8006270:	0800629d 	.word	0x0800629d
 8006274:	0800629d 	.word	0x0800629d
 8006278:	08006295 	.word	0x08006295
 800627c:	2300      	movs	r3, #0
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006282:	e098      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006284:	2302      	movs	r3, #2
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628a:	e094      	b.n	80063b6 <UART_SetConfig+0x27e>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006292:	e090      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629a:	e08c      	b.n	80063b6 <UART_SetConfig+0x27e>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a2:	e088      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a5f      	ldr	r2, [pc, #380]	; (8006428 <UART_SetConfig+0x2f0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d125      	bne.n	80062fa <UART_SetConfig+0x1c2>
 80062ae:	4b5c      	ldr	r3, [pc, #368]	; (8006420 <UART_SetConfig+0x2e8>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d016      	beq.n	80062ea <UART_SetConfig+0x1b2>
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d818      	bhi.n	80062f2 <UART_SetConfig+0x1ba>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d00a      	beq.n	80062da <UART_SetConfig+0x1a2>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d814      	bhi.n	80062f2 <UART_SetConfig+0x1ba>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <UART_SetConfig+0x19a>
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d008      	beq.n	80062e2 <UART_SetConfig+0x1aa>
 80062d0:	e00f      	b.n	80062f2 <UART_SetConfig+0x1ba>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d8:	e06d      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062da:	2302      	movs	r3, #2
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e0:	e069      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062e2:	2304      	movs	r3, #4
 80062e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e8:	e065      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062ea:	2308      	movs	r3, #8
 80062ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f0:	e061      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062f2:	2310      	movs	r3, #16
 80062f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f8:	e05d      	b.n	80063b6 <UART_SetConfig+0x27e>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4b      	ldr	r2, [pc, #300]	; (800642c <UART_SetConfig+0x2f4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d125      	bne.n	8006350 <UART_SetConfig+0x218>
 8006304:	4b46      	ldr	r3, [pc, #280]	; (8006420 <UART_SetConfig+0x2e8>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800630e:	2bc0      	cmp	r3, #192	; 0xc0
 8006310:	d016      	beq.n	8006340 <UART_SetConfig+0x208>
 8006312:	2bc0      	cmp	r3, #192	; 0xc0
 8006314:	d818      	bhi.n	8006348 <UART_SetConfig+0x210>
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d00a      	beq.n	8006330 <UART_SetConfig+0x1f8>
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d814      	bhi.n	8006348 <UART_SetConfig+0x210>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <UART_SetConfig+0x1f0>
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d008      	beq.n	8006338 <UART_SetConfig+0x200>
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x210>
 8006328:	2300      	movs	r3, #0
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e042      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006330:	2302      	movs	r3, #2
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e03e      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633e:	e03a      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006346:	e036      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634e:	e032      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a30      	ldr	r2, [pc, #192]	; (8006418 <UART_SetConfig+0x2e0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d12a      	bne.n	80063b0 <UART_SetConfig+0x278>
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <UART_SetConfig+0x2e8>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006368:	d01a      	beq.n	80063a0 <UART_SetConfig+0x268>
 800636a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800636e:	d81b      	bhi.n	80063a8 <UART_SetConfig+0x270>
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006374:	d00c      	beq.n	8006390 <UART_SetConfig+0x258>
 8006376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637a:	d815      	bhi.n	80063a8 <UART_SetConfig+0x270>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <UART_SetConfig+0x250>
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d008      	beq.n	8006398 <UART_SetConfig+0x260>
 8006386:	e00f      	b.n	80063a8 <UART_SetConfig+0x270>
 8006388:	2300      	movs	r3, #0
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e012      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006390:	2302      	movs	r3, #2
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e00e      	b.n	80063b6 <UART_SetConfig+0x27e>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e00a      	b.n	80063b6 <UART_SetConfig+0x27e>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e006      	b.n	80063b6 <UART_SetConfig+0x27e>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e002      	b.n	80063b6 <UART_SetConfig+0x27e>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <UART_SetConfig+0x2e0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	f040 80a8 	bne.w	8006512 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d834      	bhi.n	8006434 <UART_SetConfig+0x2fc>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <UART_SetConfig+0x298>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	08006435 	.word	0x08006435
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006403 	.word	0x08006403
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f4:	f7fd fd8e 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 80063f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063fa:	e021      	b.n	8006440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <UART_SetConfig+0x2f8>)
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006400:	e01e      	b.n	8006440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd fd19 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006408:	e01a      	b.n	8006440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006410:	e016      	b.n	8006440 <UART_SetConfig+0x308>
 8006412:	bf00      	nop
 8006414:	cfff69f3 	.word	0xcfff69f3
 8006418:	40008000 	.word	0x40008000
 800641c:	40013800 	.word	0x40013800
 8006420:	40021000 	.word	0x40021000
 8006424:	40004400 	.word	0x40004400
 8006428:	40004800 	.word	0x40004800
 800642c:	40004c00 	.word	0x40004c00
 8006430:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800643e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 812a 	beq.w	800669c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	4a9e      	ldr	r2, [pc, #632]	; (80066c8 <UART_SetConfig+0x590>)
 800644e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006452:	461a      	mov	r2, r3
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	fbb3 f3f2 	udiv	r3, r3, r2
 800645a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d305      	bcc.n	8006478 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	429a      	cmp	r2, r3
 8006476:	d903      	bls.n	8006480 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800647e:	e10d      	b.n	800669c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	2200      	movs	r2, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	60fa      	str	r2, [r7, #12]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	4a8e      	ldr	r2, [pc, #568]	; (80066c8 <UART_SetConfig+0x590>)
 800648e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006492:	b29b      	uxth	r3, r3
 8006494:	2200      	movs	r2, #0
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a2:	f7fa fc19 	bl	8000cd8 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	020b      	lsls	r3, r1, #8
 80064b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064bc:	0202      	lsls	r2, r0, #8
 80064be:	6979      	ldr	r1, [r7, #20]
 80064c0:	6849      	ldr	r1, [r1, #4]
 80064c2:	0849      	lsrs	r1, r1, #1
 80064c4:	2000      	movs	r0, #0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4605      	mov	r5, r0
 80064ca:	eb12 0804 	adds.w	r8, r2, r4
 80064ce:	eb43 0905 	adc.w	r9, r3, r5
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	469a      	mov	sl, r3
 80064da:	4693      	mov	fp, r2
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fbf8 	bl	8000cd8 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f6:	d308      	bcc.n	800650a <UART_SetConfig+0x3d2>
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fe:	d204      	bcs.n	800650a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	e0c8      	b.n	800669c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006510:	e0c4      	b.n	800669c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651a:	d167      	bne.n	80065ec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800651c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006520:	2b08      	cmp	r3, #8
 8006522:	d828      	bhi.n	8006576 <UART_SetConfig+0x43e>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x3f4>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	08006577 	.word	0x08006577
 800653c:	08006567 	.word	0x08006567
 8006540:	08006577 	.word	0x08006577
 8006544:	08006577 	.word	0x08006577
 8006548:	08006577 	.word	0x08006577
 800654c:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fd fce0 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006556:	e014      	b.n	8006582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006558:	f7fd fcf2 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800655e:	e010      	b.n	8006582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b5a      	ldr	r3, [pc, #360]	; (80066cc <UART_SetConfig+0x594>)
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006564:	e00d      	b.n	8006582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd fc67 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800656c:	e009      	b.n	8006582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006574:	e005      	b.n	8006582 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8089 	beq.w	800669c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4a4e      	ldr	r2, [pc, #312]	; (80066c8 <UART_SetConfig+0x590>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	461a      	mov	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	fbb3 f3f2 	udiv	r3, r3, r2
 800659c:	005a      	lsls	r2, r3, #1
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	441a      	add	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d916      	bls.n	80065e4 <UART_SetConfig+0x4ac>
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065bc:	d212      	bcs.n	80065e4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f023 030f 	bic.w	r3, r3, #15
 80065c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	8bfa      	ldrh	r2, [r7, #30]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e05b      	b.n	800669c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065ea:	e057      	b.n	800669c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d828      	bhi.n	8006646 <UART_SetConfig+0x50e>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x4c4>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006629 	.word	0x08006629
 8006604:	08006631 	.word	0x08006631
 8006608:	08006647 	.word	0x08006647
 800660c:	08006637 	.word	0x08006637
 8006610:	08006647 	.word	0x08006647
 8006614:	08006647 	.word	0x08006647
 8006618:	08006647 	.word	0x08006647
 800661c:	0800663f 	.word	0x0800663f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fd fc78 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8006624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006626:	e014      	b.n	8006652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006628:	f7fd fc8a 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800662c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800662e:	e010      	b.n	8006652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006630:	4b26      	ldr	r3, [pc, #152]	; (80066cc <UART_SetConfig+0x594>)
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006634:	e00d      	b.n	8006652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006636:	f7fd fbff 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800663c:	e009      	b.n	8006652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006644:	e005      	b.n	8006652 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006650:	bf00      	nop
    }

    if (pclk != 0U)
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d021      	beq.n	800669c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <UART_SetConfig+0x590>)
 800665e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006662:	461a      	mov	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	fbb3 f2f2 	udiv	r2, r3, r2
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	441a      	add	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	d909      	bls.n	8006696 <UART_SetConfig+0x55e>
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d205      	bcs.n	8006696 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	b29a      	uxth	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e002      	b.n	800669c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2201      	movs	r2, #1
 80066a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2200      	movs	r2, #0
 80066b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3730      	adds	r7, #48	; 0x30
 80066c0:	46bd      	mov	sp, r7
 80066c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c6:	bf00      	nop
 80066c8:	0800cca4 	.word	0x0800cca4
 80066cc:	00f42400 	.word	0x00f42400

080066d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ce:	d10a      	bne.n	80067e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006824:	f7fb fdc4 	bl	80023b0 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d10e      	bne.n	8006856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f82f 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e025      	b.n	80068a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10e      	bne.n	8006882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f819 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00f      	b.n	80068a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b09c      	sub	sp, #112	; 0x70
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	e0a9      	b.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	f000 80a5 	beq.w	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fb fd73 	bl	80023b0 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
 80068d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d140      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f0:	667b      	str	r3, [r7, #100]	; 0x64
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006930:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e069      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d051      	beq.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d149      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800699a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d8:	623a      	str	r2, [r7, #32]
 80069da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e010      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f43f af46 	beq.w	80068bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3770      	adds	r7, #112	; 0x70
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b0a3      	sub	sp, #140	; 0x8c
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d10e      	bne.n	8006a8e <UART_Start_Receive_IT+0x52>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <UART_Start_Receive_IT+0x48>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a82:	e02d      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	22ff      	movs	r2, #255	; 0xff
 8006a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a8c:	e028      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <UART_Start_Receive_IT+0x76>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <UART_Start_Receive_IT+0x6c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006aa6:	e01b      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	227f      	movs	r2, #127	; 0x7f
 8006aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ab0:	e016      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aba:	d10d      	bne.n	8006ad8 <UART_Start_Receive_IT+0x9c>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <UART_Start_Receive_IT+0x92>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	227f      	movs	r2, #127	; 0x7f
 8006ac8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006acc:	e008      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	223f      	movs	r2, #63	; 0x3f
 8006ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ad6:	e003      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	; 0x22
 8006aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b14:	673a      	str	r2, [r7, #112]	; 0x70
 8006b16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006b1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e3      	bne.n	8006af0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b30:	d153      	bne.n	8006bda <UART_Start_Receive_IT+0x19e>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d34d      	bcc.n	8006bda <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d107      	bne.n	8006b58 <UART_Start_Receive_IT+0x11c>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a4b      	ldr	r2, [pc, #300]	; (8006c80 <UART_Start_Receive_IT+0x244>)
 8006b54:	671a      	str	r2, [r3, #112]	; 0x70
 8006b56:	e002      	b.n	8006b5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a4a      	ldr	r2, [pc, #296]	; (8006c84 <UART_Start_Receive_IT+0x248>)
 8006b5c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01a      	beq.n	8006ba4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b92:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e4      	bne.n	8006b6e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006bc4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e5      	bne.n	8006ba4 <UART_Start_Receive_IT+0x168>
 8006bd8:	e04a      	b.n	8006c70 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d107      	bne.n	8006bf4 <UART_Start_Receive_IT+0x1b8>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <UART_Start_Receive_IT+0x24c>)
 8006bf0:	671a      	str	r2, [r3, #112]	; 0x70
 8006bf2:	e002      	b.n	8006bfa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <UART_Start_Receive_IT+0x250>)
 8006bf8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d019      	beq.n	8006c3e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_Start_Receive_IT+0x1ce>
 8006c3c:	e018      	b.n	8006c70 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f043 0320 	orr.w	r3, r3, #32
 8006c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	378c      	adds	r7, #140	; 0x8c
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	08007551 	.word	0x08007551
 8006c84:	08007259 	.word	0x08007259
 8006c88:	080070f7 	.word	0x080070f7
 8006c8c:	08006f97 	.word	0x08006f97

08006c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b08f      	sub	sp, #60	; 0x3c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e6      	bne.n	8006c98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cea:	61ba      	str	r2, [r7, #24]
 8006cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006d06:	bf00      	nop
 8006d08:	373c      	adds	r7, #60	; 0x3c
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b095      	sub	sp, #84	; 0x54
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d38:	643b      	str	r3, [r7, #64]	; 0x40
 8006d3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e3      	bne.n	8006d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d118      	bne.n	8006dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f023 0310 	bic.w	r3, r3, #16
 8006da0:	647b      	str	r3, [r7, #68]	; 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6979      	ldr	r1, [r7, #20]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	613b      	str	r3, [r7, #16]
   return(result);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006dd2:	bf00      	nop
 8006dd4:	3754      	adds	r7, #84	; 0x54
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b090      	sub	sp, #64	; 0x40
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d137      	bne.n	8006e6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	623b      	str	r3, [r7, #32]
   return(result);
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e22:	633a      	str	r2, [r7, #48]	; 0x30
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e5      	bne.n	8006e02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	69b9      	ldr	r1, [r7, #24]
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	617b      	str	r3, [r7, #20]
   return(result);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e68:	e002      	b.n	8006e70 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e6c:	f7fa fa38 	bl	80012e0 <HAL_UART_TxCpltCallback>
}
 8006e70:	bf00      	nop
 8006e72:	3740      	adds	r7, #64	; 0x40
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff f936 	bl	80060f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d109      	bne.n	8006ed4 <UART_DMAError+0x40>
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b21      	cmp	r3, #33	; 0x21
 8006ec4:	d106      	bne.n	8006ed4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	f7ff fede 	bl	8006c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d109      	bne.n	8006ef6 <UART_DMAError+0x62>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b22      	cmp	r3, #34	; 0x22
 8006ee6:	d106      	bne.n	8006ef6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7ff ff0e 	bl	8006d12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efc:	f043 0210 	orr.w	r2, r3, #16
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	f7ff f900 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff f8ea 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6979      	ldr	r1, [r7, #20]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fa f9a9 	bl	80012e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f8e:	bf00      	nop
 8006f90:	3720      	adds	r7, #32
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b096      	sub	sp, #88	; 0x58
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fae:	2b22      	cmp	r3, #34	; 0x22
 8006fb0:	f040 8095 	bne.w	80070de <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006fc2:	b2d9      	uxtb	r1, r3
 8006fc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fce:	400a      	ands	r2, r1
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d178      	bne.n	80070ee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007010:	653b      	str	r3, [r7, #80]	; 0x50
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e6      	bne.n	8006ffc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	623b      	str	r3, [r7, #32]
   return(result);
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800704e:	633a      	str	r2, [r7, #48]	; 0x30
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d12e      	bne.n	80070d6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	60fb      	str	r3, [r7, #12]
   return(result);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0310 	bic.w	r3, r3, #16
 8007092:	64bb      	str	r3, [r7, #72]	; 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	69b9      	ldr	r1, [r7, #24]
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	617b      	str	r3, [r7, #20]
   return(result);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e6      	bne.n	800707e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d103      	bne.n	80070c6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2210      	movs	r2, #16
 80070c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff f826 	bl	8006120 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d4:	e00b      	b.n	80070ee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa fb42 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 80070dc:	e007      	b.n	80070ee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0208 	orr.w	r2, r2, #8
 80070ec:	619a      	str	r2, [r3, #24]
}
 80070ee:	bf00      	nop
 80070f0:	3758      	adds	r7, #88	; 0x58
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b096      	sub	sp, #88	; 0x58
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	2b22      	cmp	r3, #34	; 0x22
 8007110:	f040 8095 	bne.w	800723e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007124:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007128:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800712c:	4013      	ands	r3, r2
 800712e:	b29a      	uxth	r2, r3
 8007130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007132:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	1c9a      	adds	r2, r3, #2
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d178      	bne.n	800724e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
 800717c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	61fb      	str	r3, [r7, #28]
   return(result);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12e      	bne.n	8007236 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	647b      	str	r3, [r7, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d103      	bne.n	8007226 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2210      	movs	r2, #16
 8007224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe ff76 	bl	8006120 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007234:	e00b      	b.n	800724e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa fa92 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 800723c:	e007      	b.n	800724e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0208 	orr.w	r2, r2, #8
 800724c:	619a      	str	r2, [r3, #24]
}
 800724e:	bf00      	nop
 8007250:	3758      	adds	r7, #88	; 0x58
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0a6      	sub	sp, #152	; 0x98
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007266:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	f040 814f 	bne.w	8007532 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800729a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800729e:	e0f6      	b.n	800748e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80072ae:	b2d9      	uxtb	r1, r3
 80072b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	400a      	ands	r2, r1
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d053      	beq.n	800739a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d011      	beq.n	8007322 <UART_RxISR_8BIT_FIFOEN+0xca>
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007318:	f043 0201 	orr.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d011      	beq.n	8007352 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800732e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00b      	beq.n	8007352 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2202      	movs	r2, #2
 8007340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d011      	beq.n	8007382 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800735e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2204      	movs	r2, #4
 8007370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	f043 0202 	orr.w	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fe febd 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d173      	bne.n	800748e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80073ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80073d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e4      	bne.n	80073a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007400:	657a      	str	r2, [r7, #84]	; 0x54
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e3      	bne.n	80073dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d12e      	bne.n	8007488 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f023 0310 	bic.w	r3, r3, #16
 8007444:	67bb      	str	r3, [r7, #120]	; 0x78
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
 8007450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e6      	bne.n	8007430 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b10      	cmp	r3, #16
 800746e:	d103      	bne.n	8007478 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2210      	movs	r2, #16
 8007476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fe fe4d 	bl	8006120 <HAL_UARTEx_RxEventCallback>
 8007486:	e002      	b.n	800748e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fa f969 	bl	8001760 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800748e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007492:	2b00      	cmp	r3, #0
 8007494:	d006      	beq.n	80074a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007496:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f47f aefe 	bne.w	80072a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d045      	beq.n	8007542 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d23e      	bcs.n	8007542 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074da:	673b      	str	r3, [r7, #112]	; 0x70
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a14      	ldr	r2, [pc, #80]	; (800754c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80074fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60bb      	str	r3, [r7, #8]
   return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f043 0320 	orr.w	r3, r3, #32
 8007512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	613b      	str	r3, [r7, #16]
   return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007530:	e007      	b.n	8007542 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0208 	orr.w	r2, r2, #8
 8007540:	619a      	str	r2, [r3, #24]
}
 8007542:	bf00      	nop
 8007544:	3798      	adds	r7, #152	; 0x98
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	08006f97 	.word	0x08006f97

08007550 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b0a8      	sub	sp, #160	; 0xa0
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800755e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	2b22      	cmp	r3, #34	; 0x22
 8007588:	f040 8153 	bne.w	8007832 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007592:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007596:	e0fa      	b.n	800778e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80075aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80075ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80075b2:	4013      	ands	r3, r2
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	1c9a      	adds	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d053      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d011      	beq.n	800761e <UART_RxISR_16BIT_FIFOEN+0xce>
 80075fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2201      	movs	r2, #1
 800760c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007614:	f043 0201 	orr.w	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d011      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800762a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2202      	movs	r2, #2
 800763c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007644:	f043 0204 	orr.w	r2, r3, #4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800764e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d011      	beq.n	800767e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800765a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2204      	movs	r2, #4
 800766c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	f043 0202 	orr.w	r2, r3, #2
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fe fd3f 	bl	800610c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d175      	bne.n	800778e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e4      	bne.n	80076a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ee:	f023 0301 	bic.w	r3, r3, #1
 80076f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007700:	65ba      	str	r2, [r7, #88]	; 0x58
 8007702:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800770e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e1      	bne.n	80076d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d12e      	bne.n	8007788 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007740:	f023 0310 	bic.w	r3, r3, #16
 8007744:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e6      	bne.n	8007730 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b10      	cmp	r3, #16
 800776e:	d103      	bne.n	8007778 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2210      	movs	r2, #16
 8007776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fe fccd 	bl	8006120 <HAL_UARTEx_RxEventCallback>
 8007786:	e002      	b.n	800778e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7f9 ffe9 	bl	8001760 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800778e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f47f aefa 	bne.w	8007598 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d045      	beq.n	8007842 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d23e      	bcs.n	8007842 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	623b      	str	r3, [r7, #32]
   return(result);
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077da:	677b      	str	r3, [r7, #116]	; 0x74
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077e4:	633a      	str	r2, [r7, #48]	; 0x30
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e5      	bne.n	80077c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a14      	ldr	r2, [pc, #80]	; (800784c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80077fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f043 0320 	orr.w	r3, r3, #32
 8007812:	673b      	str	r3, [r7, #112]	; 0x70
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	617b      	str	r3, [r7, #20]
   return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007830:	e007      	b.n	8007842 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0208 	orr.w	r2, r2, #8
 8007840:	619a      	str	r2, [r3, #24]
}
 8007842:	bf00      	nop
 8007844:	37a0      	adds	r7, #160	; 0xa0
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	080070f7 	.word	0x080070f7

08007850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800789e:	2302      	movs	r3, #2
 80078a0:	e027      	b.n	80078f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2224      	movs	r2, #36	; 0x24
 80078ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007912:	2302      	movs	r3, #2
 8007914:	e02d      	b.n	8007972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2224      	movs	r2, #36	; 0x24
 8007922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f850 	bl	80079f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800798e:	2302      	movs	r3, #2
 8007990:	e02d      	b.n	80079ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	; 0x24
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f812 	bl	80079f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d108      	bne.n	8007a1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a18:	e031      	b.n	8007a7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a1e:	2308      	movs	r3, #8
 8007a20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	0e5b      	lsrs	r3, r3, #25
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	0f5b      	lsrs	r3, r3, #29
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	7b3a      	ldrb	r2, [r7, #12]
 8007a46:	4911      	ldr	r1, [pc, #68]	; (8007a8c <UARTEx_SetNbDataToProcess+0x94>)
 8007a48:	5c8a      	ldrb	r2, [r1, r2]
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a4e:	7b3a      	ldrb	r2, [r7, #12]
 8007a50:	490f      	ldr	r1, [pc, #60]	; (8007a90 <UARTEx_SetNbDataToProcess+0x98>)
 8007a52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	7b7a      	ldrb	r2, [r7, #13]
 8007a64:	4909      	ldr	r1, [pc, #36]	; (8007a8c <UARTEx_SetNbDataToProcess+0x94>)
 8007a66:	5c8a      	ldrb	r2, [r1, r2]
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a6c:	7b7a      	ldrb	r2, [r7, #13]
 8007a6e:	4908      	ldr	r1, [pc, #32]	; (8007a90 <UARTEx_SetNbDataToProcess+0x98>)
 8007a70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a72:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	0800ccbc 	.word	0x0800ccbc
 8007a90:	0800ccc4 	.word	0x0800ccc4

08007a94 <__errno>:
 8007a94:	4b01      	ldr	r3, [pc, #4]	; (8007a9c <__errno+0x8>)
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000010 	.word	0x20000010

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	; (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	; (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	; (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	; (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f005 f8c6 	bl	800cc44 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	0800d18c 	.word	0x0800d18c
 8007adc:	0800d18c 	.word	0x0800d18c
 8007ae0:	0800d18c 	.word	0x0800d18c
 8007ae4:	0800d190 	.word	0x0800d190

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <__cvt>:
 8007b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	ec55 4b10 	vmov	r4, r5, d0
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	460e      	mov	r6, r1
 8007b20:	4619      	mov	r1, r3
 8007b22:	462b      	mov	r3, r5
 8007b24:	bfbb      	ittet	lt
 8007b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b2a:	461d      	movlt	r5, r3
 8007b2c:	2300      	movge	r3, #0
 8007b2e:	232d      	movlt	r3, #45	; 0x2d
 8007b30:	700b      	strb	r3, [r1, #0]
 8007b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b38:	4691      	mov	r9, r2
 8007b3a:	f023 0820 	bic.w	r8, r3, #32
 8007b3e:	bfbc      	itt	lt
 8007b40:	4622      	movlt	r2, r4
 8007b42:	4614      	movlt	r4, r2
 8007b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b48:	d005      	beq.n	8007b56 <__cvt+0x42>
 8007b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b4e:	d100      	bne.n	8007b52 <__cvt+0x3e>
 8007b50:	3601      	adds	r6, #1
 8007b52:	2102      	movs	r1, #2
 8007b54:	e000      	b.n	8007b58 <__cvt+0x44>
 8007b56:	2103      	movs	r1, #3
 8007b58:	ab03      	add	r3, sp, #12
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	ab02      	add	r3, sp, #8
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	ec45 4b10 	vmov	d0, r4, r5
 8007b64:	4653      	mov	r3, sl
 8007b66:	4632      	mov	r2, r6
 8007b68:	f001 fe42 	bl	80097f0 <_dtoa_r>
 8007b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b70:	4607      	mov	r7, r0
 8007b72:	d102      	bne.n	8007b7a <__cvt+0x66>
 8007b74:	f019 0f01 	tst.w	r9, #1
 8007b78:	d022      	beq.n	8007bc0 <__cvt+0xac>
 8007b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b7e:	eb07 0906 	add.w	r9, r7, r6
 8007b82:	d110      	bne.n	8007ba6 <__cvt+0x92>
 8007b84:	783b      	ldrb	r3, [r7, #0]
 8007b86:	2b30      	cmp	r3, #48	; 0x30
 8007b88:	d10a      	bne.n	8007ba0 <__cvt+0x8c>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4620      	mov	r0, r4
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7f8 ffc1 	bl	8000b18 <__aeabi_dcmpeq>
 8007b96:	b918      	cbnz	r0, 8007ba0 <__cvt+0x8c>
 8007b98:	f1c6 0601 	rsb	r6, r6, #1
 8007b9c:	f8ca 6000 	str.w	r6, [sl]
 8007ba0:	f8da 3000 	ldr.w	r3, [sl]
 8007ba4:	4499      	add	r9, r3
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f8 ffb3 	bl	8000b18 <__aeabi_dcmpeq>
 8007bb2:	b108      	cbz	r0, 8007bb8 <__cvt+0xa4>
 8007bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bb8:	2230      	movs	r2, #48	; 0x30
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	454b      	cmp	r3, r9
 8007bbe:	d307      	bcc.n	8007bd0 <__cvt+0xbc>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bc4:	1bdb      	subs	r3, r3, r7
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	b004      	add	sp, #16
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	1c59      	adds	r1, r3, #1
 8007bd2:	9103      	str	r1, [sp, #12]
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e7f0      	b.n	8007bba <__cvt+0xa6>

08007bd8 <__exponent>:
 8007bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	bfb8      	it	lt
 8007be0:	4249      	neglt	r1, r1
 8007be2:	f803 2b02 	strb.w	r2, [r3], #2
 8007be6:	bfb4      	ite	lt
 8007be8:	222d      	movlt	r2, #45	; 0x2d
 8007bea:	222b      	movge	r2, #43	; 0x2b
 8007bec:	2909      	cmp	r1, #9
 8007bee:	7042      	strb	r2, [r0, #1]
 8007bf0:	dd2a      	ble.n	8007c48 <__exponent+0x70>
 8007bf2:	f10d 0407 	add.w	r4, sp, #7
 8007bf6:	46a4      	mov	ip, r4
 8007bf8:	270a      	movs	r7, #10
 8007bfa:	46a6      	mov	lr, r4
 8007bfc:	460a      	mov	r2, r1
 8007bfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c02:	fb07 1516 	mls	r5, r7, r6, r1
 8007c06:	3530      	adds	r5, #48	; 0x30
 8007c08:	2a63      	cmp	r2, #99	; 0x63
 8007c0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c12:	4631      	mov	r1, r6
 8007c14:	dcf1      	bgt.n	8007bfa <__exponent+0x22>
 8007c16:	3130      	adds	r1, #48	; 0x30
 8007c18:	f1ae 0502 	sub.w	r5, lr, #2
 8007c1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c20:	1c44      	adds	r4, r0, #1
 8007c22:	4629      	mov	r1, r5
 8007c24:	4561      	cmp	r1, ip
 8007c26:	d30a      	bcc.n	8007c3e <__exponent+0x66>
 8007c28:	f10d 0209 	add.w	r2, sp, #9
 8007c2c:	eba2 020e 	sub.w	r2, r2, lr
 8007c30:	4565      	cmp	r5, ip
 8007c32:	bf88      	it	hi
 8007c34:	2200      	movhi	r2, #0
 8007c36:	4413      	add	r3, r2
 8007c38:	1a18      	subs	r0, r3, r0
 8007c3a:	b003      	add	sp, #12
 8007c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c46:	e7ed      	b.n	8007c24 <__exponent+0x4c>
 8007c48:	2330      	movs	r3, #48	; 0x30
 8007c4a:	3130      	adds	r1, #48	; 0x30
 8007c4c:	7083      	strb	r3, [r0, #2]
 8007c4e:	70c1      	strb	r1, [r0, #3]
 8007c50:	1d03      	adds	r3, r0, #4
 8007c52:	e7f1      	b.n	8007c38 <__exponent+0x60>

08007c54 <_printf_float>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	ed2d 8b02 	vpush	{d8}
 8007c5c:	b08d      	sub	sp, #52	; 0x34
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c64:	4616      	mov	r6, r2
 8007c66:	461f      	mov	r7, r3
 8007c68:	4605      	mov	r5, r0
 8007c6a:	f002 ff1f 	bl	800aaac <_localeconv_r>
 8007c6e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c72:	4650      	mov	r0, sl
 8007c74:	f7f8 fad4 	bl	8000220 <strlen>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	9305      	str	r3, [sp, #20]
 8007c80:	f8d8 3000 	ldr.w	r3, [r8]
 8007c84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c88:	3307      	adds	r3, #7
 8007c8a:	f023 0307 	bic.w	r3, r3, #7
 8007c8e:	f103 0208 	add.w	r2, r3, #8
 8007c92:	f8c8 2000 	str.w	r2, [r8]
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cac:	ee08 0a10 	vmov	s16, r0
 8007cb0:	4b9f      	ldr	r3, [pc, #636]	; (8007f30 <_printf_float+0x2dc>)
 8007cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cba:	f7f8 ff5f 	bl	8000b7c <__aeabi_dcmpun>
 8007cbe:	bb88      	cbnz	r0, 8007d24 <_printf_float+0xd0>
 8007cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cc4:	4b9a      	ldr	r3, [pc, #616]	; (8007f30 <_printf_float+0x2dc>)
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	f7f8 ff39 	bl	8000b40 <__aeabi_dcmple>
 8007cce:	bb48      	cbnz	r0, 8007d24 <_printf_float+0xd0>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	f7f8 ff28 	bl	8000b2c <__aeabi_dcmplt>
 8007cdc:	b110      	cbz	r0, 8007ce4 <_printf_float+0x90>
 8007cde:	232d      	movs	r3, #45	; 0x2d
 8007ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce4:	4b93      	ldr	r3, [pc, #588]	; (8007f34 <_printf_float+0x2e0>)
 8007ce6:	4894      	ldr	r0, [pc, #592]	; (8007f38 <_printf_float+0x2e4>)
 8007ce8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cec:	bf94      	ite	ls
 8007cee:	4698      	movls	r8, r3
 8007cf0:	4680      	movhi	r8, r0
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	9b05      	ldr	r3, [sp, #20]
 8007cf8:	f023 0204 	bic.w	r2, r3, #4
 8007cfc:	6022      	str	r2, [r4, #0]
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	9700      	str	r7, [sp, #0]
 8007d04:	4633      	mov	r3, r6
 8007d06:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f9d8 	bl	80080c0 <_printf_common>
 8007d10:	3001      	adds	r0, #1
 8007d12:	f040 8090 	bne.w	8007e36 <_printf_float+0x1e2>
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	b00d      	add	sp, #52	; 0x34
 8007d1c:	ecbd 8b02 	vpop	{d8}
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	4642      	mov	r2, r8
 8007d26:	464b      	mov	r3, r9
 8007d28:	4640      	mov	r0, r8
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	f7f8 ff26 	bl	8000b7c <__aeabi_dcmpun>
 8007d30:	b140      	cbz	r0, 8007d44 <_printf_float+0xf0>
 8007d32:	464b      	mov	r3, r9
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbc      	itt	lt
 8007d38:	232d      	movlt	r3, #45	; 0x2d
 8007d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d3e:	487f      	ldr	r0, [pc, #508]	; (8007f3c <_printf_float+0x2e8>)
 8007d40:	4b7f      	ldr	r3, [pc, #508]	; (8007f40 <_printf_float+0x2ec>)
 8007d42:	e7d1      	b.n	8007ce8 <_printf_float+0x94>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d4a:	9206      	str	r2, [sp, #24]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	d13f      	bne.n	8007dd0 <_printf_float+0x17c>
 8007d50:	2306      	movs	r3, #6
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	9b05      	ldr	r3, [sp, #20]
 8007d56:	6861      	ldr	r1, [r4, #4]
 8007d58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	ab0a      	add	r3, sp, #40	; 0x28
 8007d62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d66:	ab09      	add	r3, sp, #36	; 0x24
 8007d68:	ec49 8b10 	vmov	d0, r8, r9
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d74:	4628      	mov	r0, r5
 8007d76:	f7ff fecd 	bl	8007b14 <__cvt>
 8007d7a:	9b06      	ldr	r3, [sp, #24]
 8007d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d7e:	2b47      	cmp	r3, #71	; 0x47
 8007d80:	4680      	mov	r8, r0
 8007d82:	d108      	bne.n	8007d96 <_printf_float+0x142>
 8007d84:	1cc8      	adds	r0, r1, #3
 8007d86:	db02      	blt.n	8007d8e <_printf_float+0x13a>
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	dd41      	ble.n	8007e12 <_printf_float+0x1be>
 8007d8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d92:	fa5f fb8b 	uxtb.w	fp, fp
 8007d96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d9a:	d820      	bhi.n	8007dde <_printf_float+0x18a>
 8007d9c:	3901      	subs	r1, #1
 8007d9e:	465a      	mov	r2, fp
 8007da0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007da4:	9109      	str	r1, [sp, #36]	; 0x24
 8007da6:	f7ff ff17 	bl	8007bd8 <__exponent>
 8007daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dac:	1813      	adds	r3, r2, r0
 8007dae:	2a01      	cmp	r2, #1
 8007db0:	4681      	mov	r9, r0
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	dc02      	bgt.n	8007dbc <_printf_float+0x168>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	07d2      	lsls	r2, r2, #31
 8007dba:	d501      	bpl.n	8007dc0 <_printf_float+0x16c>
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d09c      	beq.n	8007d02 <_printf_float+0xae>
 8007dc8:	232d      	movs	r3, #45	; 0x2d
 8007dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dce:	e798      	b.n	8007d02 <_printf_float+0xae>
 8007dd0:	9a06      	ldr	r2, [sp, #24]
 8007dd2:	2a47      	cmp	r2, #71	; 0x47
 8007dd4:	d1be      	bne.n	8007d54 <_printf_float+0x100>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1bc      	bne.n	8007d54 <_printf_float+0x100>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7b9      	b.n	8007d52 <_printf_float+0xfe>
 8007dde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007de2:	d118      	bne.n	8007e16 <_printf_float+0x1c2>
 8007de4:	2900      	cmp	r1, #0
 8007de6:	6863      	ldr	r3, [r4, #4]
 8007de8:	dd0b      	ble.n	8007e02 <_printf_float+0x1ae>
 8007dea:	6121      	str	r1, [r4, #16]
 8007dec:	b913      	cbnz	r3, 8007df4 <_printf_float+0x1a0>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	07d0      	lsls	r0, r2, #31
 8007df2:	d502      	bpl.n	8007dfa <_printf_float+0x1a6>
 8007df4:	3301      	adds	r3, #1
 8007df6:	440b      	add	r3, r1
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dfc:	f04f 0900 	mov.w	r9, #0
 8007e00:	e7de      	b.n	8007dc0 <_printf_float+0x16c>
 8007e02:	b913      	cbnz	r3, 8007e0a <_printf_float+0x1b6>
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	07d2      	lsls	r2, r2, #31
 8007e08:	d501      	bpl.n	8007e0e <_printf_float+0x1ba>
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	e7f4      	b.n	8007df8 <_printf_float+0x1a4>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e7f2      	b.n	8007df8 <_printf_float+0x1a4>
 8007e12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	db05      	blt.n	8007e28 <_printf_float+0x1d4>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	6121      	str	r1, [r4, #16]
 8007e20:	07d8      	lsls	r0, r3, #31
 8007e22:	d5ea      	bpl.n	8007dfa <_printf_float+0x1a6>
 8007e24:	1c4b      	adds	r3, r1, #1
 8007e26:	e7e7      	b.n	8007df8 <_printf_float+0x1a4>
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	bfd4      	ite	le
 8007e2c:	f1c1 0202 	rsble	r2, r1, #2
 8007e30:	2201      	movgt	r2, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	e7e0      	b.n	8007df8 <_printf_float+0x1a4>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	055a      	lsls	r2, r3, #21
 8007e3a:	d407      	bmi.n	8007e4c <_printf_float+0x1f8>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	4642      	mov	r2, r8
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	d12c      	bne.n	8007ea4 <_printf_float+0x250>
 8007e4a:	e764      	b.n	8007d16 <_printf_float+0xc2>
 8007e4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e50:	f240 80e0 	bls.w	8008014 <_printf_float+0x3c0>
 8007e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f7f8 fe5c 	bl	8000b18 <__aeabi_dcmpeq>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d034      	beq.n	8007ece <_printf_float+0x27a>
 8007e64:	4a37      	ldr	r2, [pc, #220]	; (8007f44 <_printf_float+0x2f0>)
 8007e66:	2301      	movs	r3, #1
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f43f af51 	beq.w	8007d16 <_printf_float+0xc2>
 8007e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	db02      	blt.n	8007e82 <_printf_float+0x22e>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	07d8      	lsls	r0, r3, #31
 8007e80:	d510      	bpl.n	8007ea4 <_printf_float+0x250>
 8007e82:	ee18 3a10 	vmov	r3, s16
 8007e86:	4652      	mov	r2, sl
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af41 	beq.w	8007d16 <_printf_float+0xc2>
 8007e94:	f04f 0800 	mov.w	r8, #0
 8007e98:	f104 091a 	add.w	r9, r4, #26
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	dc09      	bgt.n	8007eb8 <_printf_float+0x264>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	079b      	lsls	r3, r3, #30
 8007ea8:	f100 8105 	bmi.w	80080b6 <_printf_float+0x462>
 8007eac:	68e0      	ldr	r0, [r4, #12]
 8007eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb0:	4298      	cmp	r0, r3
 8007eb2:	bfb8      	it	lt
 8007eb4:	4618      	movlt	r0, r3
 8007eb6:	e730      	b.n	8007d1a <_printf_float+0xc6>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	464a      	mov	r2, r9
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b8      	blx	r7
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f43f af27 	beq.w	8007d16 <_printf_float+0xc2>
 8007ec8:	f108 0801 	add.w	r8, r8, #1
 8007ecc:	e7e6      	b.n	8007e9c <_printf_float+0x248>
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dc39      	bgt.n	8007f48 <_printf_float+0x2f4>
 8007ed4:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <_printf_float+0x2f0>)
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	47b8      	blx	r7
 8007ede:	3001      	adds	r0, #1
 8007ee0:	f43f af19 	beq.w	8007d16 <_printf_float+0xc2>
 8007ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	d102      	bne.n	8007ef2 <_printf_float+0x29e>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	07d9      	lsls	r1, r3, #31
 8007ef0:	d5d8      	bpl.n	8007ea4 <_printf_float+0x250>
 8007ef2:	ee18 3a10 	vmov	r3, s16
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f af09 	beq.w	8007d16 <_printf_float+0xc2>
 8007f04:	f04f 0900 	mov.w	r9, #0
 8007f08:	f104 0a1a 	add.w	sl, r4, #26
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	425b      	negs	r3, r3
 8007f10:	454b      	cmp	r3, r9
 8007f12:	dc01      	bgt.n	8007f18 <_printf_float+0x2c4>
 8007f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f16:	e792      	b.n	8007e3e <_printf_float+0x1ea>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4652      	mov	r2, sl
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f aef7 	beq.w	8007d16 <_printf_float+0xc2>
 8007f28:	f109 0901 	add.w	r9, r9, #1
 8007f2c:	e7ee      	b.n	8007f0c <_printf_float+0x2b8>
 8007f2e:	bf00      	nop
 8007f30:	7fefffff 	.word	0x7fefffff
 8007f34:	0800ccd0 	.word	0x0800ccd0
 8007f38:	0800ccd4 	.word	0x0800ccd4
 8007f3c:	0800ccdc 	.word	0x0800ccdc
 8007f40:	0800ccd8 	.word	0x0800ccd8
 8007f44:	0800d0d1 	.word	0x0800d0d1
 8007f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	bfa8      	it	ge
 8007f50:	461a      	movge	r2, r3
 8007f52:	2a00      	cmp	r2, #0
 8007f54:	4691      	mov	r9, r2
 8007f56:	dc37      	bgt.n	8007fc8 <_printf_float+0x374>
 8007f58:	f04f 0b00 	mov.w	fp, #0
 8007f5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f60:	f104 021a 	add.w	r2, r4, #26
 8007f64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f66:	9305      	str	r3, [sp, #20]
 8007f68:	eba3 0309 	sub.w	r3, r3, r9
 8007f6c:	455b      	cmp	r3, fp
 8007f6e:	dc33      	bgt.n	8007fd8 <_printf_float+0x384>
 8007f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f74:	429a      	cmp	r2, r3
 8007f76:	db3b      	blt.n	8007ff0 <_printf_float+0x39c>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	07da      	lsls	r2, r3, #31
 8007f7c:	d438      	bmi.n	8007ff0 <_printf_float+0x39c>
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	9a05      	ldr	r2, [sp, #20]
 8007f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f84:	1a9a      	subs	r2, r3, r2
 8007f86:	eba3 0901 	sub.w	r9, r3, r1
 8007f8a:	4591      	cmp	r9, r2
 8007f8c:	bfa8      	it	ge
 8007f8e:	4691      	movge	r9, r2
 8007f90:	f1b9 0f00 	cmp.w	r9, #0
 8007f94:	dc35      	bgt.n	8008002 <_printf_float+0x3ae>
 8007f96:	f04f 0800 	mov.w	r8, #0
 8007f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f9e:	f104 0a1a 	add.w	sl, r4, #26
 8007fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	eba3 0309 	sub.w	r3, r3, r9
 8007fac:	4543      	cmp	r3, r8
 8007fae:	f77f af79 	ble.w	8007ea4 <_printf_float+0x250>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4628      	mov	r0, r5
 8007fba:	47b8      	blx	r7
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f43f aeaa 	beq.w	8007d16 <_printf_float+0xc2>
 8007fc2:	f108 0801 	add.w	r8, r8, #1
 8007fc6:	e7ec      	b.n	8007fa2 <_printf_float+0x34e>
 8007fc8:	4613      	mov	r3, r2
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4642      	mov	r2, r8
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d1c0      	bne.n	8007f58 <_printf_float+0x304>
 8007fd6:	e69e      	b.n	8007d16 <_printf_float+0xc2>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	9205      	str	r2, [sp, #20]
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f43f ae97 	beq.w	8007d16 <_printf_float+0xc2>
 8007fe8:	9a05      	ldr	r2, [sp, #20]
 8007fea:	f10b 0b01 	add.w	fp, fp, #1
 8007fee:	e7b9      	b.n	8007f64 <_printf_float+0x310>
 8007ff0:	ee18 3a10 	vmov	r3, s16
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d1be      	bne.n	8007f7e <_printf_float+0x32a>
 8008000:	e689      	b.n	8007d16 <_printf_float+0xc2>
 8008002:	9a05      	ldr	r2, [sp, #20]
 8008004:	464b      	mov	r3, r9
 8008006:	4442      	add	r2, r8
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	d1c1      	bne.n	8007f96 <_printf_float+0x342>
 8008012:	e680      	b.n	8007d16 <_printf_float+0xc2>
 8008014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008016:	2a01      	cmp	r2, #1
 8008018:	dc01      	bgt.n	800801e <_printf_float+0x3ca>
 800801a:	07db      	lsls	r3, r3, #31
 800801c:	d538      	bpl.n	8008090 <_printf_float+0x43c>
 800801e:	2301      	movs	r3, #1
 8008020:	4642      	mov	r2, r8
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f ae74 	beq.w	8007d16 <_printf_float+0xc2>
 800802e:	ee18 3a10 	vmov	r3, s16
 8008032:	4652      	mov	r2, sl
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f ae6b 	beq.w	8007d16 <_printf_float+0xc2>
 8008040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008044:	2200      	movs	r2, #0
 8008046:	2300      	movs	r3, #0
 8008048:	f7f8 fd66 	bl	8000b18 <__aeabi_dcmpeq>
 800804c:	b9d8      	cbnz	r0, 8008086 <_printf_float+0x432>
 800804e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008050:	f108 0201 	add.w	r2, r8, #1
 8008054:	3b01      	subs	r3, #1
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	d10e      	bne.n	800807e <_printf_float+0x42a>
 8008060:	e659      	b.n	8007d16 <_printf_float+0xc2>
 8008062:	2301      	movs	r3, #1
 8008064:	4652      	mov	r2, sl
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae52 	beq.w	8007d16 <_printf_float+0xc2>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008078:	3b01      	subs	r3, #1
 800807a:	4543      	cmp	r3, r8
 800807c:	dcf1      	bgt.n	8008062 <_printf_float+0x40e>
 800807e:	464b      	mov	r3, r9
 8008080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008084:	e6dc      	b.n	8007e40 <_printf_float+0x1ec>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	f104 0a1a 	add.w	sl, r4, #26
 800808e:	e7f2      	b.n	8008076 <_printf_float+0x422>
 8008090:	2301      	movs	r3, #1
 8008092:	4642      	mov	r2, r8
 8008094:	e7df      	b.n	8008056 <_printf_float+0x402>
 8008096:	2301      	movs	r3, #1
 8008098:	464a      	mov	r2, r9
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f ae38 	beq.w	8007d16 <_printf_float+0xc2>
 80080a6:	f108 0801 	add.w	r8, r8, #1
 80080aa:	68e3      	ldr	r3, [r4, #12]
 80080ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ae:	1a5b      	subs	r3, r3, r1
 80080b0:	4543      	cmp	r3, r8
 80080b2:	dcf0      	bgt.n	8008096 <_printf_float+0x442>
 80080b4:	e6fa      	b.n	8007eac <_printf_float+0x258>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	f104 0919 	add.w	r9, r4, #25
 80080be:	e7f4      	b.n	80080aa <_printf_float+0x456>

080080c0 <_printf_common>:
 80080c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	4616      	mov	r6, r2
 80080c6:	4699      	mov	r9, r3
 80080c8:	688a      	ldr	r2, [r1, #8]
 80080ca:	690b      	ldr	r3, [r1, #16]
 80080cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	bfb8      	it	lt
 80080d4:	4613      	movlt	r3, r2
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080dc:	4607      	mov	r7, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	b10a      	cbz	r2, 80080e6 <_printf_common+0x26>
 80080e2:	3301      	adds	r3, #1
 80080e4:	6033      	str	r3, [r6, #0]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	0699      	lsls	r1, r3, #26
 80080ea:	bf42      	ittt	mi
 80080ec:	6833      	ldrmi	r3, [r6, #0]
 80080ee:	3302      	addmi	r3, #2
 80080f0:	6033      	strmi	r3, [r6, #0]
 80080f2:	6825      	ldr	r5, [r4, #0]
 80080f4:	f015 0506 	ands.w	r5, r5, #6
 80080f8:	d106      	bne.n	8008108 <_printf_common+0x48>
 80080fa:	f104 0a19 	add.w	sl, r4, #25
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	6832      	ldr	r2, [r6, #0]
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	42ab      	cmp	r3, r5
 8008106:	dc26      	bgt.n	8008156 <_printf_common+0x96>
 8008108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800810c:	1e13      	subs	r3, r2, #0
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	bf18      	it	ne
 8008112:	2301      	movne	r3, #1
 8008114:	0692      	lsls	r2, r2, #26
 8008116:	d42b      	bmi.n	8008170 <_printf_common+0xb0>
 8008118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800811c:	4649      	mov	r1, r9
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	3001      	adds	r0, #1
 8008124:	d01e      	beq.n	8008164 <_printf_common+0xa4>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	68e5      	ldr	r5, [r4, #12]
 800812a:	6832      	ldr	r2, [r6, #0]
 800812c:	f003 0306 	and.w	r3, r3, #6
 8008130:	2b04      	cmp	r3, #4
 8008132:	bf08      	it	eq
 8008134:	1aad      	subeq	r5, r5, r2
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	bf0c      	ite	eq
 800813c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008140:	2500      	movne	r5, #0
 8008142:	4293      	cmp	r3, r2
 8008144:	bfc4      	itt	gt
 8008146:	1a9b      	subgt	r3, r3, r2
 8008148:	18ed      	addgt	r5, r5, r3
 800814a:	2600      	movs	r6, #0
 800814c:	341a      	adds	r4, #26
 800814e:	42b5      	cmp	r5, r6
 8008150:	d11a      	bne.n	8008188 <_printf_common+0xc8>
 8008152:	2000      	movs	r0, #0
 8008154:	e008      	b.n	8008168 <_printf_common+0xa8>
 8008156:	2301      	movs	r3, #1
 8008158:	4652      	mov	r2, sl
 800815a:	4649      	mov	r1, r9
 800815c:	4638      	mov	r0, r7
 800815e:	47c0      	blx	r8
 8008160:	3001      	adds	r0, #1
 8008162:	d103      	bne.n	800816c <_printf_common+0xac>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816c:	3501      	adds	r5, #1
 800816e:	e7c6      	b.n	80080fe <_printf_common+0x3e>
 8008170:	18e1      	adds	r1, r4, r3
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	2030      	movs	r0, #48	; 0x30
 8008176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800817a:	4422      	add	r2, r4
 800817c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008184:	3302      	adds	r3, #2
 8008186:	e7c7      	b.n	8008118 <_printf_common+0x58>
 8008188:	2301      	movs	r3, #1
 800818a:	4622      	mov	r2, r4
 800818c:	4649      	mov	r1, r9
 800818e:	4638      	mov	r0, r7
 8008190:	47c0      	blx	r8
 8008192:	3001      	adds	r0, #1
 8008194:	d0e6      	beq.n	8008164 <_printf_common+0xa4>
 8008196:	3601      	adds	r6, #1
 8008198:	e7d9      	b.n	800814e <_printf_common+0x8e>
	...

0800819c <_printf_i>:
 800819c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	7e0f      	ldrb	r7, [r1, #24]
 80081a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081a4:	2f78      	cmp	r7, #120	; 0x78
 80081a6:	4691      	mov	r9, r2
 80081a8:	4680      	mov	r8, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	469a      	mov	sl, r3
 80081ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081b2:	d807      	bhi.n	80081c4 <_printf_i+0x28>
 80081b4:	2f62      	cmp	r7, #98	; 0x62
 80081b6:	d80a      	bhi.n	80081ce <_printf_i+0x32>
 80081b8:	2f00      	cmp	r7, #0
 80081ba:	f000 80d8 	beq.w	800836e <_printf_i+0x1d2>
 80081be:	2f58      	cmp	r7, #88	; 0x58
 80081c0:	f000 80a3 	beq.w	800830a <_printf_i+0x16e>
 80081c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081cc:	e03a      	b.n	8008244 <_printf_i+0xa8>
 80081ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081d2:	2b15      	cmp	r3, #21
 80081d4:	d8f6      	bhi.n	80081c4 <_printf_i+0x28>
 80081d6:	a101      	add	r1, pc, #4	; (adr r1, 80081dc <_printf_i+0x40>)
 80081d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081dc:	08008235 	.word	0x08008235
 80081e0:	08008249 	.word	0x08008249
 80081e4:	080081c5 	.word	0x080081c5
 80081e8:	080081c5 	.word	0x080081c5
 80081ec:	080081c5 	.word	0x080081c5
 80081f0:	080081c5 	.word	0x080081c5
 80081f4:	08008249 	.word	0x08008249
 80081f8:	080081c5 	.word	0x080081c5
 80081fc:	080081c5 	.word	0x080081c5
 8008200:	080081c5 	.word	0x080081c5
 8008204:	080081c5 	.word	0x080081c5
 8008208:	08008355 	.word	0x08008355
 800820c:	08008279 	.word	0x08008279
 8008210:	08008337 	.word	0x08008337
 8008214:	080081c5 	.word	0x080081c5
 8008218:	080081c5 	.word	0x080081c5
 800821c:	08008377 	.word	0x08008377
 8008220:	080081c5 	.word	0x080081c5
 8008224:	08008279 	.word	0x08008279
 8008228:	080081c5 	.word	0x080081c5
 800822c:	080081c5 	.word	0x080081c5
 8008230:	0800833f 	.word	0x0800833f
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	602a      	str	r2, [r5, #0]
 800823c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008244:	2301      	movs	r3, #1
 8008246:	e0a3      	b.n	8008390 <_printf_i+0x1f4>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	6829      	ldr	r1, [r5, #0]
 800824c:	0606      	lsls	r6, r0, #24
 800824e:	f101 0304 	add.w	r3, r1, #4
 8008252:	d50a      	bpl.n	800826a <_printf_i+0xce>
 8008254:	680e      	ldr	r6, [r1, #0]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	2e00      	cmp	r6, #0
 800825a:	da03      	bge.n	8008264 <_printf_i+0xc8>
 800825c:	232d      	movs	r3, #45	; 0x2d
 800825e:	4276      	negs	r6, r6
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	485e      	ldr	r0, [pc, #376]	; (80083e0 <_printf_i+0x244>)
 8008266:	230a      	movs	r3, #10
 8008268:	e019      	b.n	800829e <_printf_i+0x102>
 800826a:	680e      	ldr	r6, [r1, #0]
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008272:	bf18      	it	ne
 8008274:	b236      	sxthne	r6, r6
 8008276:	e7ef      	b.n	8008258 <_printf_i+0xbc>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	6820      	ldr	r0, [r4, #0]
 800827c:	1d19      	adds	r1, r3, #4
 800827e:	6029      	str	r1, [r5, #0]
 8008280:	0601      	lsls	r1, r0, #24
 8008282:	d501      	bpl.n	8008288 <_printf_i+0xec>
 8008284:	681e      	ldr	r6, [r3, #0]
 8008286:	e002      	b.n	800828e <_printf_i+0xf2>
 8008288:	0646      	lsls	r6, r0, #25
 800828a:	d5fb      	bpl.n	8008284 <_printf_i+0xe8>
 800828c:	881e      	ldrh	r6, [r3, #0]
 800828e:	4854      	ldr	r0, [pc, #336]	; (80083e0 <_printf_i+0x244>)
 8008290:	2f6f      	cmp	r7, #111	; 0x6f
 8008292:	bf0c      	ite	eq
 8008294:	2308      	moveq	r3, #8
 8008296:	230a      	movne	r3, #10
 8008298:	2100      	movs	r1, #0
 800829a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800829e:	6865      	ldr	r5, [r4, #4]
 80082a0:	60a5      	str	r5, [r4, #8]
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	bfa2      	ittt	ge
 80082a6:	6821      	ldrge	r1, [r4, #0]
 80082a8:	f021 0104 	bicge.w	r1, r1, #4
 80082ac:	6021      	strge	r1, [r4, #0]
 80082ae:	b90e      	cbnz	r6, 80082b4 <_printf_i+0x118>
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	d04d      	beq.n	8008350 <_printf_i+0x1b4>
 80082b4:	4615      	mov	r5, r2
 80082b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80082ba:	fb03 6711 	mls	r7, r3, r1, r6
 80082be:	5dc7      	ldrb	r7, [r0, r7]
 80082c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082c4:	4637      	mov	r7, r6
 80082c6:	42bb      	cmp	r3, r7
 80082c8:	460e      	mov	r6, r1
 80082ca:	d9f4      	bls.n	80082b6 <_printf_i+0x11a>
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d10b      	bne.n	80082e8 <_printf_i+0x14c>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	07de      	lsls	r6, r3, #31
 80082d4:	d508      	bpl.n	80082e8 <_printf_i+0x14c>
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	6861      	ldr	r1, [r4, #4]
 80082da:	4299      	cmp	r1, r3
 80082dc:	bfde      	ittt	le
 80082de:	2330      	movle	r3, #48	; 0x30
 80082e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	6122      	str	r2, [r4, #16]
 80082ec:	f8cd a000 	str.w	sl, [sp]
 80082f0:	464b      	mov	r3, r9
 80082f2:	aa03      	add	r2, sp, #12
 80082f4:	4621      	mov	r1, r4
 80082f6:	4640      	mov	r0, r8
 80082f8:	f7ff fee2 	bl	80080c0 <_printf_common>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d14c      	bne.n	800839a <_printf_i+0x1fe>
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	b004      	add	sp, #16
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	4835      	ldr	r0, [pc, #212]	; (80083e0 <_printf_i+0x244>)
 800830c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008310:	6829      	ldr	r1, [r5, #0]
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	f851 6b04 	ldr.w	r6, [r1], #4
 8008318:	6029      	str	r1, [r5, #0]
 800831a:	061d      	lsls	r5, r3, #24
 800831c:	d514      	bpl.n	8008348 <_printf_i+0x1ac>
 800831e:	07df      	lsls	r7, r3, #31
 8008320:	bf44      	itt	mi
 8008322:	f043 0320 	orrmi.w	r3, r3, #32
 8008326:	6023      	strmi	r3, [r4, #0]
 8008328:	b91e      	cbnz	r6, 8008332 <_printf_i+0x196>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	f023 0320 	bic.w	r3, r3, #32
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	2310      	movs	r3, #16
 8008334:	e7b0      	b.n	8008298 <_printf_i+0xfc>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	2378      	movs	r3, #120	; 0x78
 8008340:	4828      	ldr	r0, [pc, #160]	; (80083e4 <_printf_i+0x248>)
 8008342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008346:	e7e3      	b.n	8008310 <_printf_i+0x174>
 8008348:	0659      	lsls	r1, r3, #25
 800834a:	bf48      	it	mi
 800834c:	b2b6      	uxthmi	r6, r6
 800834e:	e7e6      	b.n	800831e <_printf_i+0x182>
 8008350:	4615      	mov	r5, r2
 8008352:	e7bb      	b.n	80082cc <_printf_i+0x130>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	6826      	ldr	r6, [r4, #0]
 8008358:	6961      	ldr	r1, [r4, #20]
 800835a:	1d18      	adds	r0, r3, #4
 800835c:	6028      	str	r0, [r5, #0]
 800835e:	0635      	lsls	r5, r6, #24
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	d501      	bpl.n	8008368 <_printf_i+0x1cc>
 8008364:	6019      	str	r1, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0x1d2>
 8008368:	0670      	lsls	r0, r6, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0x1c8>
 800836c:	8019      	strh	r1, [r3, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	4615      	mov	r5, r2
 8008374:	e7ba      	b.n	80082ec <_printf_i+0x150>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	602a      	str	r2, [r5, #0]
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	2100      	movs	r1, #0
 8008382:	4628      	mov	r0, r5
 8008384:	f7f7 ff54 	bl	8000230 <memchr>
 8008388:	b108      	cbz	r0, 800838e <_printf_i+0x1f2>
 800838a:	1b40      	subs	r0, r0, r5
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	2300      	movs	r3, #0
 8008394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008398:	e7a8      	b.n	80082ec <_printf_i+0x150>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	462a      	mov	r2, r5
 800839e:	4649      	mov	r1, r9
 80083a0:	4640      	mov	r0, r8
 80083a2:	47d0      	blx	sl
 80083a4:	3001      	adds	r0, #1
 80083a6:	d0ab      	beq.n	8008300 <_printf_i+0x164>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	079b      	lsls	r3, r3, #30
 80083ac:	d413      	bmi.n	80083d6 <_printf_i+0x23a>
 80083ae:	68e0      	ldr	r0, [r4, #12]
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	4298      	cmp	r0, r3
 80083b4:	bfb8      	it	lt
 80083b6:	4618      	movlt	r0, r3
 80083b8:	e7a4      	b.n	8008304 <_printf_i+0x168>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4632      	mov	r2, r6
 80083be:	4649      	mov	r1, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	47d0      	blx	sl
 80083c4:	3001      	adds	r0, #1
 80083c6:	d09b      	beq.n	8008300 <_printf_i+0x164>
 80083c8:	3501      	adds	r5, #1
 80083ca:	68e3      	ldr	r3, [r4, #12]
 80083cc:	9903      	ldr	r1, [sp, #12]
 80083ce:	1a5b      	subs	r3, r3, r1
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	dcf2      	bgt.n	80083ba <_printf_i+0x21e>
 80083d4:	e7eb      	b.n	80083ae <_printf_i+0x212>
 80083d6:	2500      	movs	r5, #0
 80083d8:	f104 0619 	add.w	r6, r4, #25
 80083dc:	e7f5      	b.n	80083ca <_printf_i+0x22e>
 80083de:	bf00      	nop
 80083e0:	0800cce0 	.word	0x0800cce0
 80083e4:	0800ccf1 	.word	0x0800ccf1

080083e8 <_scanf_float>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	b087      	sub	sp, #28
 80083ee:	4617      	mov	r7, r2
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	688b      	ldr	r3, [r1, #8]
 80083f4:	1e5a      	subs	r2, r3, #1
 80083f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083fa:	bf83      	ittte	hi
 80083fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008400:	195b      	addhi	r3, r3, r5
 8008402:	9302      	strhi	r3, [sp, #8]
 8008404:	2300      	movls	r3, #0
 8008406:	bf86      	itte	hi
 8008408:	f240 135d 	movwhi	r3, #349	; 0x15d
 800840c:	608b      	strhi	r3, [r1, #8]
 800840e:	9302      	strls	r3, [sp, #8]
 8008410:	680b      	ldr	r3, [r1, #0]
 8008412:	468b      	mov	fp, r1
 8008414:	2500      	movs	r5, #0
 8008416:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800841a:	f84b 3b1c 	str.w	r3, [fp], #28
 800841e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008422:	4680      	mov	r8, r0
 8008424:	460c      	mov	r4, r1
 8008426:	465e      	mov	r6, fp
 8008428:	46aa      	mov	sl, r5
 800842a:	46a9      	mov	r9, r5
 800842c:	9501      	str	r5, [sp, #4]
 800842e:	68a2      	ldr	r2, [r4, #8]
 8008430:	b152      	cbz	r2, 8008448 <_scanf_float+0x60>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b4e      	cmp	r3, #78	; 0x4e
 8008438:	d864      	bhi.n	8008504 <_scanf_float+0x11c>
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d83c      	bhi.n	80084b8 <_scanf_float+0xd0>
 800843e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008442:	b2c8      	uxtb	r0, r1
 8008444:	280e      	cmp	r0, #14
 8008446:	d93a      	bls.n	80084be <_scanf_float+0xd6>
 8008448:	f1b9 0f00 	cmp.w	r9, #0
 800844c:	d003      	beq.n	8008456 <_scanf_float+0x6e>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800845a:	f1ba 0f01 	cmp.w	sl, #1
 800845e:	f200 8113 	bhi.w	8008688 <_scanf_float+0x2a0>
 8008462:	455e      	cmp	r6, fp
 8008464:	f200 8105 	bhi.w	8008672 <_scanf_float+0x28a>
 8008468:	2501      	movs	r5, #1
 800846a:	4628      	mov	r0, r5
 800846c:	b007      	add	sp, #28
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008476:	2a0d      	cmp	r2, #13
 8008478:	d8e6      	bhi.n	8008448 <_scanf_float+0x60>
 800847a:	a101      	add	r1, pc, #4	; (adr r1, 8008480 <_scanf_float+0x98>)
 800847c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008480:	080085bf 	.word	0x080085bf
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	08008449 	.word	0x08008449
 8008490:	0800861f 	.word	0x0800861f
 8008494:	080085f7 	.word	0x080085f7
 8008498:	08008449 	.word	0x08008449
 800849c:	08008449 	.word	0x08008449
 80084a0:	080085cd 	.word	0x080085cd
 80084a4:	08008449 	.word	0x08008449
 80084a8:	08008449 	.word	0x08008449
 80084ac:	08008449 	.word	0x08008449
 80084b0:	08008449 	.word	0x08008449
 80084b4:	08008585 	.word	0x08008585
 80084b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084bc:	e7db      	b.n	8008476 <_scanf_float+0x8e>
 80084be:	290e      	cmp	r1, #14
 80084c0:	d8c2      	bhi.n	8008448 <_scanf_float+0x60>
 80084c2:	a001      	add	r0, pc, #4	; (adr r0, 80084c8 <_scanf_float+0xe0>)
 80084c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084c8:	08008577 	.word	0x08008577
 80084cc:	08008449 	.word	0x08008449
 80084d0:	08008577 	.word	0x08008577
 80084d4:	0800860b 	.word	0x0800860b
 80084d8:	08008449 	.word	0x08008449
 80084dc:	08008525 	.word	0x08008525
 80084e0:	08008561 	.word	0x08008561
 80084e4:	08008561 	.word	0x08008561
 80084e8:	08008561 	.word	0x08008561
 80084ec:	08008561 	.word	0x08008561
 80084f0:	08008561 	.word	0x08008561
 80084f4:	08008561 	.word	0x08008561
 80084f8:	08008561 	.word	0x08008561
 80084fc:	08008561 	.word	0x08008561
 8008500:	08008561 	.word	0x08008561
 8008504:	2b6e      	cmp	r3, #110	; 0x6e
 8008506:	d809      	bhi.n	800851c <_scanf_float+0x134>
 8008508:	2b60      	cmp	r3, #96	; 0x60
 800850a:	d8b2      	bhi.n	8008472 <_scanf_float+0x8a>
 800850c:	2b54      	cmp	r3, #84	; 0x54
 800850e:	d077      	beq.n	8008600 <_scanf_float+0x218>
 8008510:	2b59      	cmp	r3, #89	; 0x59
 8008512:	d199      	bne.n	8008448 <_scanf_float+0x60>
 8008514:	2d07      	cmp	r5, #7
 8008516:	d197      	bne.n	8008448 <_scanf_float+0x60>
 8008518:	2508      	movs	r5, #8
 800851a:	e029      	b.n	8008570 <_scanf_float+0x188>
 800851c:	2b74      	cmp	r3, #116	; 0x74
 800851e:	d06f      	beq.n	8008600 <_scanf_float+0x218>
 8008520:	2b79      	cmp	r3, #121	; 0x79
 8008522:	e7f6      	b.n	8008512 <_scanf_float+0x12a>
 8008524:	6821      	ldr	r1, [r4, #0]
 8008526:	05c8      	lsls	r0, r1, #23
 8008528:	d51a      	bpl.n	8008560 <_scanf_float+0x178>
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008530:	6021      	str	r1, [r4, #0]
 8008532:	f109 0901 	add.w	r9, r9, #1
 8008536:	b11b      	cbz	r3, 8008540 <_scanf_float+0x158>
 8008538:	3b01      	subs	r3, #1
 800853a:	3201      	adds	r2, #1
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	60a2      	str	r2, [r4, #8]
 8008540:	68a3      	ldr	r3, [r4, #8]
 8008542:	3b01      	subs	r3, #1
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3b01      	subs	r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	f340 8084 	ble.w	8008660 <_scanf_float+0x278>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	e766      	b.n	800842e <_scanf_float+0x46>
 8008560:	eb1a 0f05 	cmn.w	sl, r5
 8008564:	f47f af70 	bne.w	8008448 <_scanf_float+0x60>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800856e:	6022      	str	r2, [r4, #0]
 8008570:	f806 3b01 	strb.w	r3, [r6], #1
 8008574:	e7e4      	b.n	8008540 <_scanf_float+0x158>
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	0610      	lsls	r0, r2, #24
 800857a:	f57f af65 	bpl.w	8008448 <_scanf_float+0x60>
 800857e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008582:	e7f4      	b.n	800856e <_scanf_float+0x186>
 8008584:	f1ba 0f00 	cmp.w	sl, #0
 8008588:	d10e      	bne.n	80085a8 <_scanf_float+0x1c0>
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	d10e      	bne.n	80085ae <_scanf_float+0x1c6>
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008596:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800859a:	d108      	bne.n	80085ae <_scanf_float+0x1c6>
 800859c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	f04f 0a01 	mov.w	sl, #1
 80085a6:	e7e3      	b.n	8008570 <_scanf_float+0x188>
 80085a8:	f1ba 0f02 	cmp.w	sl, #2
 80085ac:	d055      	beq.n	800865a <_scanf_float+0x272>
 80085ae:	2d01      	cmp	r5, #1
 80085b0:	d002      	beq.n	80085b8 <_scanf_float+0x1d0>
 80085b2:	2d04      	cmp	r5, #4
 80085b4:	f47f af48 	bne.w	8008448 <_scanf_float+0x60>
 80085b8:	3501      	adds	r5, #1
 80085ba:	b2ed      	uxtb	r5, r5
 80085bc:	e7d8      	b.n	8008570 <_scanf_float+0x188>
 80085be:	f1ba 0f01 	cmp.w	sl, #1
 80085c2:	f47f af41 	bne.w	8008448 <_scanf_float+0x60>
 80085c6:	f04f 0a02 	mov.w	sl, #2
 80085ca:	e7d1      	b.n	8008570 <_scanf_float+0x188>
 80085cc:	b97d      	cbnz	r5, 80085ee <_scanf_float+0x206>
 80085ce:	f1b9 0f00 	cmp.w	r9, #0
 80085d2:	f47f af3c 	bne.w	800844e <_scanf_float+0x66>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085e0:	f47f af39 	bne.w	8008456 <_scanf_float+0x6e>
 80085e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085e8:	6022      	str	r2, [r4, #0]
 80085ea:	2501      	movs	r5, #1
 80085ec:	e7c0      	b.n	8008570 <_scanf_float+0x188>
 80085ee:	2d03      	cmp	r5, #3
 80085f0:	d0e2      	beq.n	80085b8 <_scanf_float+0x1d0>
 80085f2:	2d05      	cmp	r5, #5
 80085f4:	e7de      	b.n	80085b4 <_scanf_float+0x1cc>
 80085f6:	2d02      	cmp	r5, #2
 80085f8:	f47f af26 	bne.w	8008448 <_scanf_float+0x60>
 80085fc:	2503      	movs	r5, #3
 80085fe:	e7b7      	b.n	8008570 <_scanf_float+0x188>
 8008600:	2d06      	cmp	r5, #6
 8008602:	f47f af21 	bne.w	8008448 <_scanf_float+0x60>
 8008606:	2507      	movs	r5, #7
 8008608:	e7b2      	b.n	8008570 <_scanf_float+0x188>
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	0591      	lsls	r1, r2, #22
 800860e:	f57f af1b 	bpl.w	8008448 <_scanf_float+0x60>
 8008612:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	f8cd 9004 	str.w	r9, [sp, #4]
 800861c:	e7a8      	b.n	8008570 <_scanf_float+0x188>
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008624:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008628:	d006      	beq.n	8008638 <_scanf_float+0x250>
 800862a:	0550      	lsls	r0, r2, #21
 800862c:	f57f af0c 	bpl.w	8008448 <_scanf_float+0x60>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	f43f af0f 	beq.w	8008456 <_scanf_float+0x6e>
 8008638:	0591      	lsls	r1, r2, #22
 800863a:	bf58      	it	pl
 800863c:	9901      	ldrpl	r1, [sp, #4]
 800863e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008642:	bf58      	it	pl
 8008644:	eba9 0101 	subpl.w	r1, r9, r1
 8008648:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800864c:	bf58      	it	pl
 800864e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008652:	6022      	str	r2, [r4, #0]
 8008654:	f04f 0900 	mov.w	r9, #0
 8008658:	e78a      	b.n	8008570 <_scanf_float+0x188>
 800865a:	f04f 0a03 	mov.w	sl, #3
 800865e:	e787      	b.n	8008570 <_scanf_float+0x188>
 8008660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008664:	4639      	mov	r1, r7
 8008666:	4640      	mov	r0, r8
 8008668:	4798      	blx	r3
 800866a:	2800      	cmp	r0, #0
 800866c:	f43f aedf 	beq.w	800842e <_scanf_float+0x46>
 8008670:	e6ea      	b.n	8008448 <_scanf_float+0x60>
 8008672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800867a:	463a      	mov	r2, r7
 800867c:	4640      	mov	r0, r8
 800867e:	4798      	blx	r3
 8008680:	6923      	ldr	r3, [r4, #16]
 8008682:	3b01      	subs	r3, #1
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	e6ec      	b.n	8008462 <_scanf_float+0x7a>
 8008688:	1e6b      	subs	r3, r5, #1
 800868a:	2b06      	cmp	r3, #6
 800868c:	d825      	bhi.n	80086da <_scanf_float+0x2f2>
 800868e:	2d02      	cmp	r5, #2
 8008690:	d836      	bhi.n	8008700 <_scanf_float+0x318>
 8008692:	455e      	cmp	r6, fp
 8008694:	f67f aee8 	bls.w	8008468 <_scanf_float+0x80>
 8008698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800869c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086a0:	463a      	mov	r2, r7
 80086a2:	4640      	mov	r0, r8
 80086a4:	4798      	blx	r3
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	6123      	str	r3, [r4, #16]
 80086ac:	e7f1      	b.n	8008692 <_scanf_float+0x2aa>
 80086ae:	9802      	ldr	r0, [sp, #8]
 80086b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	463a      	mov	r2, r7
 80086bc:	4640      	mov	r0, r8
 80086be:	4798      	blx	r3
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ca:	fa5f fa8a 	uxtb.w	sl, sl
 80086ce:	f1ba 0f02 	cmp.w	sl, #2
 80086d2:	d1ec      	bne.n	80086ae <_scanf_float+0x2c6>
 80086d4:	3d03      	subs	r5, #3
 80086d6:	b2ed      	uxtb	r5, r5
 80086d8:	1b76      	subs	r6, r6, r5
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	05da      	lsls	r2, r3, #23
 80086de:	d52f      	bpl.n	8008740 <_scanf_float+0x358>
 80086e0:	055b      	lsls	r3, r3, #21
 80086e2:	d510      	bpl.n	8008706 <_scanf_float+0x31e>
 80086e4:	455e      	cmp	r6, fp
 80086e6:	f67f aebf 	bls.w	8008468 <_scanf_float+0x80>
 80086ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086f2:	463a      	mov	r2, r7
 80086f4:	4640      	mov	r0, r8
 80086f6:	4798      	blx	r3
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	e7f1      	b.n	80086e4 <_scanf_float+0x2fc>
 8008700:	46aa      	mov	sl, r5
 8008702:	9602      	str	r6, [sp, #8]
 8008704:	e7df      	b.n	80086c6 <_scanf_float+0x2de>
 8008706:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	2965      	cmp	r1, #101	; 0x65
 800870e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008712:	f106 35ff 	add.w	r5, r6, #4294967295
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	d00c      	beq.n	8008734 <_scanf_float+0x34c>
 800871a:	2945      	cmp	r1, #69	; 0x45
 800871c:	d00a      	beq.n	8008734 <_scanf_float+0x34c>
 800871e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008722:	463a      	mov	r2, r7
 8008724:	4640      	mov	r0, r8
 8008726:	4798      	blx	r3
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800872e:	3b01      	subs	r3, #1
 8008730:	1eb5      	subs	r5, r6, #2
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008738:	463a      	mov	r2, r7
 800873a:	4640      	mov	r0, r8
 800873c:	4798      	blx	r3
 800873e:	462e      	mov	r6, r5
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	f015 0510 	ands.w	r5, r5, #16
 8008746:	d159      	bne.n	80087fc <_scanf_float+0x414>
 8008748:	7035      	strb	r5, [r6, #0]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008754:	d11b      	bne.n	800878e <_scanf_float+0x3a6>
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	454b      	cmp	r3, r9
 800875a:	eba3 0209 	sub.w	r2, r3, r9
 800875e:	d123      	bne.n	80087a8 <_scanf_float+0x3c0>
 8008760:	2200      	movs	r2, #0
 8008762:	4659      	mov	r1, fp
 8008764:	4640      	mov	r0, r8
 8008766:	f000 ff09 	bl	800957c <_strtod_r>
 800876a:	6822      	ldr	r2, [r4, #0]
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	f012 0f02 	tst.w	r2, #2
 8008772:	ec57 6b10 	vmov	r6, r7, d0
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	d021      	beq.n	80087be <_scanf_float+0x3d6>
 800877a:	9903      	ldr	r1, [sp, #12]
 800877c:	1d1a      	adds	r2, r3, #4
 800877e:	600a      	str	r2, [r1, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	e9c3 6700 	strd	r6, r7, [r3]
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60e3      	str	r3, [r4, #12]
 800878c:	e66d      	b.n	800846a <_scanf_float+0x82>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0e5      	beq.n	8008760 <_scanf_float+0x378>
 8008794:	9905      	ldr	r1, [sp, #20]
 8008796:	230a      	movs	r3, #10
 8008798:	462a      	mov	r2, r5
 800879a:	3101      	adds	r1, #1
 800879c:	4640      	mov	r0, r8
 800879e:	f000 ff75 	bl	800968c <_strtol_r>
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	9e05      	ldr	r6, [sp, #20]
 80087a6:	1ac2      	subs	r2, r0, r3
 80087a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087ac:	429e      	cmp	r6, r3
 80087ae:	bf28      	it	cs
 80087b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087b4:	4912      	ldr	r1, [pc, #72]	; (8008800 <_scanf_float+0x418>)
 80087b6:	4630      	mov	r0, r6
 80087b8:	f000 f82c 	bl	8008814 <siprintf>
 80087bc:	e7d0      	b.n	8008760 <_scanf_float+0x378>
 80087be:	9903      	ldr	r1, [sp, #12]
 80087c0:	f012 0f04 	tst.w	r2, #4
 80087c4:	f103 0204 	add.w	r2, r3, #4
 80087c8:	600a      	str	r2, [r1, #0]
 80087ca:	d1d9      	bne.n	8008780 <_scanf_float+0x398>
 80087cc:	f8d3 8000 	ldr.w	r8, [r3]
 80087d0:	ee10 2a10 	vmov	r2, s0
 80087d4:	ee10 0a10 	vmov	r0, s0
 80087d8:	463b      	mov	r3, r7
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f8 f9ce 	bl	8000b7c <__aeabi_dcmpun>
 80087e0:	b128      	cbz	r0, 80087ee <_scanf_float+0x406>
 80087e2:	4808      	ldr	r0, [pc, #32]	; (8008804 <_scanf_float+0x41c>)
 80087e4:	f000 f810 	bl	8008808 <nanf>
 80087e8:	ed88 0a00 	vstr	s0, [r8]
 80087ec:	e7cb      	b.n	8008786 <_scanf_float+0x39e>
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 fa21 	bl	8000c38 <__aeabi_d2f>
 80087f6:	f8c8 0000 	str.w	r0, [r8]
 80087fa:	e7c4      	b.n	8008786 <_scanf_float+0x39e>
 80087fc:	2500      	movs	r5, #0
 80087fe:	e634      	b.n	800846a <_scanf_float+0x82>
 8008800:	0800cd02 	.word	0x0800cd02
 8008804:	0800d123 	.word	0x0800d123

08008808 <nanf>:
 8008808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008810 <nanf+0x8>
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	7fc00000 	.word	0x7fc00000

08008814 <siprintf>:
 8008814:	b40e      	push	{r1, r2, r3}
 8008816:	b500      	push	{lr}
 8008818:	b09c      	sub	sp, #112	; 0x70
 800881a:	ab1d      	add	r3, sp, #116	; 0x74
 800881c:	9002      	str	r0, [sp, #8]
 800881e:	9006      	str	r0, [sp, #24]
 8008820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008824:	4809      	ldr	r0, [pc, #36]	; (800884c <siprintf+0x38>)
 8008826:	9107      	str	r1, [sp, #28]
 8008828:	9104      	str	r1, [sp, #16]
 800882a:	4909      	ldr	r1, [pc, #36]	; (8008850 <siprintf+0x3c>)
 800882c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008830:	9105      	str	r1, [sp, #20]
 8008832:	6800      	ldr	r0, [r0, #0]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	a902      	add	r1, sp, #8
 8008838:	f002 ff7c 	bl	800b734 <_svfiprintf_r>
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	b01c      	add	sp, #112	; 0x70
 8008844:	f85d eb04 	ldr.w	lr, [sp], #4
 8008848:	b003      	add	sp, #12
 800884a:	4770      	bx	lr
 800884c:	20000010 	.word	0x20000010
 8008850:	ffff0208 	.word	0xffff0208

08008854 <siscanf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	b510      	push	{r4, lr}
 8008858:	b09f      	sub	sp, #124	; 0x7c
 800885a:	ac21      	add	r4, sp, #132	; 0x84
 800885c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008860:	f854 2b04 	ldr.w	r2, [r4], #4
 8008864:	9201      	str	r2, [sp, #4]
 8008866:	f8ad 101c 	strh.w	r1, [sp, #28]
 800886a:	9004      	str	r0, [sp, #16]
 800886c:	9008      	str	r0, [sp, #32]
 800886e:	f7f7 fcd7 	bl	8000220 <strlen>
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <siscanf+0x50>)
 8008874:	9005      	str	r0, [sp, #20]
 8008876:	9009      	str	r0, [sp, #36]	; 0x24
 8008878:	930d      	str	r3, [sp, #52]	; 0x34
 800887a:	480b      	ldr	r0, [pc, #44]	; (80088a8 <siscanf+0x54>)
 800887c:	9a01      	ldr	r2, [sp, #4]
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	9403      	str	r4, [sp, #12]
 8008882:	2300      	movs	r3, #0
 8008884:	9311      	str	r3, [sp, #68]	; 0x44
 8008886:	9316      	str	r3, [sp, #88]	; 0x58
 8008888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800888c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008890:	a904      	add	r1, sp, #16
 8008892:	4623      	mov	r3, r4
 8008894:	f003 f8a8 	bl	800b9e8 <__ssvfiscanf_r>
 8008898:	b01f      	add	sp, #124	; 0x7c
 800889a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800889e:	b003      	add	sp, #12
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	080088cf 	.word	0x080088cf
 80088a8:	20000010 	.word	0x20000010

080088ac <__sread>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b4:	f003 fb62 	bl	800bf7c <_read_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	bfab      	itete	ge
 80088bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088be:	89a3      	ldrhlt	r3, [r4, #12]
 80088c0:	181b      	addge	r3, r3, r0
 80088c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088c6:	bfac      	ite	ge
 80088c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ca:	81a3      	strhlt	r3, [r4, #12]
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__seofread>:
 80088ce:	2000      	movs	r0, #0
 80088d0:	4770      	bx	lr

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f002 f8e2 	bl	800aab4 <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 bec3 	b.w	8009690 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f002 f8cf 	bl	800aab4 <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	; 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 bebf 	b.w	80096b4 <_close_r>

08008936 <sulp>:
 8008936:	b570      	push	{r4, r5, r6, lr}
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	ec45 4b10 	vmov	d0, r4, r5
 8008940:	4616      	mov	r6, r2
 8008942:	f002 fc55 	bl	800b1f0 <__ulp>
 8008946:	ec51 0b10 	vmov	r0, r1, d0
 800894a:	b17e      	cbz	r6, 800896c <sulp+0x36>
 800894c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008950:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd09      	ble.n	800896c <sulp+0x36>
 8008958:	051b      	lsls	r3, r3, #20
 800895a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800895e:	2400      	movs	r4, #0
 8008960:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	f7f7 fe6e 	bl	8000648 <__aeabi_dmul>
 800896c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008970 <_strtod_l>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	ed2d 8b02 	vpush	{d8}
 8008978:	b09d      	sub	sp, #116	; 0x74
 800897a:	461f      	mov	r7, r3
 800897c:	2300      	movs	r3, #0
 800897e:	9318      	str	r3, [sp, #96]	; 0x60
 8008980:	4ba2      	ldr	r3, [pc, #648]	; (8008c0c <_strtod_l+0x29c>)
 8008982:	9213      	str	r2, [sp, #76]	; 0x4c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	4604      	mov	r4, r0
 800898a:	4618      	mov	r0, r3
 800898c:	4688      	mov	r8, r1
 800898e:	f7f7 fc47 	bl	8000220 <strlen>
 8008992:	f04f 0a00 	mov.w	sl, #0
 8008996:	4605      	mov	r5, r0
 8008998:	f04f 0b00 	mov.w	fp, #0
 800899c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	2a2b      	cmp	r2, #43	; 0x2b
 80089a6:	d04e      	beq.n	8008a46 <_strtod_l+0xd6>
 80089a8:	d83b      	bhi.n	8008a22 <_strtod_l+0xb2>
 80089aa:	2a0d      	cmp	r2, #13
 80089ac:	d834      	bhi.n	8008a18 <_strtod_l+0xa8>
 80089ae:	2a08      	cmp	r2, #8
 80089b0:	d834      	bhi.n	8008a1c <_strtod_l+0xac>
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d03e      	beq.n	8008a34 <_strtod_l+0xc4>
 80089b6:	2300      	movs	r3, #0
 80089b8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089bc:	7833      	ldrb	r3, [r6, #0]
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	f040 80b0 	bne.w	8008b24 <_strtod_l+0x1b4>
 80089c4:	7873      	ldrb	r3, [r6, #1]
 80089c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089ca:	2b58      	cmp	r3, #88	; 0x58
 80089cc:	d168      	bne.n	8008aa0 <_strtod_l+0x130>
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	ab18      	add	r3, sp, #96	; 0x60
 80089d4:	9702      	str	r7, [sp, #8]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4a8d      	ldr	r2, [pc, #564]	; (8008c10 <_strtod_l+0x2a0>)
 80089da:	ab19      	add	r3, sp, #100	; 0x64
 80089dc:	a917      	add	r1, sp, #92	; 0x5c
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 fd5c 	bl	800a49c <__gethex>
 80089e4:	f010 0707 	ands.w	r7, r0, #7
 80089e8:	4605      	mov	r5, r0
 80089ea:	d005      	beq.n	80089f8 <_strtod_l+0x88>
 80089ec:	2f06      	cmp	r7, #6
 80089ee:	d12c      	bne.n	8008a4a <_strtod_l+0xda>
 80089f0:	3601      	adds	r6, #1
 80089f2:	2300      	movs	r3, #0
 80089f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80089f6:	930a      	str	r3, [sp, #40]	; 0x28
 80089f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 8590 	bne.w	8009520 <_strtod_l+0xbb0>
 8008a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a02:	b1eb      	cbz	r3, 8008a40 <_strtod_l+0xd0>
 8008a04:	4652      	mov	r2, sl
 8008a06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a0a:	ec43 2b10 	vmov	d0, r2, r3
 8008a0e:	b01d      	add	sp, #116	; 0x74
 8008a10:	ecbd 8b02 	vpop	{d8}
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	2a20      	cmp	r2, #32
 8008a1a:	d1cc      	bne.n	80089b6 <_strtod_l+0x46>
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a20:	e7be      	b.n	80089a0 <_strtod_l+0x30>
 8008a22:	2a2d      	cmp	r2, #45	; 0x2d
 8008a24:	d1c7      	bne.n	80089b6 <_strtod_l+0x46>
 8008a26:	2201      	movs	r2, #1
 8008a28:	920a      	str	r2, [sp, #40]	; 0x28
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1c2      	bne.n	80089ba <_strtod_l+0x4a>
 8008a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 856e 	bne.w	800951c <_strtod_l+0xbac>
 8008a40:	4652      	mov	r2, sl
 8008a42:	465b      	mov	r3, fp
 8008a44:	e7e1      	b.n	8008a0a <_strtod_l+0x9a>
 8008a46:	2200      	movs	r2, #0
 8008a48:	e7ee      	b.n	8008a28 <_strtod_l+0xb8>
 8008a4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a4c:	b13a      	cbz	r2, 8008a5e <_strtod_l+0xee>
 8008a4e:	2135      	movs	r1, #53	; 0x35
 8008a50:	a81a      	add	r0, sp, #104	; 0x68
 8008a52:	f002 fcd8 	bl	800b406 <__copybits>
 8008a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f002 f897 	bl	800ab8c <_Bfree>
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	2f04      	cmp	r7, #4
 8008a62:	d806      	bhi.n	8008a72 <_strtod_l+0x102>
 8008a64:	e8df f007 	tbb	[pc, r7]
 8008a68:	1714030a 	.word	0x1714030a
 8008a6c:	0a          	.byte	0x0a
 8008a6d:	00          	.byte	0x00
 8008a6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008a72:	0728      	lsls	r0, r5, #28
 8008a74:	d5c0      	bpl.n	80089f8 <_strtod_l+0x88>
 8008a76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a7a:	e7bd      	b.n	80089f8 <_strtod_l+0x88>
 8008a7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a8e:	e7f0      	b.n	8008a72 <_strtod_l+0x102>
 8008a90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c14 <_strtod_l+0x2a4>
 8008a94:	e7ed      	b.n	8008a72 <_strtod_l+0x102>
 8008a96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a9a:	f04f 3aff 	mov.w	sl, #4294967295
 8008a9e:	e7e8      	b.n	8008a72 <_strtod_l+0x102>
 8008aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b30      	cmp	r3, #48	; 0x30
 8008aaa:	d0f9      	beq.n	8008aa0 <_strtod_l+0x130>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0a3      	beq.n	80089f8 <_strtod_l+0x88>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ac0:	464f      	mov	r7, r9
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ac6:	7806      	ldrb	r6, [r0, #0]
 8008ac8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008acc:	b2d9      	uxtb	r1, r3
 8008ace:	2909      	cmp	r1, #9
 8008ad0:	d92a      	bls.n	8008b28 <_strtod_l+0x1b8>
 8008ad2:	9905      	ldr	r1, [sp, #20]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	f003 fab3 	bl	800c040 <strncmp>
 8008ada:	b398      	cbz	r0, 8008b44 <_strtod_l+0x1d4>
 8008adc:	2000      	movs	r0, #0
 8008ade:	4632      	mov	r2, r6
 8008ae0:	463d      	mov	r5, r7
 8008ae2:	9005      	str	r0, [sp, #20]
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2a65      	cmp	r2, #101	; 0x65
 8008ae8:	d001      	beq.n	8008aee <_strtod_l+0x17e>
 8008aea:	2a45      	cmp	r2, #69	; 0x45
 8008aec:	d118      	bne.n	8008b20 <_strtod_l+0x1b0>
 8008aee:	b91d      	cbnz	r5, 8008af8 <_strtod_l+0x188>
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	4302      	orrs	r2, r0
 8008af4:	d09e      	beq.n	8008a34 <_strtod_l+0xc4>
 8008af6:	2500      	movs	r5, #0
 8008af8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008afc:	f108 0201 	add.w	r2, r8, #1
 8008b00:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b06:	2a2b      	cmp	r2, #43	; 0x2b
 8008b08:	d075      	beq.n	8008bf6 <_strtod_l+0x286>
 8008b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b0c:	d07b      	beq.n	8008c06 <_strtod_l+0x296>
 8008b0e:	f04f 0c00 	mov.w	ip, #0
 8008b12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b16:	2909      	cmp	r1, #9
 8008b18:	f240 8082 	bls.w	8008c20 <_strtod_l+0x2b0>
 8008b1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b20:	2600      	movs	r6, #0
 8008b22:	e09d      	b.n	8008c60 <_strtod_l+0x2f0>
 8008b24:	2300      	movs	r3, #0
 8008b26:	e7c4      	b.n	8008ab2 <_strtod_l+0x142>
 8008b28:	2f08      	cmp	r7, #8
 8008b2a:	bfd8      	it	le
 8008b2c:	9907      	ldrle	r1, [sp, #28]
 8008b2e:	f100 0001 	add.w	r0, r0, #1
 8008b32:	bfda      	itte	le
 8008b34:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b38:	9307      	strle	r3, [sp, #28]
 8008b3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b3e:	3701      	adds	r7, #1
 8008b40:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b42:	e7bf      	b.n	8008ac4 <_strtod_l+0x154>
 8008b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b46:	195a      	adds	r2, r3, r5
 8008b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b4a:	5d5a      	ldrb	r2, [r3, r5]
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	d037      	beq.n	8008bc0 <_strtod_l+0x250>
 8008b50:	9005      	str	r0, [sp, #20]
 8008b52:	463d      	mov	r5, r7
 8008b54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d912      	bls.n	8008b82 <_strtod_l+0x212>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e7c2      	b.n	8008ae6 <_strtod_l+0x176>
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b66:	785a      	ldrb	r2, [r3, #1]
 8008b68:	3001      	adds	r0, #1
 8008b6a:	2a30      	cmp	r2, #48	; 0x30
 8008b6c:	d0f8      	beq.n	8008b60 <_strtod_l+0x1f0>
 8008b6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	f200 84d9 	bhi.w	800952a <_strtod_l+0xbba>
 8008b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b7a:	9005      	str	r0, [sp, #20]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	9308      	str	r3, [sp, #32]
 8008b80:	4605      	mov	r5, r0
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	f100 0301 	add.w	r3, r0, #1
 8008b88:	d014      	beq.n	8008bb4 <_strtod_l+0x244>
 8008b8a:	9905      	ldr	r1, [sp, #20]
 8008b8c:	4419      	add	r1, r3
 8008b8e:	9105      	str	r1, [sp, #20]
 8008b90:	462b      	mov	r3, r5
 8008b92:	eb00 0e05 	add.w	lr, r0, r5
 8008b96:	210a      	movs	r1, #10
 8008b98:	4573      	cmp	r3, lr
 8008b9a:	d113      	bne.n	8008bc4 <_strtod_l+0x254>
 8008b9c:	182b      	adds	r3, r5, r0
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	f105 0501 	add.w	r5, r5, #1
 8008ba4:	4405      	add	r5, r0
 8008ba6:	dc1c      	bgt.n	8008be2 <_strtod_l+0x272>
 8008ba8:	9907      	ldr	r1, [sp, #28]
 8008baa:	230a      	movs	r3, #10
 8008bac:	fb03 2301 	mla	r3, r3, r1, r2
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bb6:	1c51      	adds	r1, r2, #1
 8008bb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008bba:	7852      	ldrb	r2, [r2, #1]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	e7c9      	b.n	8008b54 <_strtod_l+0x1e4>
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	e7d2      	b.n	8008b6a <_strtod_l+0x1fa>
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	dc04      	bgt.n	8008bd2 <_strtod_l+0x262>
 8008bc8:	9e07      	ldr	r6, [sp, #28]
 8008bca:	434e      	muls	r6, r1
 8008bcc:	9607      	str	r6, [sp, #28]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	e7e2      	b.n	8008b98 <_strtod_l+0x228>
 8008bd2:	f103 0c01 	add.w	ip, r3, #1
 8008bd6:	f1bc 0f10 	cmp.w	ip, #16
 8008bda:	bfd8      	it	le
 8008bdc:	fb01 f909 	mulle.w	r9, r1, r9
 8008be0:	e7f5      	b.n	8008bce <_strtod_l+0x25e>
 8008be2:	2d10      	cmp	r5, #16
 8008be4:	bfdc      	itt	le
 8008be6:	230a      	movle	r3, #10
 8008be8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008bec:	e7e1      	b.n	8008bb2 <_strtod_l+0x242>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e77c      	b.n	8008af0 <_strtod_l+0x180>
 8008bf6:	f04f 0c00 	mov.w	ip, #0
 8008bfa:	f108 0202 	add.w	r2, r8, #2
 8008bfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c04:	e785      	b.n	8008b12 <_strtod_l+0x1a2>
 8008c06:	f04f 0c01 	mov.w	ip, #1
 8008c0a:	e7f6      	b.n	8008bfa <_strtod_l+0x28a>
 8008c0c:	0800cf50 	.word	0x0800cf50
 8008c10:	0800cd08 	.word	0x0800cd08
 8008c14:	7ff00000 	.word	0x7ff00000
 8008c18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c1a:	1c51      	adds	r1, r2, #1
 8008c1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c1e:	7852      	ldrb	r2, [r2, #1]
 8008c20:	2a30      	cmp	r2, #48	; 0x30
 8008c22:	d0f9      	beq.n	8008c18 <_strtod_l+0x2a8>
 8008c24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c28:	2908      	cmp	r1, #8
 8008c2a:	f63f af79 	bhi.w	8008b20 <_strtod_l+0x1b0>
 8008c2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c34:	9206      	str	r2, [sp, #24]
 8008c36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c38:	1c51      	adds	r1, r2, #1
 8008c3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c3c:	7852      	ldrb	r2, [r2, #1]
 8008c3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c42:	2e09      	cmp	r6, #9
 8008c44:	d937      	bls.n	8008cb6 <_strtod_l+0x346>
 8008c46:	9e06      	ldr	r6, [sp, #24]
 8008c48:	1b89      	subs	r1, r1, r6
 8008c4a:	2908      	cmp	r1, #8
 8008c4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c50:	dc02      	bgt.n	8008c58 <_strtod_l+0x2e8>
 8008c52:	4576      	cmp	r6, lr
 8008c54:	bfa8      	it	ge
 8008c56:	4676      	movge	r6, lr
 8008c58:	f1bc 0f00 	cmp.w	ip, #0
 8008c5c:	d000      	beq.n	8008c60 <_strtod_l+0x2f0>
 8008c5e:	4276      	negs	r6, r6
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	d14d      	bne.n	8008d00 <_strtod_l+0x390>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	4301      	orrs	r1, r0
 8008c68:	f47f aec6 	bne.w	80089f8 <_strtod_l+0x88>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f aee1 	bne.w	8008a34 <_strtod_l+0xc4>
 8008c72:	2a69      	cmp	r2, #105	; 0x69
 8008c74:	d027      	beq.n	8008cc6 <_strtod_l+0x356>
 8008c76:	dc24      	bgt.n	8008cc2 <_strtod_l+0x352>
 8008c78:	2a49      	cmp	r2, #73	; 0x49
 8008c7a:	d024      	beq.n	8008cc6 <_strtod_l+0x356>
 8008c7c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c7e:	f47f aed9 	bne.w	8008a34 <_strtod_l+0xc4>
 8008c82:	499f      	ldr	r1, [pc, #636]	; (8008f00 <_strtod_l+0x590>)
 8008c84:	a817      	add	r0, sp, #92	; 0x5c
 8008c86:	f001 fe61 	bl	800a94c <__match>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aed2 	beq.w	8008a34 <_strtod_l+0xc4>
 8008c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b28      	cmp	r3, #40	; 0x28
 8008c96:	d12d      	bne.n	8008cf4 <_strtod_l+0x384>
 8008c98:	499a      	ldr	r1, [pc, #616]	; (8008f04 <_strtod_l+0x594>)
 8008c9a:	aa1a      	add	r2, sp, #104	; 0x68
 8008c9c:	a817      	add	r0, sp, #92	; 0x5c
 8008c9e:	f001 fe69 	bl	800a974 <__hexnan>
 8008ca2:	2805      	cmp	r0, #5
 8008ca4:	d126      	bne.n	8008cf4 <_strtod_l+0x384>
 8008ca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ca8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008cac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cb4:	e6a0      	b.n	80089f8 <_strtod_l+0x88>
 8008cb6:	210a      	movs	r1, #10
 8008cb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008cbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cc0:	e7b9      	b.n	8008c36 <_strtod_l+0x2c6>
 8008cc2:	2a6e      	cmp	r2, #110	; 0x6e
 8008cc4:	e7db      	b.n	8008c7e <_strtod_l+0x30e>
 8008cc6:	4990      	ldr	r1, [pc, #576]	; (8008f08 <_strtod_l+0x598>)
 8008cc8:	a817      	add	r0, sp, #92	; 0x5c
 8008cca:	f001 fe3f 	bl	800a94c <__match>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f aeb0 	beq.w	8008a34 <_strtod_l+0xc4>
 8008cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd6:	498d      	ldr	r1, [pc, #564]	; (8008f0c <_strtod_l+0x59c>)
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	a817      	add	r0, sp, #92	; 0x5c
 8008cdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cde:	f001 fe35 	bl	800a94c <__match>
 8008ce2:	b910      	cbnz	r0, 8008cea <_strtod_l+0x37a>
 8008ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f1c <_strtod_l+0x5ac>
 8008cee:	f04f 0a00 	mov.w	sl, #0
 8008cf2:	e681      	b.n	80089f8 <_strtod_l+0x88>
 8008cf4:	4886      	ldr	r0, [pc, #536]	; (8008f10 <_strtod_l+0x5a0>)
 8008cf6:	f003 f953 	bl	800bfa0 <nan>
 8008cfa:	ec5b ab10 	vmov	sl, fp, d0
 8008cfe:	e67b      	b.n	80089f8 <_strtod_l+0x88>
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	9807      	ldr	r0, [sp, #28]
 8008d04:	1af3      	subs	r3, r6, r3
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	bf08      	it	eq
 8008d0a:	462f      	moveq	r7, r5
 8008d0c:	2d10      	cmp	r5, #16
 8008d0e:	9306      	str	r3, [sp, #24]
 8008d10:	46a8      	mov	r8, r5
 8008d12:	bfa8      	it	ge
 8008d14:	f04f 0810 	movge.w	r8, #16
 8008d18:	f7f7 fc1c 	bl	8000554 <__aeabi_ui2d>
 8008d1c:	2d09      	cmp	r5, #9
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	dd13      	ble.n	8008d4c <_strtod_l+0x3dc>
 8008d24:	4b7b      	ldr	r3, [pc, #492]	; (8008f14 <_strtod_l+0x5a4>)
 8008d26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d2e:	f7f7 fc8b 	bl	8000648 <__aeabi_dmul>
 8008d32:	4682      	mov	sl, r0
 8008d34:	4648      	mov	r0, r9
 8008d36:	468b      	mov	fp, r1
 8008d38:	f7f7 fc0c 	bl	8000554 <__aeabi_ui2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	f7f7 faca 	bl	80002dc <__adddf3>
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	2d0f      	cmp	r5, #15
 8008d4e:	dc38      	bgt.n	8008dc2 <_strtod_l+0x452>
 8008d50:	9b06      	ldr	r3, [sp, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f43f ae50 	beq.w	80089f8 <_strtod_l+0x88>
 8008d58:	dd24      	ble.n	8008da4 <_strtod_l+0x434>
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	dc0b      	bgt.n	8008d76 <_strtod_l+0x406>
 8008d5e:	496d      	ldr	r1, [pc, #436]	; (8008f14 <_strtod_l+0x5a4>)
 8008d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d68:	4652      	mov	r2, sl
 8008d6a:	465b      	mov	r3, fp
 8008d6c:	f7f7 fc6c 	bl	8000648 <__aeabi_dmul>
 8008d70:	4682      	mov	sl, r0
 8008d72:	468b      	mov	fp, r1
 8008d74:	e640      	b.n	80089f8 <_strtod_l+0x88>
 8008d76:	9a06      	ldr	r2, [sp, #24]
 8008d78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	db20      	blt.n	8008dc2 <_strtod_l+0x452>
 8008d80:	4c64      	ldr	r4, [pc, #400]	; (8008f14 <_strtod_l+0x5a4>)
 8008d82:	f1c5 050f 	rsb	r5, r5, #15
 8008d86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d92:	f7f7 fc59 	bl	8000648 <__aeabi_dmul>
 8008d96:	9b06      	ldr	r3, [sp, #24]
 8008d98:	1b5d      	subs	r5, r3, r5
 8008d9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008da2:	e7e3      	b.n	8008d6c <_strtod_l+0x3fc>
 8008da4:	9b06      	ldr	r3, [sp, #24]
 8008da6:	3316      	adds	r3, #22
 8008da8:	db0b      	blt.n	8008dc2 <_strtod_l+0x452>
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	1b9e      	subs	r6, r3, r6
 8008dae:	4b59      	ldr	r3, [pc, #356]	; (8008f14 <_strtod_l+0x5a4>)
 8008db0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008db8:	4650      	mov	r0, sl
 8008dba:	4659      	mov	r1, fp
 8008dbc:	f7f7 fd6e 	bl	800089c <__aeabi_ddiv>
 8008dc0:	e7d6      	b.n	8008d70 <_strtod_l+0x400>
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	eba5 0808 	sub.w	r8, r5, r8
 8008dc8:	4498      	add	r8, r3
 8008dca:	f1b8 0f00 	cmp.w	r8, #0
 8008dce:	dd74      	ble.n	8008eba <_strtod_l+0x54a>
 8008dd0:	f018 030f 	ands.w	r3, r8, #15
 8008dd4:	d00a      	beq.n	8008dec <_strtod_l+0x47c>
 8008dd6:	494f      	ldr	r1, [pc, #316]	; (8008f14 <_strtod_l+0x5a4>)
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de4:	f7f7 fc30 	bl	8000648 <__aeabi_dmul>
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	f038 080f 	bics.w	r8, r8, #15
 8008df0:	d04f      	beq.n	8008e92 <_strtod_l+0x522>
 8008df2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008df6:	dd22      	ble.n	8008e3e <_strtod_l+0x4ce>
 8008df8:	2500      	movs	r5, #0
 8008dfa:	462e      	mov	r6, r5
 8008dfc:	9507      	str	r5, [sp, #28]
 8008dfe:	9505      	str	r5, [sp, #20]
 8008e00:	2322      	movs	r3, #34	; 0x22
 8008e02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f1c <_strtod_l+0x5ac>
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	f04f 0a00 	mov.w	sl, #0
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f43f adf2 	beq.w	80089f8 <_strtod_l+0x88>
 8008e14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e16:	4620      	mov	r0, r4
 8008e18:	f001 feb8 	bl	800ab8c <_Bfree>
 8008e1c:	9905      	ldr	r1, [sp, #20]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f001 feb4 	bl	800ab8c <_Bfree>
 8008e24:	4631      	mov	r1, r6
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 feb0 	bl	800ab8c <_Bfree>
 8008e2c:	9907      	ldr	r1, [sp, #28]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f001 feac 	bl	800ab8c <_Bfree>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4620      	mov	r0, r4
 8008e38:	f001 fea8 	bl	800ab8c <_Bfree>
 8008e3c:	e5dc      	b.n	80089f8 <_strtod_l+0x88>
 8008e3e:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <_strtod_l+0x5a8>)
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	2300      	movs	r3, #0
 8008e44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	4699      	mov	r9, r3
 8008e4e:	f1b8 0f01 	cmp.w	r8, #1
 8008e52:	dc21      	bgt.n	8008e98 <_strtod_l+0x528>
 8008e54:	b10b      	cbz	r3, 8008e5a <_strtod_l+0x4ea>
 8008e56:	4682      	mov	sl, r0
 8008e58:	468b      	mov	fp, r1
 8008e5a:	4b2f      	ldr	r3, [pc, #188]	; (8008f18 <_strtod_l+0x5a8>)
 8008e5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e64:	4652      	mov	r2, sl
 8008e66:	465b      	mov	r3, fp
 8008e68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e6c:	f7f7 fbec 	bl	8000648 <__aeabi_dmul>
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <_strtod_l+0x5ac>)
 8008e72:	460a      	mov	r2, r1
 8008e74:	400b      	ands	r3, r1
 8008e76:	492a      	ldr	r1, [pc, #168]	; (8008f20 <_strtod_l+0x5b0>)
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	4682      	mov	sl, r0
 8008e7c:	d8bc      	bhi.n	8008df8 <_strtod_l+0x488>
 8008e7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e82:	428b      	cmp	r3, r1
 8008e84:	bf86      	itte	hi
 8008e86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f24 <_strtod_l+0x5b4>
 8008e8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e92:	2300      	movs	r3, #0
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	e084      	b.n	8008fa2 <_strtod_l+0x632>
 8008e98:	f018 0f01 	tst.w	r8, #1
 8008e9c:	d005      	beq.n	8008eaa <_strtod_l+0x53a>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fbd0 	bl	8000648 <__aeabi_dmul>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9a04      	ldr	r2, [sp, #16]
 8008eac:	3208      	adds	r2, #8
 8008eae:	f109 0901 	add.w	r9, r9, #1
 8008eb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008eb6:	9204      	str	r2, [sp, #16]
 8008eb8:	e7c9      	b.n	8008e4e <_strtod_l+0x4de>
 8008eba:	d0ea      	beq.n	8008e92 <_strtod_l+0x522>
 8008ebc:	f1c8 0800 	rsb	r8, r8, #0
 8008ec0:	f018 020f 	ands.w	r2, r8, #15
 8008ec4:	d00a      	beq.n	8008edc <_strtod_l+0x56c>
 8008ec6:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <_strtod_l+0x5a4>)
 8008ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ecc:	4650      	mov	r0, sl
 8008ece:	4659      	mov	r1, fp
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 fce2 	bl	800089c <__aeabi_ddiv>
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ee0:	d0d7      	beq.n	8008e92 <_strtod_l+0x522>
 8008ee2:	f1b8 0f1f 	cmp.w	r8, #31
 8008ee6:	dd1f      	ble.n	8008f28 <_strtod_l+0x5b8>
 8008ee8:	2500      	movs	r5, #0
 8008eea:	462e      	mov	r6, r5
 8008eec:	9507      	str	r5, [sp, #28]
 8008eee:	9505      	str	r5, [sp, #20]
 8008ef0:	2322      	movs	r3, #34	; 0x22
 8008ef2:	f04f 0a00 	mov.w	sl, #0
 8008ef6:	f04f 0b00 	mov.w	fp, #0
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	e786      	b.n	8008e0c <_strtod_l+0x49c>
 8008efe:	bf00      	nop
 8008f00:	0800ccdd 	.word	0x0800ccdd
 8008f04:	0800cd1c 	.word	0x0800cd1c
 8008f08:	0800ccd5 	.word	0x0800ccd5
 8008f0c:	0800ce5c 	.word	0x0800ce5c
 8008f10:	0800d123 	.word	0x0800d123
 8008f14:	0800cfe8 	.word	0x0800cfe8
 8008f18:	0800cfc0 	.word	0x0800cfc0
 8008f1c:	7ff00000 	.word	0x7ff00000
 8008f20:	7ca00000 	.word	0x7ca00000
 8008f24:	7fefffff 	.word	0x7fefffff
 8008f28:	f018 0310 	ands.w	r3, r8, #16
 8008f2c:	bf18      	it	ne
 8008f2e:	236a      	movne	r3, #106	; 0x6a
 8008f30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80092e0 <_strtod_l+0x970>
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	4650      	mov	r0, sl
 8008f38:	4659      	mov	r1, fp
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f018 0f01 	tst.w	r8, #1
 8008f40:	d004      	beq.n	8008f4c <_strtod_l+0x5dc>
 8008f42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f46:	f7f7 fb7f 	bl	8000648 <__aeabi_dmul>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f50:	f109 0908 	add.w	r9, r9, #8
 8008f54:	d1f2      	bne.n	8008f3c <_strtod_l+0x5cc>
 8008f56:	b10b      	cbz	r3, 8008f5c <_strtod_l+0x5ec>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	b1c3      	cbz	r3, 8008f92 <_strtod_l+0x622>
 8008f60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	4659      	mov	r1, fp
 8008f6c:	dd11      	ble.n	8008f92 <_strtod_l+0x622>
 8008f6e:	2b1f      	cmp	r3, #31
 8008f70:	f340 8124 	ble.w	80091bc <_strtod_l+0x84c>
 8008f74:	2b34      	cmp	r3, #52	; 0x34
 8008f76:	bfde      	ittt	le
 8008f78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f7c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f80:	fa03 f202 	lslle.w	r2, r3, r2
 8008f84:	f04f 0a00 	mov.w	sl, #0
 8008f88:	bfcc      	ite	gt
 8008f8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f8e:	ea02 0b01 	andle.w	fp, r2, r1
 8008f92:	2200      	movs	r2, #0
 8008f94:	2300      	movs	r3, #0
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fdbd 	bl	8000b18 <__aeabi_dcmpeq>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d1a2      	bne.n	8008ee8 <_strtod_l+0x578>
 8008fa2:	9b07      	ldr	r3, [sp, #28]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	9908      	ldr	r1, [sp, #32]
 8008fa8:	462b      	mov	r3, r5
 8008faa:	463a      	mov	r2, r7
 8008fac:	4620      	mov	r0, r4
 8008fae:	f001 fe55 	bl	800ac5c <__s2b>
 8008fb2:	9007      	str	r0, [sp, #28]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f43f af1f 	beq.w	8008df8 <_strtod_l+0x488>
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	1b9e      	subs	r6, r3, r6
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfb4      	ite	lt
 8008fc4:	4633      	movlt	r3, r6
 8008fc6:	2300      	movge	r3, #0
 8008fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008fca:	9b06      	ldr	r3, [sp, #24]
 8008fcc:	2500      	movs	r5, #0
 8008fce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8008fd4:	462e      	mov	r6, r5
 8008fd6:	9b07      	ldr	r3, [sp, #28]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	6859      	ldr	r1, [r3, #4]
 8008fdc:	f001 fd96 	bl	800ab0c <_Balloc>
 8008fe0:	9005      	str	r0, [sp, #20]
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f af0c 	beq.w	8008e00 <_strtod_l+0x490>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	3202      	adds	r2, #2
 8008fee:	f103 010c 	add.w	r1, r3, #12
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	300c      	adds	r0, #12
 8008ff6:	f7fe fd77 	bl	8007ae8 <memcpy>
 8008ffa:	ec4b ab10 	vmov	d0, sl, fp
 8008ffe:	aa1a      	add	r2, sp, #104	; 0x68
 8009000:	a919      	add	r1, sp, #100	; 0x64
 8009002:	4620      	mov	r0, r4
 8009004:	f002 f970 	bl	800b2e8 <__d2b>
 8009008:	ec4b ab18 	vmov	d8, sl, fp
 800900c:	9018      	str	r0, [sp, #96]	; 0x60
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f aef6 	beq.w	8008e00 <_strtod_l+0x490>
 8009014:	2101      	movs	r1, #1
 8009016:	4620      	mov	r0, r4
 8009018:	f001 feba 	bl	800ad90 <__i2b>
 800901c:	4606      	mov	r6, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f aeee 	beq.w	8008e00 <_strtod_l+0x490>
 8009024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009026:	9904      	ldr	r1, [sp, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfab      	itete	ge
 800902c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800902e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009030:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009032:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009036:	bfac      	ite	ge
 8009038:	eb03 0902 	addge.w	r9, r3, r2
 800903c:	1ad7      	sublt	r7, r2, r3
 800903e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009040:	eba3 0801 	sub.w	r8, r3, r1
 8009044:	4490      	add	r8, r2
 8009046:	4ba1      	ldr	r3, [pc, #644]	; (80092cc <_strtod_l+0x95c>)
 8009048:	f108 38ff 	add.w	r8, r8, #4294967295
 800904c:	4598      	cmp	r8, r3
 800904e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009052:	f280 80c7 	bge.w	80091e4 <_strtod_l+0x874>
 8009056:	eba3 0308 	sub.w	r3, r3, r8
 800905a:	2b1f      	cmp	r3, #31
 800905c:	eba2 0203 	sub.w	r2, r2, r3
 8009060:	f04f 0101 	mov.w	r1, #1
 8009064:	f300 80b1 	bgt.w	80091ca <_strtod_l+0x85a>
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	930d      	str	r3, [sp, #52]	; 0x34
 800906e:	2300      	movs	r3, #0
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	eb09 0802 	add.w	r8, r9, r2
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	45c1      	cmp	r9, r8
 800907a:	4417      	add	r7, r2
 800907c:	441f      	add	r7, r3
 800907e:	464b      	mov	r3, r9
 8009080:	bfa8      	it	ge
 8009082:	4643      	movge	r3, r8
 8009084:	42bb      	cmp	r3, r7
 8009086:	bfa8      	it	ge
 8009088:	463b      	movge	r3, r7
 800908a:	2b00      	cmp	r3, #0
 800908c:	bfc2      	ittt	gt
 800908e:	eba8 0803 	subgt.w	r8, r8, r3
 8009092:	1aff      	subgt	r7, r7, r3
 8009094:	eba9 0903 	subgt.w	r9, r9, r3
 8009098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909a:	2b00      	cmp	r3, #0
 800909c:	dd17      	ble.n	80090ce <_strtod_l+0x75e>
 800909e:	4631      	mov	r1, r6
 80090a0:	461a      	mov	r2, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 ff34 	bl	800af10 <__pow5mult>
 80090a8:	4606      	mov	r6, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f43f aea8 	beq.w	8008e00 <_strtod_l+0x490>
 80090b0:	4601      	mov	r1, r0
 80090b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 fe81 	bl	800adbc <__multiply>
 80090ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f ae9f 	beq.w	8008e00 <_strtod_l+0x490>
 80090c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090c4:	4620      	mov	r0, r4
 80090c6:	f001 fd61 	bl	800ab8c <_Bfree>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090cc:	9318      	str	r3, [sp, #96]	; 0x60
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	f300 808c 	bgt.w	80091ee <_strtod_l+0x87e>
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dd08      	ble.n	80090ee <_strtod_l+0x77e>
 80090dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090de:	9905      	ldr	r1, [sp, #20]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f001 ff15 	bl	800af10 <__pow5mult>
 80090e6:	9005      	str	r0, [sp, #20]
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f ae89 	beq.w	8008e00 <_strtod_l+0x490>
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	dd08      	ble.n	8009104 <_strtod_l+0x794>
 80090f2:	9905      	ldr	r1, [sp, #20]
 80090f4:	463a      	mov	r2, r7
 80090f6:	4620      	mov	r0, r4
 80090f8:	f001 ff64 	bl	800afc4 <__lshift>
 80090fc:	9005      	str	r0, [sp, #20]
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f ae7e 	beq.w	8008e00 <_strtod_l+0x490>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	dd08      	ble.n	800911c <_strtod_l+0x7ac>
 800910a:	4631      	mov	r1, r6
 800910c:	464a      	mov	r2, r9
 800910e:	4620      	mov	r0, r4
 8009110:	f001 ff58 	bl	800afc4 <__lshift>
 8009114:	4606      	mov	r6, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f ae72 	beq.w	8008e00 <_strtod_l+0x490>
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009120:	4620      	mov	r0, r4
 8009122:	f001 ffdb 	bl	800b0dc <__mdiff>
 8009126:	4605      	mov	r5, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f ae69 	beq.w	8008e00 <_strtod_l+0x490>
 800912e:	68c3      	ldr	r3, [r0, #12]
 8009130:	930b      	str	r3, [sp, #44]	; 0x2c
 8009132:	2300      	movs	r3, #0
 8009134:	60c3      	str	r3, [r0, #12]
 8009136:	4631      	mov	r1, r6
 8009138:	f001 ffb4 	bl	800b0a4 <__mcmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	da60      	bge.n	8009202 <_strtod_l+0x892>
 8009140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009142:	ea53 030a 	orrs.w	r3, r3, sl
 8009146:	f040 8082 	bne.w	800924e <_strtod_l+0x8de>
 800914a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914e:	2b00      	cmp	r3, #0
 8009150:	d17d      	bne.n	800924e <_strtod_l+0x8de>
 8009152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009156:	0d1b      	lsrs	r3, r3, #20
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800915e:	d976      	bls.n	800924e <_strtod_l+0x8de>
 8009160:	696b      	ldr	r3, [r5, #20]
 8009162:	b913      	cbnz	r3, 800916a <_strtod_l+0x7fa>
 8009164:	692b      	ldr	r3, [r5, #16]
 8009166:	2b01      	cmp	r3, #1
 8009168:	dd71      	ble.n	800924e <_strtod_l+0x8de>
 800916a:	4629      	mov	r1, r5
 800916c:	2201      	movs	r2, #1
 800916e:	4620      	mov	r0, r4
 8009170:	f001 ff28 	bl	800afc4 <__lshift>
 8009174:	4631      	mov	r1, r6
 8009176:	4605      	mov	r5, r0
 8009178:	f001 ff94 	bl	800b0a4 <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	dd66      	ble.n	800924e <_strtod_l+0x8de>
 8009180:	9904      	ldr	r1, [sp, #16]
 8009182:	4a53      	ldr	r2, [pc, #332]	; (80092d0 <_strtod_l+0x960>)
 8009184:	465b      	mov	r3, fp
 8009186:	2900      	cmp	r1, #0
 8009188:	f000 8081 	beq.w	800928e <_strtod_l+0x91e>
 800918c:	ea02 010b 	and.w	r1, r2, fp
 8009190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009194:	dc7b      	bgt.n	800928e <_strtod_l+0x91e>
 8009196:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800919a:	f77f aea9 	ble.w	8008ef0 <_strtod_l+0x580>
 800919e:	4b4d      	ldr	r3, [pc, #308]	; (80092d4 <_strtod_l+0x964>)
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	2200      	movs	r2, #0
 80091a6:	f7f7 fa4f 	bl	8000648 <__aeabi_dmul>
 80091aa:	460b      	mov	r3, r1
 80091ac:	4303      	orrs	r3, r0
 80091ae:	bf08      	it	eq
 80091b0:	2322      	moveq	r3, #34	; 0x22
 80091b2:	4682      	mov	sl, r0
 80091b4:	468b      	mov	fp, r1
 80091b6:	bf08      	it	eq
 80091b8:	6023      	streq	r3, [r4, #0]
 80091ba:	e62b      	b.n	8008e14 <_strtod_l+0x4a4>
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	fa02 f303 	lsl.w	r3, r2, r3
 80091c4:	ea03 0a0a 	and.w	sl, r3, sl
 80091c8:	e6e3      	b.n	8008f92 <_strtod_l+0x622>
 80091ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091da:	fa01 f308 	lsl.w	r3, r1, r8
 80091de:	9308      	str	r3, [sp, #32]
 80091e0:	910d      	str	r1, [sp, #52]	; 0x34
 80091e2:	e746      	b.n	8009072 <_strtod_l+0x702>
 80091e4:	2300      	movs	r3, #0
 80091e6:	9308      	str	r3, [sp, #32]
 80091e8:	2301      	movs	r3, #1
 80091ea:	930d      	str	r3, [sp, #52]	; 0x34
 80091ec:	e741      	b.n	8009072 <_strtod_l+0x702>
 80091ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091f0:	4642      	mov	r2, r8
 80091f2:	4620      	mov	r0, r4
 80091f4:	f001 fee6 	bl	800afc4 <__lshift>
 80091f8:	9018      	str	r0, [sp, #96]	; 0x60
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f47f af6b 	bne.w	80090d6 <_strtod_l+0x766>
 8009200:	e5fe      	b.n	8008e00 <_strtod_l+0x490>
 8009202:	465f      	mov	r7, fp
 8009204:	d16e      	bne.n	80092e4 <_strtod_l+0x974>
 8009206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800920c:	b342      	cbz	r2, 8009260 <_strtod_l+0x8f0>
 800920e:	4a32      	ldr	r2, [pc, #200]	; (80092d8 <_strtod_l+0x968>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d128      	bne.n	8009266 <_strtod_l+0x8f6>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	4651      	mov	r1, sl
 8009218:	b1eb      	cbz	r3, 8009256 <_strtod_l+0x8e6>
 800921a:	4b2d      	ldr	r3, [pc, #180]	; (80092d0 <_strtod_l+0x960>)
 800921c:	403b      	ands	r3, r7
 800921e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	d819      	bhi.n	800925c <_strtod_l+0x8ec>
 8009228:	0d1b      	lsrs	r3, r3, #20
 800922a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800922e:	fa02 f303 	lsl.w	r3, r2, r3
 8009232:	4299      	cmp	r1, r3
 8009234:	d117      	bne.n	8009266 <_strtod_l+0x8f6>
 8009236:	4b29      	ldr	r3, [pc, #164]	; (80092dc <_strtod_l+0x96c>)
 8009238:	429f      	cmp	r7, r3
 800923a:	d102      	bne.n	8009242 <_strtod_l+0x8d2>
 800923c:	3101      	adds	r1, #1
 800923e:	f43f addf 	beq.w	8008e00 <_strtod_l+0x490>
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <_strtod_l+0x960>)
 8009244:	403b      	ands	r3, r7
 8009246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800924a:	f04f 0a00 	mov.w	sl, #0
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1a4      	bne.n	800919e <_strtod_l+0x82e>
 8009254:	e5de      	b.n	8008e14 <_strtod_l+0x4a4>
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
 800925a:	e7ea      	b.n	8009232 <_strtod_l+0x8c2>
 800925c:	4613      	mov	r3, r2
 800925e:	e7e8      	b.n	8009232 <_strtod_l+0x8c2>
 8009260:	ea53 030a 	orrs.w	r3, r3, sl
 8009264:	d08c      	beq.n	8009180 <_strtod_l+0x810>
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	b1db      	cbz	r3, 80092a2 <_strtod_l+0x932>
 800926a:	423b      	tst	r3, r7
 800926c:	d0ef      	beq.n	800924e <_strtod_l+0x8de>
 800926e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	4650      	mov	r0, sl
 8009274:	4659      	mov	r1, fp
 8009276:	b1c3      	cbz	r3, 80092aa <_strtod_l+0x93a>
 8009278:	f7ff fb5d 	bl	8008936 <sulp>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	ec51 0b18 	vmov	r0, r1, d8
 8009284:	f7f7 f82a 	bl	80002dc <__adddf3>
 8009288:	4682      	mov	sl, r0
 800928a:	468b      	mov	fp, r1
 800928c:	e7df      	b.n	800924e <_strtod_l+0x8de>
 800928e:	4013      	ands	r3, r2
 8009290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800929c:	f04f 3aff 	mov.w	sl, #4294967295
 80092a0:	e7d5      	b.n	800924e <_strtod_l+0x8de>
 80092a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a4:	ea13 0f0a 	tst.w	r3, sl
 80092a8:	e7e0      	b.n	800926c <_strtod_l+0x8fc>
 80092aa:	f7ff fb44 	bl	8008936 <sulp>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	ec51 0b18 	vmov	r0, r1, d8
 80092b6:	f7f7 f80f 	bl	80002d8 <__aeabi_dsub>
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4682      	mov	sl, r0
 80092c0:	468b      	mov	fp, r1
 80092c2:	f7f7 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d0c1      	beq.n	800924e <_strtod_l+0x8de>
 80092ca:	e611      	b.n	8008ef0 <_strtod_l+0x580>
 80092cc:	fffffc02 	.word	0xfffffc02
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	39500000 	.word	0x39500000
 80092d8:	000fffff 	.word	0x000fffff
 80092dc:	7fefffff 	.word	0x7fefffff
 80092e0:	0800cd30 	.word	0x0800cd30
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	f002 f85a 	bl	800b3a0 <__ratio>
 80092ec:	ec59 8b10 	vmov	r8, r9, d0
 80092f0:	ee10 0a10 	vmov	r0, s0
 80092f4:	2200      	movs	r2, #0
 80092f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092fa:	4649      	mov	r1, r9
 80092fc:	f7f7 fc20 	bl	8000b40 <__aeabi_dcmple>
 8009300:	2800      	cmp	r0, #0
 8009302:	d07a      	beq.n	80093fa <_strtod_l+0xa8a>
 8009304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d04a      	beq.n	80093a0 <_strtod_l+0xa30>
 800930a:	4b95      	ldr	r3, [pc, #596]	; (8009560 <_strtod_l+0xbf0>)
 800930c:	2200      	movs	r2, #0
 800930e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009312:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009560 <_strtod_l+0xbf0>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	4b92      	ldr	r3, [pc, #584]	; (8009564 <_strtod_l+0xbf4>)
 800931c:	403b      	ands	r3, r7
 800931e:	930d      	str	r3, [sp, #52]	; 0x34
 8009320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009322:	4b91      	ldr	r3, [pc, #580]	; (8009568 <_strtod_l+0xbf8>)
 8009324:	429a      	cmp	r2, r3
 8009326:	f040 80b0 	bne.w	800948a <_strtod_l+0xb1a>
 800932a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800932e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009332:	ec4b ab10 	vmov	d0, sl, fp
 8009336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800933a:	f001 ff59 	bl	800b1f0 <__ulp>
 800933e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009342:	ec53 2b10 	vmov	r2, r3, d0
 8009346:	f7f7 f97f 	bl	8000648 <__aeabi_dmul>
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	f7f6 ffc5 	bl	80002dc <__adddf3>
 8009352:	460b      	mov	r3, r1
 8009354:	4983      	ldr	r1, [pc, #524]	; (8009564 <_strtod_l+0xbf4>)
 8009356:	4a85      	ldr	r2, [pc, #532]	; (800956c <_strtod_l+0xbfc>)
 8009358:	4019      	ands	r1, r3
 800935a:	4291      	cmp	r1, r2
 800935c:	4682      	mov	sl, r0
 800935e:	d960      	bls.n	8009422 <_strtod_l+0xab2>
 8009360:	ee18 3a90 	vmov	r3, s17
 8009364:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009368:	4293      	cmp	r3, r2
 800936a:	d104      	bne.n	8009376 <_strtod_l+0xa06>
 800936c:	ee18 3a10 	vmov	r3, s16
 8009370:	3301      	adds	r3, #1
 8009372:	f43f ad45 	beq.w	8008e00 <_strtod_l+0x490>
 8009376:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009578 <_strtod_l+0xc08>
 800937a:	f04f 3aff 	mov.w	sl, #4294967295
 800937e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009380:	4620      	mov	r0, r4
 8009382:	f001 fc03 	bl	800ab8c <_Bfree>
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	4620      	mov	r0, r4
 800938a:	f001 fbff 	bl	800ab8c <_Bfree>
 800938e:	4631      	mov	r1, r6
 8009390:	4620      	mov	r0, r4
 8009392:	f001 fbfb 	bl	800ab8c <_Bfree>
 8009396:	4629      	mov	r1, r5
 8009398:	4620      	mov	r0, r4
 800939a:	f001 fbf7 	bl	800ab8c <_Bfree>
 800939e:	e61a      	b.n	8008fd6 <_strtod_l+0x666>
 80093a0:	f1ba 0f00 	cmp.w	sl, #0
 80093a4:	d11b      	bne.n	80093de <_strtod_l+0xa6e>
 80093a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093aa:	b9f3      	cbnz	r3, 80093ea <_strtod_l+0xa7a>
 80093ac:	4b6c      	ldr	r3, [pc, #432]	; (8009560 <_strtod_l+0xbf0>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f7 fbba 	bl	8000b2c <__aeabi_dcmplt>
 80093b8:	b9d0      	cbnz	r0, 80093f0 <_strtod_l+0xa80>
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	4b6c      	ldr	r3, [pc, #432]	; (8009570 <_strtod_l+0xc00>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f941 	bl	8000648 <__aeabi_dmul>
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80093d2:	9315      	str	r3, [sp, #84]	; 0x54
 80093d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80093d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093dc:	e79d      	b.n	800931a <_strtod_l+0x9aa>
 80093de:	f1ba 0f01 	cmp.w	sl, #1
 80093e2:	d102      	bne.n	80093ea <_strtod_l+0xa7a>
 80093e4:	2f00      	cmp	r7, #0
 80093e6:	f43f ad83 	beq.w	8008ef0 <_strtod_l+0x580>
 80093ea:	4b62      	ldr	r3, [pc, #392]	; (8009574 <_strtod_l+0xc04>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	e78e      	b.n	800930e <_strtod_l+0x99e>
 80093f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009570 <_strtod_l+0xc00>
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	e7e7      	b.n	80093ca <_strtod_l+0xa5a>
 80093fa:	4b5d      	ldr	r3, [pc, #372]	; (8009570 <_strtod_l+0xc00>)
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f921 	bl	8000648 <__aeabi_dmul>
 8009406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009408:	4680      	mov	r8, r0
 800940a:	4689      	mov	r9, r1
 800940c:	b933      	cbnz	r3, 800941c <_strtod_l+0xaac>
 800940e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009412:	900e      	str	r0, [sp, #56]	; 0x38
 8009414:	930f      	str	r3, [sp, #60]	; 0x3c
 8009416:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800941a:	e7dd      	b.n	80093d8 <_strtod_l+0xa68>
 800941c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009420:	e7f9      	b.n	8009416 <_strtod_l+0xaa6>
 8009422:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1a8      	bne.n	800937e <_strtod_l+0xa0e>
 800942c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009432:	0d1b      	lsrs	r3, r3, #20
 8009434:	051b      	lsls	r3, r3, #20
 8009436:	429a      	cmp	r2, r3
 8009438:	d1a1      	bne.n	800937e <_strtod_l+0xa0e>
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 fc63 	bl	8000d08 <__aeabi_d2lz>
 8009442:	f7f7 f8d3 	bl	80005ec <__aeabi_l2d>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f6 ff43 	bl	80002d8 <__aeabi_dsub>
 8009452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009458:	ea43 030a 	orr.w	r3, r3, sl
 800945c:	4313      	orrs	r3, r2
 800945e:	4680      	mov	r8, r0
 8009460:	4689      	mov	r9, r1
 8009462:	d055      	beq.n	8009510 <_strtod_l+0xba0>
 8009464:	a336      	add	r3, pc, #216	; (adr r3, 8009540 <_strtod_l+0xbd0>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f7 fb5f 	bl	8000b2c <__aeabi_dcmplt>
 800946e:	2800      	cmp	r0, #0
 8009470:	f47f acd0 	bne.w	8008e14 <_strtod_l+0x4a4>
 8009474:	a334      	add	r3, pc, #208	; (adr r3, 8009548 <_strtod_l+0xbd8>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 fb73 	bl	8000b68 <__aeabi_dcmpgt>
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f af7b 	beq.w	800937e <_strtod_l+0xa0e>
 8009488:	e4c4      	b.n	8008e14 <_strtod_l+0x4a4>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	b333      	cbz	r3, 80094dc <_strtod_l+0xb6c>
 800948e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009490:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009494:	d822      	bhi.n	80094dc <_strtod_l+0xb6c>
 8009496:	a32e      	add	r3, pc, #184	; (adr r3, 8009550 <_strtod_l+0xbe0>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	4640      	mov	r0, r8
 800949e:	4649      	mov	r1, r9
 80094a0:	f7f7 fb4e 	bl	8000b40 <__aeabi_dcmple>
 80094a4:	b1a0      	cbz	r0, 80094d0 <_strtod_l+0xb60>
 80094a6:	4649      	mov	r1, r9
 80094a8:	4640      	mov	r0, r8
 80094aa:	f7f7 fba5 	bl	8000bf8 <__aeabi_d2uiz>
 80094ae:	2801      	cmp	r0, #1
 80094b0:	bf38      	it	cc
 80094b2:	2001      	movcc	r0, #1
 80094b4:	f7f7 f84e 	bl	8000554 <__aeabi_ui2d>
 80094b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	bb23      	cbnz	r3, 800950a <_strtod_l+0xb9a>
 80094c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094c4:	9010      	str	r0, [sp, #64]	; 0x40
 80094c6:	9311      	str	r3, [sp, #68]	; 0x44
 80094c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094e0:	eeb0 0a48 	vmov.f32	s0, s16
 80094e4:	eef0 0a68 	vmov.f32	s1, s17
 80094e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094ec:	f001 fe80 	bl	800b1f0 <__ulp>
 80094f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094f4:	ec53 2b10 	vmov	r2, r3, d0
 80094f8:	f7f7 f8a6 	bl	8000648 <__aeabi_dmul>
 80094fc:	ec53 2b18 	vmov	r2, r3, d8
 8009500:	f7f6 feec 	bl	80002dc <__adddf3>
 8009504:	4682      	mov	sl, r0
 8009506:	468b      	mov	fp, r1
 8009508:	e78d      	b.n	8009426 <_strtod_l+0xab6>
 800950a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800950e:	e7db      	b.n	80094c8 <_strtod_l+0xb58>
 8009510:	a311      	add	r3, pc, #68	; (adr r3, 8009558 <_strtod_l+0xbe8>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f7 fb09 	bl	8000b2c <__aeabi_dcmplt>
 800951a:	e7b2      	b.n	8009482 <_strtod_l+0xb12>
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	f7ff ba6b 	b.w	8008a00 <_strtod_l+0x90>
 800952a:	2a65      	cmp	r2, #101	; 0x65
 800952c:	f43f ab5f 	beq.w	8008bee <_strtod_l+0x27e>
 8009530:	2a45      	cmp	r2, #69	; 0x45
 8009532:	f43f ab5c 	beq.w	8008bee <_strtod_l+0x27e>
 8009536:	2301      	movs	r3, #1
 8009538:	f7ff bb94 	b.w	8008c64 <_strtod_l+0x2f4>
 800953c:	f3af 8000 	nop.w
 8009540:	94a03595 	.word	0x94a03595
 8009544:	3fdfffff 	.word	0x3fdfffff
 8009548:	35afe535 	.word	0x35afe535
 800954c:	3fe00000 	.word	0x3fe00000
 8009550:	ffc00000 	.word	0xffc00000
 8009554:	41dfffff 	.word	0x41dfffff
 8009558:	94a03595 	.word	0x94a03595
 800955c:	3fcfffff 	.word	0x3fcfffff
 8009560:	3ff00000 	.word	0x3ff00000
 8009564:	7ff00000 	.word	0x7ff00000
 8009568:	7fe00000 	.word	0x7fe00000
 800956c:	7c9fffff 	.word	0x7c9fffff
 8009570:	3fe00000 	.word	0x3fe00000
 8009574:	bff00000 	.word	0xbff00000
 8009578:	7fefffff 	.word	0x7fefffff

0800957c <_strtod_r>:
 800957c:	4b01      	ldr	r3, [pc, #4]	; (8009584 <_strtod_r+0x8>)
 800957e:	f7ff b9f7 	b.w	8008970 <_strtod_l>
 8009582:	bf00      	nop
 8009584:	20000078 	.word	0x20000078

08009588 <_strtol_l.constprop.0>:
 8009588:	2b01      	cmp	r3, #1
 800958a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800958e:	d001      	beq.n	8009594 <_strtol_l.constprop.0+0xc>
 8009590:	2b24      	cmp	r3, #36	; 0x24
 8009592:	d906      	bls.n	80095a2 <_strtol_l.constprop.0+0x1a>
 8009594:	f7fe fa7e 	bl	8007a94 <__errno>
 8009598:	2316      	movs	r3, #22
 800959a:	6003      	str	r3, [r0, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009688 <_strtol_l.constprop.0+0x100>
 80095a6:	460d      	mov	r5, r1
 80095a8:	462e      	mov	r6, r5
 80095aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80095b2:	f017 0708 	ands.w	r7, r7, #8
 80095b6:	d1f7      	bne.n	80095a8 <_strtol_l.constprop.0+0x20>
 80095b8:	2c2d      	cmp	r4, #45	; 0x2d
 80095ba:	d132      	bne.n	8009622 <_strtol_l.constprop.0+0x9a>
 80095bc:	782c      	ldrb	r4, [r5, #0]
 80095be:	2701      	movs	r7, #1
 80095c0:	1cb5      	adds	r5, r6, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d05b      	beq.n	800967e <_strtol_l.constprop.0+0xf6>
 80095c6:	2b10      	cmp	r3, #16
 80095c8:	d109      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 80095ca:	2c30      	cmp	r4, #48	; 0x30
 80095cc:	d107      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 80095ce:	782c      	ldrb	r4, [r5, #0]
 80095d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095d4:	2c58      	cmp	r4, #88	; 0x58
 80095d6:	d14d      	bne.n	8009674 <_strtol_l.constprop.0+0xec>
 80095d8:	786c      	ldrb	r4, [r5, #1]
 80095da:	2310      	movs	r3, #16
 80095dc:	3502      	adds	r5, #2
 80095de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80095e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80095e6:	f04f 0c00 	mov.w	ip, #0
 80095ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80095ee:	4666      	mov	r6, ip
 80095f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80095f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80095f8:	f1be 0f09 	cmp.w	lr, #9
 80095fc:	d816      	bhi.n	800962c <_strtol_l.constprop.0+0xa4>
 80095fe:	4674      	mov	r4, lr
 8009600:	42a3      	cmp	r3, r4
 8009602:	dd24      	ble.n	800964e <_strtol_l.constprop.0+0xc6>
 8009604:	f1bc 0f00 	cmp.w	ip, #0
 8009608:	db1e      	blt.n	8009648 <_strtol_l.constprop.0+0xc0>
 800960a:	45b1      	cmp	r9, r6
 800960c:	d31c      	bcc.n	8009648 <_strtol_l.constprop.0+0xc0>
 800960e:	d101      	bne.n	8009614 <_strtol_l.constprop.0+0x8c>
 8009610:	45a2      	cmp	sl, r4
 8009612:	db19      	blt.n	8009648 <_strtol_l.constprop.0+0xc0>
 8009614:	fb06 4603 	mla	r6, r6, r3, r4
 8009618:	f04f 0c01 	mov.w	ip, #1
 800961c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009620:	e7e8      	b.n	80095f4 <_strtol_l.constprop.0+0x6c>
 8009622:	2c2b      	cmp	r4, #43	; 0x2b
 8009624:	bf04      	itt	eq
 8009626:	782c      	ldrbeq	r4, [r5, #0]
 8009628:	1cb5      	addeq	r5, r6, #2
 800962a:	e7ca      	b.n	80095c2 <_strtol_l.constprop.0+0x3a>
 800962c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009630:	f1be 0f19 	cmp.w	lr, #25
 8009634:	d801      	bhi.n	800963a <_strtol_l.constprop.0+0xb2>
 8009636:	3c37      	subs	r4, #55	; 0x37
 8009638:	e7e2      	b.n	8009600 <_strtol_l.constprop.0+0x78>
 800963a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800963e:	f1be 0f19 	cmp.w	lr, #25
 8009642:	d804      	bhi.n	800964e <_strtol_l.constprop.0+0xc6>
 8009644:	3c57      	subs	r4, #87	; 0x57
 8009646:	e7db      	b.n	8009600 <_strtol_l.constprop.0+0x78>
 8009648:	f04f 3cff 	mov.w	ip, #4294967295
 800964c:	e7e6      	b.n	800961c <_strtol_l.constprop.0+0x94>
 800964e:	f1bc 0f00 	cmp.w	ip, #0
 8009652:	da05      	bge.n	8009660 <_strtol_l.constprop.0+0xd8>
 8009654:	2322      	movs	r3, #34	; 0x22
 8009656:	6003      	str	r3, [r0, #0]
 8009658:	4646      	mov	r6, r8
 800965a:	b942      	cbnz	r2, 800966e <_strtol_l.constprop.0+0xe6>
 800965c:	4630      	mov	r0, r6
 800965e:	e79e      	b.n	800959e <_strtol_l.constprop.0+0x16>
 8009660:	b107      	cbz	r7, 8009664 <_strtol_l.constprop.0+0xdc>
 8009662:	4276      	negs	r6, r6
 8009664:	2a00      	cmp	r2, #0
 8009666:	d0f9      	beq.n	800965c <_strtol_l.constprop.0+0xd4>
 8009668:	f1bc 0f00 	cmp.w	ip, #0
 800966c:	d000      	beq.n	8009670 <_strtol_l.constprop.0+0xe8>
 800966e:	1e69      	subs	r1, r5, #1
 8009670:	6011      	str	r1, [r2, #0]
 8009672:	e7f3      	b.n	800965c <_strtol_l.constprop.0+0xd4>
 8009674:	2430      	movs	r4, #48	; 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1b1      	bne.n	80095de <_strtol_l.constprop.0+0x56>
 800967a:	2308      	movs	r3, #8
 800967c:	e7af      	b.n	80095de <_strtol_l.constprop.0+0x56>
 800967e:	2c30      	cmp	r4, #48	; 0x30
 8009680:	d0a5      	beq.n	80095ce <_strtol_l.constprop.0+0x46>
 8009682:	230a      	movs	r3, #10
 8009684:	e7ab      	b.n	80095de <_strtol_l.constprop.0+0x56>
 8009686:	bf00      	nop
 8009688:	0800cd59 	.word	0x0800cd59

0800968c <_strtol_r>:
 800968c:	f7ff bf7c 	b.w	8009588 <_strtol_l.constprop.0>

08009690 <_write_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_write_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f8 fb17 	bl	8001cd2 <_write>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_write_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_write_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000714 	.word	0x20000714

080096b4 <_close_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_close_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f8 fb23 	bl	8001d0a <_close>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_close_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_close_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20000714 	.word	0x20000714

080096d4 <quorem>:
 80096d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	6903      	ldr	r3, [r0, #16]
 80096da:	690c      	ldr	r4, [r1, #16]
 80096dc:	42a3      	cmp	r3, r4
 80096de:	4607      	mov	r7, r0
 80096e0:	f2c0 8081 	blt.w	80097e6 <quorem+0x112>
 80096e4:	3c01      	subs	r4, #1
 80096e6:	f101 0814 	add.w	r8, r1, #20
 80096ea:	f100 0514 	add.w	r5, r0, #20
 80096ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096fc:	3301      	adds	r3, #1
 80096fe:	429a      	cmp	r2, r3
 8009700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009708:	fbb2 f6f3 	udiv	r6, r2, r3
 800970c:	d331      	bcc.n	8009772 <quorem+0x9e>
 800970e:	f04f 0e00 	mov.w	lr, #0
 8009712:	4640      	mov	r0, r8
 8009714:	46ac      	mov	ip, r5
 8009716:	46f2      	mov	sl, lr
 8009718:	f850 2b04 	ldr.w	r2, [r0], #4
 800971c:	b293      	uxth	r3, r2
 800971e:	fb06 e303 	mla	r3, r6, r3, lr
 8009722:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009726:	b29b      	uxth	r3, r3
 8009728:	ebaa 0303 	sub.w	r3, sl, r3
 800972c:	f8dc a000 	ldr.w	sl, [ip]
 8009730:	0c12      	lsrs	r2, r2, #16
 8009732:	fa13 f38a 	uxtah	r3, r3, sl
 8009736:	fb06 e202 	mla	r2, r6, r2, lr
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009742:	b292      	uxth	r2, r2
 8009744:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800974c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009750:	4581      	cmp	r9, r0
 8009752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009756:	f84c 3b04 	str.w	r3, [ip], #4
 800975a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800975e:	d2db      	bcs.n	8009718 <quorem+0x44>
 8009760:	f855 300b 	ldr.w	r3, [r5, fp]
 8009764:	b92b      	cbnz	r3, 8009772 <quorem+0x9e>
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	3b04      	subs	r3, #4
 800976a:	429d      	cmp	r5, r3
 800976c:	461a      	mov	r2, r3
 800976e:	d32e      	bcc.n	80097ce <quorem+0xfa>
 8009770:	613c      	str	r4, [r7, #16]
 8009772:	4638      	mov	r0, r7
 8009774:	f001 fc96 	bl	800b0a4 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	db24      	blt.n	80097c6 <quorem+0xf2>
 800977c:	3601      	adds	r6, #1
 800977e:	4628      	mov	r0, r5
 8009780:	f04f 0c00 	mov.w	ip, #0
 8009784:	f858 2b04 	ldr.w	r2, [r8], #4
 8009788:	f8d0 e000 	ldr.w	lr, [r0]
 800978c:	b293      	uxth	r3, r2
 800978e:	ebac 0303 	sub.w	r3, ip, r3
 8009792:	0c12      	lsrs	r2, r2, #16
 8009794:	fa13 f38e 	uxtah	r3, r3, lr
 8009798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800979c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a6:	45c1      	cmp	r9, r8
 80097a8:	f840 3b04 	str.w	r3, [r0], #4
 80097ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097b0:	d2e8      	bcs.n	8009784 <quorem+0xb0>
 80097b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ba:	b922      	cbnz	r2, 80097c6 <quorem+0xf2>
 80097bc:	3b04      	subs	r3, #4
 80097be:	429d      	cmp	r5, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	d30a      	bcc.n	80097da <quorem+0x106>
 80097c4:	613c      	str	r4, [r7, #16]
 80097c6:	4630      	mov	r0, r6
 80097c8:	b003      	add	sp, #12
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	6812      	ldr	r2, [r2, #0]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1cc      	bne.n	8009770 <quorem+0x9c>
 80097d6:	3c01      	subs	r4, #1
 80097d8:	e7c7      	b.n	800976a <quorem+0x96>
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	3b04      	subs	r3, #4
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1f0      	bne.n	80097c4 <quorem+0xf0>
 80097e2:	3c01      	subs	r4, #1
 80097e4:	e7eb      	b.n	80097be <quorem+0xea>
 80097e6:	2000      	movs	r0, #0
 80097e8:	e7ee      	b.n	80097c8 <quorem+0xf4>
 80097ea:	0000      	movs	r0, r0
 80097ec:	0000      	movs	r0, r0
	...

080097f0 <_dtoa_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ed2d 8b04 	vpush	{d8-d9}
 80097f8:	ec57 6b10 	vmov	r6, r7, d0
 80097fc:	b093      	sub	sp, #76	; 0x4c
 80097fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009804:	9106      	str	r1, [sp, #24]
 8009806:	ee10 aa10 	vmov	sl, s0
 800980a:	4604      	mov	r4, r0
 800980c:	9209      	str	r2, [sp, #36]	; 0x24
 800980e:	930c      	str	r3, [sp, #48]	; 0x30
 8009810:	46bb      	mov	fp, r7
 8009812:	b975      	cbnz	r5, 8009832 <_dtoa_r+0x42>
 8009814:	2010      	movs	r0, #16
 8009816:	f001 f95f 	bl	800aad8 <malloc>
 800981a:	4602      	mov	r2, r0
 800981c:	6260      	str	r0, [r4, #36]	; 0x24
 800981e:	b920      	cbnz	r0, 800982a <_dtoa_r+0x3a>
 8009820:	4ba7      	ldr	r3, [pc, #668]	; (8009ac0 <_dtoa_r+0x2d0>)
 8009822:	21ea      	movs	r1, #234	; 0xea
 8009824:	48a7      	ldr	r0, [pc, #668]	; (8009ac4 <_dtoa_r+0x2d4>)
 8009826:	f002 fcdb 	bl	800c1e0 <__assert_func>
 800982a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800982e:	6005      	str	r5, [r0, #0]
 8009830:	60c5      	str	r5, [r0, #12]
 8009832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009834:	6819      	ldr	r1, [r3, #0]
 8009836:	b151      	cbz	r1, 800984e <_dtoa_r+0x5e>
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	604a      	str	r2, [r1, #4]
 800983c:	2301      	movs	r3, #1
 800983e:	4093      	lsls	r3, r2
 8009840:	608b      	str	r3, [r1, #8]
 8009842:	4620      	mov	r0, r4
 8009844:	f001 f9a2 	bl	800ab8c <_Bfree>
 8009848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	1e3b      	subs	r3, r7, #0
 8009850:	bfaa      	itet	ge
 8009852:	2300      	movge	r3, #0
 8009854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009858:	f8c8 3000 	strge.w	r3, [r8]
 800985c:	4b9a      	ldr	r3, [pc, #616]	; (8009ac8 <_dtoa_r+0x2d8>)
 800985e:	bfbc      	itt	lt
 8009860:	2201      	movlt	r2, #1
 8009862:	f8c8 2000 	strlt.w	r2, [r8]
 8009866:	ea33 030b 	bics.w	r3, r3, fp
 800986a:	d11b      	bne.n	80098a4 <_dtoa_r+0xb4>
 800986c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009878:	4333      	orrs	r3, r6
 800987a:	f000 8592 	beq.w	800a3a2 <_dtoa_r+0xbb2>
 800987e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009880:	b963      	cbnz	r3, 800989c <_dtoa_r+0xac>
 8009882:	4b92      	ldr	r3, [pc, #584]	; (8009acc <_dtoa_r+0x2dc>)
 8009884:	e022      	b.n	80098cc <_dtoa_r+0xdc>
 8009886:	4b92      	ldr	r3, [pc, #584]	; (8009ad0 <_dtoa_r+0x2e0>)
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	3308      	adds	r3, #8
 800988c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	9801      	ldr	r0, [sp, #4]
 8009892:	b013      	add	sp, #76	; 0x4c
 8009894:	ecbd 8b04 	vpop	{d8-d9}
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	4b8b      	ldr	r3, [pc, #556]	; (8009acc <_dtoa_r+0x2dc>)
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	3303      	adds	r3, #3
 80098a2:	e7f3      	b.n	800988c <_dtoa_r+0x9c>
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4650      	mov	r0, sl
 80098aa:	4659      	mov	r1, fp
 80098ac:	f7f7 f934 	bl	8000b18 <__aeabi_dcmpeq>
 80098b0:	ec4b ab19 	vmov	d9, sl, fp
 80098b4:	4680      	mov	r8, r0
 80098b6:	b158      	cbz	r0, 80098d0 <_dtoa_r+0xe0>
 80098b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ba:	2301      	movs	r3, #1
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 856b 	beq.w	800a39c <_dtoa_r+0xbac>
 80098c6:	4883      	ldr	r0, [pc, #524]	; (8009ad4 <_dtoa_r+0x2e4>)
 80098c8:	6018      	str	r0, [r3, #0]
 80098ca:	1e43      	subs	r3, r0, #1
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	e7df      	b.n	8009890 <_dtoa_r+0xa0>
 80098d0:	ec4b ab10 	vmov	d0, sl, fp
 80098d4:	aa10      	add	r2, sp, #64	; 0x40
 80098d6:	a911      	add	r1, sp, #68	; 0x44
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 fd05 	bl	800b2e8 <__d2b>
 80098de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098e2:	ee08 0a10 	vmov	s16, r0
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f000 8084 	beq.w	80099f4 <_dtoa_r+0x204>
 80098ec:	ee19 3a90 	vmov	r3, s19
 80098f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098f8:	4656      	mov	r6, sl
 80098fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009906:	4b74      	ldr	r3, [pc, #464]	; (8009ad8 <_dtoa_r+0x2e8>)
 8009908:	2200      	movs	r2, #0
 800990a:	4630      	mov	r0, r6
 800990c:	4639      	mov	r1, r7
 800990e:	f7f6 fce3 	bl	80002d8 <__aeabi_dsub>
 8009912:	a365      	add	r3, pc, #404	; (adr r3, 8009aa8 <_dtoa_r+0x2b8>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fe96 	bl	8000648 <__aeabi_dmul>
 800991c:	a364      	add	r3, pc, #400	; (adr r3, 8009ab0 <_dtoa_r+0x2c0>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fcdb 	bl	80002dc <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	4628      	mov	r0, r5
 800992a:	460f      	mov	r7, r1
 800992c:	f7f6 fe22 	bl	8000574 <__aeabi_i2d>
 8009930:	a361      	add	r3, pc, #388	; (adr r3, 8009ab8 <_dtoa_r+0x2c8>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fccb 	bl	80002dc <__adddf3>
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	f7f7 f92d 	bl	8000ba8 <__aeabi_d2iz>
 800994e:	2200      	movs	r2, #0
 8009950:	9000      	str	r0, [sp, #0]
 8009952:	2300      	movs	r3, #0
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f7 f8e8 	bl	8000b2c <__aeabi_dcmplt>
 800995c:	b150      	cbz	r0, 8009974 <_dtoa_r+0x184>
 800995e:	9800      	ldr	r0, [sp, #0]
 8009960:	f7f6 fe08 	bl	8000574 <__aeabi_i2d>
 8009964:	4632      	mov	r2, r6
 8009966:	463b      	mov	r3, r7
 8009968:	f7f7 f8d6 	bl	8000b18 <__aeabi_dcmpeq>
 800996c:	b910      	cbnz	r0, 8009974 <_dtoa_r+0x184>
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	2b16      	cmp	r3, #22
 8009978:	d85a      	bhi.n	8009a30 <_dtoa_r+0x240>
 800997a:	9a00      	ldr	r2, [sp, #0]
 800997c:	4b57      	ldr	r3, [pc, #348]	; (8009adc <_dtoa_r+0x2ec>)
 800997e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	ec51 0b19 	vmov	r0, r1, d9
 800998a:	f7f7 f8cf 	bl	8000b2c <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d050      	beq.n	8009a34 <_dtoa_r+0x244>
 8009992:	9b00      	ldr	r3, [sp, #0]
 8009994:	3b01      	subs	r3, #1
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	930b      	str	r3, [sp, #44]	; 0x2c
 800999c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800999e:	1b5d      	subs	r5, r3, r5
 80099a0:	1e6b      	subs	r3, r5, #1
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	bf45      	ittet	mi
 80099a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80099aa:	9304      	strmi	r3, [sp, #16]
 80099ac:	2300      	movpl	r3, #0
 80099ae:	2300      	movmi	r3, #0
 80099b0:	bf4c      	ite	mi
 80099b2:	9305      	strmi	r3, [sp, #20]
 80099b4:	9304      	strpl	r3, [sp, #16]
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db3d      	blt.n	8009a38 <_dtoa_r+0x248>
 80099bc:	9b05      	ldr	r3, [sp, #20]
 80099be:	9a00      	ldr	r2, [sp, #0]
 80099c0:	920a      	str	r2, [sp, #40]	; 0x28
 80099c2:	4413      	add	r3, r2
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	2300      	movs	r3, #0
 80099c8:	9307      	str	r3, [sp, #28]
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	f200 8089 	bhi.w	8009ae4 <_dtoa_r+0x2f4>
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	bfc4      	itt	gt
 80099d6:	3b04      	subgt	r3, #4
 80099d8:	9306      	strgt	r3, [sp, #24]
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	f1a3 0302 	sub.w	r3, r3, #2
 80099e0:	bfcc      	ite	gt
 80099e2:	2500      	movgt	r5, #0
 80099e4:	2501      	movle	r5, #1
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	f200 8087 	bhi.w	8009afa <_dtoa_r+0x30a>
 80099ec:	e8df f003 	tbb	[pc, r3]
 80099f0:	59383a2d 	.word	0x59383a2d
 80099f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099f8:	441d      	add	r5, r3
 80099fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	bfc1      	itttt	gt
 8009a02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a12:	bfda      	itte	le
 8009a14:	f1c3 0320 	rsble	r3, r3, #32
 8009a18:	fa06 f003 	lslle.w	r0, r6, r3
 8009a1c:	4318      	orrgt	r0, r3
 8009a1e:	f7f6 fd99 	bl	8000554 <__aeabi_ui2d>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4606      	mov	r6, r0
 8009a26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a2a:	3d01      	subs	r5, #1
 8009a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a2e:	e76a      	b.n	8009906 <_dtoa_r+0x116>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e7b2      	b.n	800999a <_dtoa_r+0x1aa>
 8009a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a36:	e7b1      	b.n	800999c <_dtoa_r+0x1ac>
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	9a00      	ldr	r2, [sp, #0]
 8009a3c:	1a9b      	subs	r3, r3, r2
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	4253      	negs	r3, r2
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	2300      	movs	r3, #0
 8009a46:	930a      	str	r3, [sp, #40]	; 0x28
 8009a48:	e7bf      	b.n	80099ca <_dtoa_r+0x1da>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9308      	str	r3, [sp, #32]
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dc55      	bgt.n	8009b00 <_dtoa_r+0x310>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5e:	e00c      	b.n	8009a7a <_dtoa_r+0x28a>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f3      	b.n	8009a4c <_dtoa_r+0x25c>
 8009a64:	2300      	movs	r3, #0
 8009a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	3301      	adds	r3, #1
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	bfb8      	it	lt
 8009a78:	2301      	movlt	r3, #1
 8009a7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	6042      	str	r2, [r0, #4]
 8009a80:	2204      	movs	r2, #4
 8009a82:	f102 0614 	add.w	r6, r2, #20
 8009a86:	429e      	cmp	r6, r3
 8009a88:	6841      	ldr	r1, [r0, #4]
 8009a8a:	d93d      	bls.n	8009b08 <_dtoa_r+0x318>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f001 f83d 	bl	800ab0c <_Balloc>
 8009a92:	9001      	str	r0, [sp, #4]
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d13b      	bne.n	8009b10 <_dtoa_r+0x320>
 8009a98:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <_dtoa_r+0x2f0>)
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aa0:	e6c0      	b.n	8009824 <_dtoa_r+0x34>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7df      	b.n	8009a66 <_dtoa_r+0x276>
 8009aa6:	bf00      	nop
 8009aa8:	636f4361 	.word	0x636f4361
 8009aac:	3fd287a7 	.word	0x3fd287a7
 8009ab0:	8b60c8b3 	.word	0x8b60c8b3
 8009ab4:	3fc68a28 	.word	0x3fc68a28
 8009ab8:	509f79fb 	.word	0x509f79fb
 8009abc:	3fd34413 	.word	0x3fd34413
 8009ac0:	0800ce66 	.word	0x0800ce66
 8009ac4:	0800ce7d 	.word	0x0800ce7d
 8009ac8:	7ff00000 	.word	0x7ff00000
 8009acc:	0800ce62 	.word	0x0800ce62
 8009ad0:	0800ce59 	.word	0x0800ce59
 8009ad4:	0800d0d2 	.word	0x0800d0d2
 8009ad8:	3ff80000 	.word	0x3ff80000
 8009adc:	0800cfe8 	.word	0x0800cfe8
 8009ae0:	0800ced8 	.word	0x0800ced8
 8009ae4:	2501      	movs	r5, #1
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9306      	str	r3, [sp, #24]
 8009aea:	9508      	str	r5, [sp, #32]
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295
 8009af0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	2312      	movs	r3, #18
 8009af8:	e7b0      	b.n	8009a5c <_dtoa_r+0x26c>
 8009afa:	2301      	movs	r3, #1
 8009afc:	9308      	str	r3, [sp, #32]
 8009afe:	e7f5      	b.n	8009aec <_dtoa_r+0x2fc>
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b06:	e7b8      	b.n	8009a7a <_dtoa_r+0x28a>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	6041      	str	r1, [r0, #4]
 8009b0c:	0052      	lsls	r2, r2, #1
 8009b0e:	e7b8      	b.n	8009a82 <_dtoa_r+0x292>
 8009b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b12:	9a01      	ldr	r2, [sp, #4]
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	2b0e      	cmp	r3, #14
 8009b1a:	f200 809d 	bhi.w	8009c58 <_dtoa_r+0x468>
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	f000 809a 	beq.w	8009c58 <_dtoa_r+0x468>
 8009b24:	9b00      	ldr	r3, [sp, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd32      	ble.n	8009b90 <_dtoa_r+0x3a0>
 8009b2a:	4ab7      	ldr	r2, [pc, #732]	; (8009e08 <_dtoa_r+0x618>)
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	05d8      	lsls	r0, r3, #23
 8009b3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b40:	d516      	bpl.n	8009b70 <_dtoa_r+0x380>
 8009b42:	4bb2      	ldr	r3, [pc, #712]	; (8009e0c <_dtoa_r+0x61c>)
 8009b44:	ec51 0b19 	vmov	r0, r1, d9
 8009b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b4c:	f7f6 fea6 	bl	800089c <__aeabi_ddiv>
 8009b50:	f007 070f 	and.w	r7, r7, #15
 8009b54:	4682      	mov	sl, r0
 8009b56:	468b      	mov	fp, r1
 8009b58:	2503      	movs	r5, #3
 8009b5a:	4eac      	ldr	r6, [pc, #688]	; (8009e0c <_dtoa_r+0x61c>)
 8009b5c:	b957      	cbnz	r7, 8009b74 <_dtoa_r+0x384>
 8009b5e:	4642      	mov	r2, r8
 8009b60:	464b      	mov	r3, r9
 8009b62:	4650      	mov	r0, sl
 8009b64:	4659      	mov	r1, fp
 8009b66:	f7f6 fe99 	bl	800089c <__aeabi_ddiv>
 8009b6a:	4682      	mov	sl, r0
 8009b6c:	468b      	mov	fp, r1
 8009b6e:	e028      	b.n	8009bc2 <_dtoa_r+0x3d2>
 8009b70:	2502      	movs	r5, #2
 8009b72:	e7f2      	b.n	8009b5a <_dtoa_r+0x36a>
 8009b74:	07f9      	lsls	r1, r7, #31
 8009b76:	d508      	bpl.n	8009b8a <_dtoa_r+0x39a>
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b80:	f7f6 fd62 	bl	8000648 <__aeabi_dmul>
 8009b84:	3501      	adds	r5, #1
 8009b86:	4680      	mov	r8, r0
 8009b88:	4689      	mov	r9, r1
 8009b8a:	107f      	asrs	r7, r7, #1
 8009b8c:	3608      	adds	r6, #8
 8009b8e:	e7e5      	b.n	8009b5c <_dtoa_r+0x36c>
 8009b90:	f000 809b 	beq.w	8009cca <_dtoa_r+0x4da>
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	4f9d      	ldr	r7, [pc, #628]	; (8009e0c <_dtoa_r+0x61c>)
 8009b98:	425e      	negs	r6, r3
 8009b9a:	4b9b      	ldr	r3, [pc, #620]	; (8009e08 <_dtoa_r+0x618>)
 8009b9c:	f006 020f 	and.w	r2, r6, #15
 8009ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	ec51 0b19 	vmov	r0, r1, d9
 8009bac:	f7f6 fd4c 	bl	8000648 <__aeabi_dmul>
 8009bb0:	1136      	asrs	r6, r6, #4
 8009bb2:	4682      	mov	sl, r0
 8009bb4:	468b      	mov	fp, r1
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2502      	movs	r5, #2
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	d17a      	bne.n	8009cb4 <_dtoa_r+0x4c4>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1d3      	bne.n	8009b6a <_dtoa_r+0x37a>
 8009bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8082 	beq.w	8009cce <_dtoa_r+0x4de>
 8009bca:	4b91      	ldr	r3, [pc, #580]	; (8009e10 <_dtoa_r+0x620>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4650      	mov	r0, sl
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	f7f6 ffab 	bl	8000b2c <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d079      	beq.n	8009cce <_dtoa_r+0x4de>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d076      	beq.n	8009cce <_dtoa_r+0x4de>
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dd36      	ble.n	8009c54 <_dtoa_r+0x464>
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	1e5f      	subs	r7, r3, #1
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b88      	ldr	r3, [pc, #544]	; (8009e14 <_dtoa_r+0x624>)
 8009bf2:	f7f6 fd29 	bl	8000648 <__aeabi_dmul>
 8009bf6:	9e02      	ldr	r6, [sp, #8]
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	468b      	mov	fp, r1
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7f6 fcb8 	bl	8000574 <__aeabi_i2d>
 8009c04:	4652      	mov	r2, sl
 8009c06:	465b      	mov	r3, fp
 8009c08:	f7f6 fd1e 	bl	8000648 <__aeabi_dmul>
 8009c0c:	4b82      	ldr	r3, [pc, #520]	; (8009e18 <_dtoa_r+0x628>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f7f6 fb64 	bl	80002dc <__adddf3>
 8009c14:	46d0      	mov	r8, sl
 8009c16:	46d9      	mov	r9, fp
 8009c18:	4682      	mov	sl, r0
 8009c1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	d158      	bne.n	8009cd4 <_dtoa_r+0x4e4>
 8009c22:	4b7e      	ldr	r3, [pc, #504]	; (8009e1c <_dtoa_r+0x62c>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 fb55 	bl	80002d8 <__aeabi_dsub>
 8009c2e:	4652      	mov	r2, sl
 8009c30:	465b      	mov	r3, fp
 8009c32:	4680      	mov	r8, r0
 8009c34:	4689      	mov	r9, r1
 8009c36:	f7f6 ff97 	bl	8000b68 <__aeabi_dcmpgt>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f040 8295 	bne.w	800a16a <_dtoa_r+0x97a>
 8009c40:	4652      	mov	r2, sl
 8009c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c46:	4640      	mov	r0, r8
 8009c48:	4649      	mov	r1, r9
 8009c4a:	f7f6 ff6f 	bl	8000b2c <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f040 8289 	bne.w	800a166 <_dtoa_r+0x976>
 8009c54:	ec5b ab19 	vmov	sl, fp, d9
 8009c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f2c0 8148 	blt.w	8009ef0 <_dtoa_r+0x700>
 8009c60:	9a00      	ldr	r2, [sp, #0]
 8009c62:	2a0e      	cmp	r2, #14
 8009c64:	f300 8144 	bgt.w	8009ef0 <_dtoa_r+0x700>
 8009c68:	4b67      	ldr	r3, [pc, #412]	; (8009e08 <_dtoa_r+0x618>)
 8009c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f280 80d5 	bge.w	8009e24 <_dtoa_r+0x634>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f300 80d1 	bgt.w	8009e24 <_dtoa_r+0x634>
 8009c82:	f040 826f 	bne.w	800a164 <_dtoa_r+0x974>
 8009c86:	4b65      	ldr	r3, [pc, #404]	; (8009e1c <_dtoa_r+0x62c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fcdb 	bl	8000648 <__aeabi_dmul>
 8009c92:	4652      	mov	r2, sl
 8009c94:	465b      	mov	r3, fp
 8009c96:	f7f6 ff5d 	bl	8000b54 <__aeabi_dcmpge>
 8009c9a:	9e03      	ldr	r6, [sp, #12]
 8009c9c:	4637      	mov	r7, r6
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8245 	bne.w	800a12e <_dtoa_r+0x93e>
 8009ca4:	9d01      	ldr	r5, [sp, #4]
 8009ca6:	2331      	movs	r3, #49	; 0x31
 8009ca8:	f805 3b01 	strb.w	r3, [r5], #1
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	e240      	b.n	800a136 <_dtoa_r+0x946>
 8009cb4:	07f2      	lsls	r2, r6, #31
 8009cb6:	d505      	bpl.n	8009cc4 <_dtoa_r+0x4d4>
 8009cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cbc:	f7f6 fcc4 	bl	8000648 <__aeabi_dmul>
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	1076      	asrs	r6, r6, #1
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	e777      	b.n	8009bba <_dtoa_r+0x3ca>
 8009cca:	2502      	movs	r5, #2
 8009ccc:	e779      	b.n	8009bc2 <_dtoa_r+0x3d2>
 8009cce:	9f00      	ldr	r7, [sp, #0]
 8009cd0:	9e03      	ldr	r6, [sp, #12]
 8009cd2:	e794      	b.n	8009bfe <_dtoa_r+0x40e>
 8009cd4:	9901      	ldr	r1, [sp, #4]
 8009cd6:	4b4c      	ldr	r3, [pc, #304]	; (8009e08 <_dtoa_r+0x618>)
 8009cd8:	4431      	add	r1, r6
 8009cda:	910d      	str	r1, [sp, #52]	; 0x34
 8009cdc:	9908      	ldr	r1, [sp, #32]
 8009cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d043      	beq.n	8009d72 <_dtoa_r+0x582>
 8009cea:	494d      	ldr	r1, [pc, #308]	; (8009e20 <_dtoa_r+0x630>)
 8009cec:	2000      	movs	r0, #0
 8009cee:	f7f6 fdd5 	bl	800089c <__aeabi_ddiv>
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	f7f6 faef 	bl	80002d8 <__aeabi_dsub>
 8009cfa:	9d01      	ldr	r5, [sp, #4]
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	468b      	mov	fp, r1
 8009d00:	4649      	mov	r1, r9
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7f6 ff50 	bl	8000ba8 <__aeabi_d2iz>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	f7f6 fc33 	bl	8000574 <__aeabi_i2d>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4640      	mov	r0, r8
 8009d14:	4649      	mov	r1, r9
 8009d16:	f7f6 fadf 	bl	80002d8 <__aeabi_dsub>
 8009d1a:	3630      	adds	r6, #48	; 0x30
 8009d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	465b      	mov	r3, fp
 8009d24:	4680      	mov	r8, r0
 8009d26:	4689      	mov	r9, r1
 8009d28:	f7f6 ff00 	bl	8000b2c <__aeabi_dcmplt>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d163      	bne.n	8009df8 <_dtoa_r+0x608>
 8009d30:	4642      	mov	r2, r8
 8009d32:	464b      	mov	r3, r9
 8009d34:	4936      	ldr	r1, [pc, #216]	; (8009e10 <_dtoa_r+0x620>)
 8009d36:	2000      	movs	r0, #0
 8009d38:	f7f6 face 	bl	80002d8 <__aeabi_dsub>
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	465b      	mov	r3, fp
 8009d40:	f7f6 fef4 	bl	8000b2c <__aeabi_dcmplt>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 80b5 	bne.w	8009eb4 <_dtoa_r+0x6c4>
 8009d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d4c:	429d      	cmp	r5, r3
 8009d4e:	d081      	beq.n	8009c54 <_dtoa_r+0x464>
 8009d50:	4b30      	ldr	r3, [pc, #192]	; (8009e14 <_dtoa_r+0x624>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	4650      	mov	r0, sl
 8009d56:	4659      	mov	r1, fp
 8009d58:	f7f6 fc76 	bl	8000648 <__aeabi_dmul>
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	; (8009e14 <_dtoa_r+0x624>)
 8009d5e:	4682      	mov	sl, r0
 8009d60:	468b      	mov	fp, r1
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	2200      	movs	r2, #0
 8009d68:	f7f6 fc6e 	bl	8000648 <__aeabi_dmul>
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	4689      	mov	r9, r1
 8009d70:	e7c6      	b.n	8009d00 <_dtoa_r+0x510>
 8009d72:	4650      	mov	r0, sl
 8009d74:	4659      	mov	r1, fp
 8009d76:	f7f6 fc67 	bl	8000648 <__aeabi_dmul>
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	9d01      	ldr	r5, [sp, #4]
 8009d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d80:	4682      	mov	sl, r0
 8009d82:	468b      	mov	fp, r1
 8009d84:	4649      	mov	r1, r9
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7f6 ff0e 	bl	8000ba8 <__aeabi_d2iz>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	f7f6 fbf1 	bl	8000574 <__aeabi_i2d>
 8009d92:	3630      	adds	r6, #48	; 0x30
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 fa9c 	bl	80002d8 <__aeabi_dsub>
 8009da0:	f805 6b01 	strb.w	r6, [r5], #1
 8009da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da6:	429d      	cmp	r5, r3
 8009da8:	4680      	mov	r8, r0
 8009daa:	4689      	mov	r9, r1
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	d124      	bne.n	8009dfc <_dtoa_r+0x60c>
 8009db2:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <_dtoa_r+0x630>)
 8009db4:	4650      	mov	r0, sl
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 fa90 	bl	80002dc <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	f7f6 fed0 	bl	8000b68 <__aeabi_dcmpgt>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d173      	bne.n	8009eb4 <_dtoa_r+0x6c4>
 8009dcc:	4652      	mov	r2, sl
 8009dce:	465b      	mov	r3, fp
 8009dd0:	4913      	ldr	r1, [pc, #76]	; (8009e20 <_dtoa_r+0x630>)
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	f7f6 fa80 	bl	80002d8 <__aeabi_dsub>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fea4 	bl	8000b2c <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f af35 	beq.w	8009c54 <_dtoa_r+0x464>
 8009dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dec:	1e6b      	subs	r3, r5, #1
 8009dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009df4:	2b30      	cmp	r3, #48	; 0x30
 8009df6:	d0f8      	beq.n	8009dea <_dtoa_r+0x5fa>
 8009df8:	9700      	str	r7, [sp, #0]
 8009dfa:	e049      	b.n	8009e90 <_dtoa_r+0x6a0>
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <_dtoa_r+0x624>)
 8009dfe:	f7f6 fc23 	bl	8000648 <__aeabi_dmul>
 8009e02:	4680      	mov	r8, r0
 8009e04:	4689      	mov	r9, r1
 8009e06:	e7bd      	b.n	8009d84 <_dtoa_r+0x594>
 8009e08:	0800cfe8 	.word	0x0800cfe8
 8009e0c:	0800cfc0 	.word	0x0800cfc0
 8009e10:	3ff00000 	.word	0x3ff00000
 8009e14:	40240000 	.word	0x40240000
 8009e18:	401c0000 	.word	0x401c0000
 8009e1c:	40140000 	.word	0x40140000
 8009e20:	3fe00000 	.word	0x3fe00000
 8009e24:	9d01      	ldr	r5, [sp, #4]
 8009e26:	4656      	mov	r6, sl
 8009e28:	465f      	mov	r7, fp
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 fd33 	bl	800089c <__aeabi_ddiv>
 8009e36:	f7f6 feb7 	bl	8000ba8 <__aeabi_d2iz>
 8009e3a:	4682      	mov	sl, r0
 8009e3c:	f7f6 fb9a 	bl	8000574 <__aeabi_i2d>
 8009e40:	4642      	mov	r2, r8
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fc00 	bl	8000648 <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e54:	f7f6 fa40 	bl	80002d8 <__aeabi_dsub>
 8009e58:	f805 6b01 	strb.w	r6, [r5], #1
 8009e5c:	9e01      	ldr	r6, [sp, #4]
 8009e5e:	9f03      	ldr	r7, [sp, #12]
 8009e60:	1bae      	subs	r6, r5, r6
 8009e62:	42b7      	cmp	r7, r6
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	d135      	bne.n	8009ed6 <_dtoa_r+0x6e6>
 8009e6a:	f7f6 fa37 	bl	80002dc <__adddf3>
 8009e6e:	4642      	mov	r2, r8
 8009e70:	464b      	mov	r3, r9
 8009e72:	4606      	mov	r6, r0
 8009e74:	460f      	mov	r7, r1
 8009e76:	f7f6 fe77 	bl	8000b68 <__aeabi_dcmpgt>
 8009e7a:	b9d0      	cbnz	r0, 8009eb2 <_dtoa_r+0x6c2>
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fe48 	bl	8000b18 <__aeabi_dcmpeq>
 8009e88:	b110      	cbz	r0, 8009e90 <_dtoa_r+0x6a0>
 8009e8a:	f01a 0f01 	tst.w	sl, #1
 8009e8e:	d110      	bne.n	8009eb2 <_dtoa_r+0x6c2>
 8009e90:	4620      	mov	r0, r4
 8009e92:	ee18 1a10 	vmov	r1, s16
 8009e96:	f000 fe79 	bl	800ab8c <_Bfree>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9800      	ldr	r0, [sp, #0]
 8009e9e:	702b      	strb	r3, [r5, #0]
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	6018      	str	r0, [r3, #0]
 8009ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f43f acf1 	beq.w	8009890 <_dtoa_r+0xa0>
 8009eae:	601d      	str	r5, [r3, #0]
 8009eb0:	e4ee      	b.n	8009890 <_dtoa_r+0xa0>
 8009eb2:	9f00      	ldr	r7, [sp, #0]
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ebc:	2a39      	cmp	r2, #57	; 0x39
 8009ebe:	d106      	bne.n	8009ece <_dtoa_r+0x6de>
 8009ec0:	9a01      	ldr	r2, [sp, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d1f7      	bne.n	8009eb6 <_dtoa_r+0x6c6>
 8009ec6:	9901      	ldr	r1, [sp, #4]
 8009ec8:	2230      	movs	r2, #48	; 0x30
 8009eca:	3701      	adds	r7, #1
 8009ecc:	700a      	strb	r2, [r1, #0]
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e790      	b.n	8009df8 <_dtoa_r+0x608>
 8009ed6:	4ba6      	ldr	r3, [pc, #664]	; (800a170 <_dtoa_r+0x980>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7f6 fbb5 	bl	8000648 <__aeabi_dmul>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fe17 	bl	8000b18 <__aeabi_dcmpeq>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d09d      	beq.n	8009e2a <_dtoa_r+0x63a>
 8009eee:	e7cf      	b.n	8009e90 <_dtoa_r+0x6a0>
 8009ef0:	9a08      	ldr	r2, [sp, #32]
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	f000 80d7 	beq.w	800a0a6 <_dtoa_r+0x8b6>
 8009ef8:	9a06      	ldr	r2, [sp, #24]
 8009efa:	2a01      	cmp	r2, #1
 8009efc:	f300 80ba 	bgt.w	800a074 <_dtoa_r+0x884>
 8009f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	f000 80b2 	beq.w	800a06c <_dtoa_r+0x87c>
 8009f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f0c:	9e07      	ldr	r6, [sp, #28]
 8009f0e:	9d04      	ldr	r5, [sp, #16]
 8009f10:	9a04      	ldr	r2, [sp, #16]
 8009f12:	441a      	add	r2, r3
 8009f14:	9204      	str	r2, [sp, #16]
 8009f16:	9a05      	ldr	r2, [sp, #20]
 8009f18:	2101      	movs	r1, #1
 8009f1a:	441a      	add	r2, r3
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	9205      	str	r2, [sp, #20]
 8009f20:	f000 ff36 	bl	800ad90 <__i2b>
 8009f24:	4607      	mov	r7, r0
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	dd0c      	ble.n	8009f44 <_dtoa_r+0x754>
 8009f2a:	9b05      	ldr	r3, [sp, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dd09      	ble.n	8009f44 <_dtoa_r+0x754>
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	bfa8      	it	ge
 8009f36:	462b      	movge	r3, r5
 8009f38:	1ad2      	subs	r2, r2, r3
 8009f3a:	9204      	str	r2, [sp, #16]
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	1aed      	subs	r5, r5, r3
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	b31b      	cbz	r3, 8009f90 <_dtoa_r+0x7a0>
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80af 	beq.w	800a0ae <_dtoa_r+0x8be>
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	dd13      	ble.n	8009f7c <_dtoa_r+0x78c>
 8009f54:	4639      	mov	r1, r7
 8009f56:	4632      	mov	r2, r6
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 ffd9 	bl	800af10 <__pow5mult>
 8009f5e:	ee18 2a10 	vmov	r2, s16
 8009f62:	4601      	mov	r1, r0
 8009f64:	4607      	mov	r7, r0
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 ff28 	bl	800adbc <__multiply>
 8009f6c:	ee18 1a10 	vmov	r1, s16
 8009f70:	4680      	mov	r8, r0
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fe0a 	bl	800ab8c <_Bfree>
 8009f78:	ee08 8a10 	vmov	s16, r8
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	1b9a      	subs	r2, r3, r6
 8009f80:	d006      	beq.n	8009f90 <_dtoa_r+0x7a0>
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 ffc2 	bl	800af10 <__pow5mult>
 8009f8c:	ee08 0a10 	vmov	s16, r0
 8009f90:	2101      	movs	r1, #1
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fefc 	bl	800ad90 <__i2b>
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	f340 8088 	ble.w	800a0b2 <_dtoa_r+0x8c2>
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 ffb2 	bl	800af10 <__pow5mult>
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	f340 8081 	ble.w	800a0b8 <_dtoa_r+0x8c8>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	6933      	ldr	r3, [r6, #16]
 8009fbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fc0:	6918      	ldr	r0, [r3, #16]
 8009fc2:	f000 fe95 	bl	800acf0 <__hi0bits>
 8009fc6:	f1c0 0020 	rsb	r0, r0, #32
 8009fca:	9b05      	ldr	r3, [sp, #20]
 8009fcc:	4418      	add	r0, r3
 8009fce:	f010 001f 	ands.w	r0, r0, #31
 8009fd2:	f000 8092 	beq.w	800a0fa <_dtoa_r+0x90a>
 8009fd6:	f1c0 0320 	rsb	r3, r0, #32
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	f340 808a 	ble.w	800a0f4 <_dtoa_r+0x904>
 8009fe0:	f1c0 001c 	rsb	r0, r0, #28
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4403      	add	r3, r0
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	4403      	add	r3, r0
 8009fee:	4405      	add	r5, r0
 8009ff0:	9305      	str	r3, [sp, #20]
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd07      	ble.n	800a008 <_dtoa_r+0x818>
 8009ff8:	ee18 1a10 	vmov	r1, s16
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 ffe0 	bl	800afc4 <__lshift>
 800a004:	ee08 0a10 	vmov	s16, r0
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dd05      	ble.n	800a01a <_dtoa_r+0x82a>
 800a00e:	4631      	mov	r1, r6
 800a010:	461a      	mov	r2, r3
 800a012:	4620      	mov	r0, r4
 800a014:	f000 ffd6 	bl	800afc4 <__lshift>
 800a018:	4606      	mov	r6, r0
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d06e      	beq.n	800a0fe <_dtoa_r+0x90e>
 800a020:	ee18 0a10 	vmov	r0, s16
 800a024:	4631      	mov	r1, r6
 800a026:	f001 f83d 	bl	800b0a4 <__mcmp>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	da67      	bge.n	800a0fe <_dtoa_r+0x90e>
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	3b01      	subs	r3, #1
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	220a      	movs	r2, #10
 800a03a:	2300      	movs	r3, #0
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fdc7 	bl	800abd0 <__multadd>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	ee08 0a10 	vmov	s16, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 81b1 	beq.w	800a3b0 <_dtoa_r+0xbc0>
 800a04e:	2300      	movs	r3, #0
 800a050:	4639      	mov	r1, r7
 800a052:	220a      	movs	r2, #10
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fdbb 	bl	800abd0 <__multadd>
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	4607      	mov	r7, r0
 800a060:	f300 808e 	bgt.w	800a180 <_dtoa_r+0x990>
 800a064:	9b06      	ldr	r3, [sp, #24]
 800a066:	2b02      	cmp	r3, #2
 800a068:	dc51      	bgt.n	800a10e <_dtoa_r+0x91e>
 800a06a:	e089      	b.n	800a180 <_dtoa_r+0x990>
 800a06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a072:	e74b      	b.n	8009f0c <_dtoa_r+0x71c>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	1e5e      	subs	r6, r3, #1
 800a078:	9b07      	ldr	r3, [sp, #28]
 800a07a:	42b3      	cmp	r3, r6
 800a07c:	bfbf      	itttt	lt
 800a07e:	9b07      	ldrlt	r3, [sp, #28]
 800a080:	9607      	strlt	r6, [sp, #28]
 800a082:	1af2      	sublt	r2, r6, r3
 800a084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a086:	bfb6      	itet	lt
 800a088:	189b      	addlt	r3, r3, r2
 800a08a:	1b9e      	subge	r6, r3, r6
 800a08c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a08e:	9b03      	ldr	r3, [sp, #12]
 800a090:	bfb8      	it	lt
 800a092:	2600      	movlt	r6, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfb7      	itett	lt
 800a098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a09c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0a0:	1a9d      	sublt	r5, r3, r2
 800a0a2:	2300      	movlt	r3, #0
 800a0a4:	e734      	b.n	8009f10 <_dtoa_r+0x720>
 800a0a6:	9e07      	ldr	r6, [sp, #28]
 800a0a8:	9d04      	ldr	r5, [sp, #16]
 800a0aa:	9f08      	ldr	r7, [sp, #32]
 800a0ac:	e73b      	b.n	8009f26 <_dtoa_r+0x736>
 800a0ae:	9a07      	ldr	r2, [sp, #28]
 800a0b0:	e767      	b.n	8009f82 <_dtoa_r+0x792>
 800a0b2:	9b06      	ldr	r3, [sp, #24]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	dc18      	bgt.n	800a0ea <_dtoa_r+0x8fa>
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	d115      	bne.n	800a0ea <_dtoa_r+0x8fa>
 800a0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c2:	b993      	cbnz	r3, 800a0ea <_dtoa_r+0x8fa>
 800a0c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0c8:	0d1b      	lsrs	r3, r3, #20
 800a0ca:	051b      	lsls	r3, r3, #20
 800a0cc:	b183      	cbz	r3, 800a0f0 <_dtoa_r+0x900>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	9b05      	ldr	r3, [sp, #20]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	f04f 0801 	mov.w	r8, #1
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f47f af6a 	bne.w	8009fba <_dtoa_r+0x7ca>
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	e76f      	b.n	8009fca <_dtoa_r+0x7da>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	e7f6      	b.n	800a0de <_dtoa_r+0x8ee>
 800a0f0:	4698      	mov	r8, r3
 800a0f2:	e7f4      	b.n	800a0de <_dtoa_r+0x8ee>
 800a0f4:	f43f af7d 	beq.w	8009ff2 <_dtoa_r+0x802>
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	301c      	adds	r0, #28
 800a0fc:	e772      	b.n	8009fe4 <_dtoa_r+0x7f4>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	dc37      	bgt.n	800a174 <_dtoa_r+0x984>
 800a104:	9b06      	ldr	r3, [sp, #24]
 800a106:	2b02      	cmp	r3, #2
 800a108:	dd34      	ble.n	800a174 <_dtoa_r+0x984>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	b96b      	cbnz	r3, 800a12e <_dtoa_r+0x93e>
 800a112:	4631      	mov	r1, r6
 800a114:	2205      	movs	r2, #5
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fd5a 	bl	800abd0 <__multadd>
 800a11c:	4601      	mov	r1, r0
 800a11e:	4606      	mov	r6, r0
 800a120:	ee18 0a10 	vmov	r0, s16
 800a124:	f000 ffbe 	bl	800b0a4 <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f73f adbb 	bgt.w	8009ca4 <_dtoa_r+0x4b4>
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	9d01      	ldr	r5, [sp, #4]
 800a132:	43db      	mvns	r3, r3
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	4631      	mov	r1, r6
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fd25 	bl	800ab8c <_Bfree>
 800a142:	2f00      	cmp	r7, #0
 800a144:	f43f aea4 	beq.w	8009e90 <_dtoa_r+0x6a0>
 800a148:	f1b8 0f00 	cmp.w	r8, #0
 800a14c:	d005      	beq.n	800a15a <_dtoa_r+0x96a>
 800a14e:	45b8      	cmp	r8, r7
 800a150:	d003      	beq.n	800a15a <_dtoa_r+0x96a>
 800a152:	4641      	mov	r1, r8
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fd19 	bl	800ab8c <_Bfree>
 800a15a:	4639      	mov	r1, r7
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fd15 	bl	800ab8c <_Bfree>
 800a162:	e695      	b.n	8009e90 <_dtoa_r+0x6a0>
 800a164:	2600      	movs	r6, #0
 800a166:	4637      	mov	r7, r6
 800a168:	e7e1      	b.n	800a12e <_dtoa_r+0x93e>
 800a16a:	9700      	str	r7, [sp, #0]
 800a16c:	4637      	mov	r7, r6
 800a16e:	e599      	b.n	8009ca4 <_dtoa_r+0x4b4>
 800a170:	40240000 	.word	0x40240000
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80ca 	beq.w	800a310 <_dtoa_r+0xb20>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	2d00      	cmp	r5, #0
 800a182:	dd05      	ble.n	800a190 <_dtoa_r+0x9a0>
 800a184:	4639      	mov	r1, r7
 800a186:	462a      	mov	r2, r5
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 ff1b 	bl	800afc4 <__lshift>
 800a18e:	4607      	mov	r7, r0
 800a190:	f1b8 0f00 	cmp.w	r8, #0
 800a194:	d05b      	beq.n	800a24e <_dtoa_r+0xa5e>
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fcb7 	bl	800ab0c <_Balloc>
 800a19e:	4605      	mov	r5, r0
 800a1a0:	b928      	cbnz	r0, 800a1ae <_dtoa_r+0x9be>
 800a1a2:	4b87      	ldr	r3, [pc, #540]	; (800a3c0 <_dtoa_r+0xbd0>)
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1aa:	f7ff bb3b 	b.w	8009824 <_dtoa_r+0x34>
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	3202      	adds	r2, #2
 800a1b2:	0092      	lsls	r2, r2, #2
 800a1b4:	f107 010c 	add.w	r1, r7, #12
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	f7fd fc95 	bl	8007ae8 <memcpy>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fefe 	bl	800afc4 <__lshift>
 800a1c8:	9b01      	ldr	r3, [sp, #4]
 800a1ca:	f103 0901 	add.w	r9, r3, #1
 800a1ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	f00a 0301 	and.w	r3, sl, #1
 800a1da:	46b8      	mov	r8, r7
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	4607      	mov	r7, r0
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	ee18 0a10 	vmov	r0, s16
 800a1e6:	f7ff fa75 	bl	80096d4 <quorem>
 800a1ea:	4641      	mov	r1, r8
 800a1ec:	9002      	str	r0, [sp, #8]
 800a1ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1f2:	ee18 0a10 	vmov	r0, s16
 800a1f6:	f000 ff55 	bl	800b0a4 <__mcmp>
 800a1fa:	463a      	mov	r2, r7
 800a1fc:	9003      	str	r0, [sp, #12]
 800a1fe:	4631      	mov	r1, r6
 800a200:	4620      	mov	r0, r4
 800a202:	f000 ff6b 	bl	800b0dc <__mdiff>
 800a206:	68c2      	ldr	r2, [r0, #12]
 800a208:	f109 3bff 	add.w	fp, r9, #4294967295
 800a20c:	4605      	mov	r5, r0
 800a20e:	bb02      	cbnz	r2, 800a252 <_dtoa_r+0xa62>
 800a210:	4601      	mov	r1, r0
 800a212:	ee18 0a10 	vmov	r0, s16
 800a216:	f000 ff45 	bl	800b0a4 <__mcmp>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4629      	mov	r1, r5
 800a21e:	4620      	mov	r0, r4
 800a220:	9207      	str	r2, [sp, #28]
 800a222:	f000 fcb3 	bl	800ab8c <_Bfree>
 800a226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a22a:	ea43 0102 	orr.w	r1, r3, r2
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	430b      	orrs	r3, r1
 800a232:	464d      	mov	r5, r9
 800a234:	d10f      	bne.n	800a256 <_dtoa_r+0xa66>
 800a236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a23a:	d02a      	beq.n	800a292 <_dtoa_r+0xaa2>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dd02      	ble.n	800a248 <_dtoa_r+0xa58>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a248:	f88b a000 	strb.w	sl, [fp]
 800a24c:	e775      	b.n	800a13a <_dtoa_r+0x94a>
 800a24e:	4638      	mov	r0, r7
 800a250:	e7ba      	b.n	800a1c8 <_dtoa_r+0x9d8>
 800a252:	2201      	movs	r2, #1
 800a254:	e7e2      	b.n	800a21c <_dtoa_r+0xa2c>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	db04      	blt.n	800a266 <_dtoa_r+0xa76>
 800a25c:	9906      	ldr	r1, [sp, #24]
 800a25e:	430b      	orrs	r3, r1
 800a260:	9904      	ldr	r1, [sp, #16]
 800a262:	430b      	orrs	r3, r1
 800a264:	d122      	bne.n	800a2ac <_dtoa_r+0xabc>
 800a266:	2a00      	cmp	r2, #0
 800a268:	ddee      	ble.n	800a248 <_dtoa_r+0xa58>
 800a26a:	ee18 1a10 	vmov	r1, s16
 800a26e:	2201      	movs	r2, #1
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fea7 	bl	800afc4 <__lshift>
 800a276:	4631      	mov	r1, r6
 800a278:	ee08 0a10 	vmov	s16, r0
 800a27c:	f000 ff12 	bl	800b0a4 <__mcmp>
 800a280:	2800      	cmp	r0, #0
 800a282:	dc03      	bgt.n	800a28c <_dtoa_r+0xa9c>
 800a284:	d1e0      	bne.n	800a248 <_dtoa_r+0xa58>
 800a286:	f01a 0f01 	tst.w	sl, #1
 800a28a:	d0dd      	beq.n	800a248 <_dtoa_r+0xa58>
 800a28c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a290:	d1d7      	bne.n	800a242 <_dtoa_r+0xa52>
 800a292:	2339      	movs	r3, #57	; 0x39
 800a294:	f88b 3000 	strb.w	r3, [fp]
 800a298:	462b      	mov	r3, r5
 800a29a:	461d      	mov	r5, r3
 800a29c:	3b01      	subs	r3, #1
 800a29e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2a2:	2a39      	cmp	r2, #57	; 0x39
 800a2a4:	d071      	beq.n	800a38a <_dtoa_r+0xb9a>
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	e746      	b.n	800a13a <_dtoa_r+0x94a>
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	dd07      	ble.n	800a2c0 <_dtoa_r+0xad0>
 800a2b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2b4:	d0ed      	beq.n	800a292 <_dtoa_r+0xaa2>
 800a2b6:	f10a 0301 	add.w	r3, sl, #1
 800a2ba:	f88b 3000 	strb.w	r3, [fp]
 800a2be:	e73c      	b.n	800a13a <_dtoa_r+0x94a>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2c6:	4599      	cmp	r9, r3
 800a2c8:	d047      	beq.n	800a35a <_dtoa_r+0xb6a>
 800a2ca:	ee18 1a10 	vmov	r1, s16
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	220a      	movs	r2, #10
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fc7c 	bl	800abd0 <__multadd>
 800a2d8:	45b8      	cmp	r8, r7
 800a2da:	ee08 0a10 	vmov	s16, r0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	f04f 020a 	mov.w	r2, #10
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	d106      	bne.n	800a2fa <_dtoa_r+0xb0a>
 800a2ec:	f000 fc70 	bl	800abd0 <__multadd>
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	f109 0901 	add.w	r9, r9, #1
 800a2f8:	e772      	b.n	800a1e0 <_dtoa_r+0x9f0>
 800a2fa:	f000 fc69 	bl	800abd0 <__multadd>
 800a2fe:	4639      	mov	r1, r7
 800a300:	4680      	mov	r8, r0
 800a302:	2300      	movs	r3, #0
 800a304:	220a      	movs	r2, #10
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fc62 	bl	800abd0 <__multadd>
 800a30c:	4607      	mov	r7, r0
 800a30e:	e7f1      	b.n	800a2f4 <_dtoa_r+0xb04>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	9302      	str	r3, [sp, #8]
 800a314:	9d01      	ldr	r5, [sp, #4]
 800a316:	ee18 0a10 	vmov	r0, s16
 800a31a:	4631      	mov	r1, r6
 800a31c:	f7ff f9da 	bl	80096d4 <quorem>
 800a320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a324:	9b01      	ldr	r3, [sp, #4]
 800a326:	f805 ab01 	strb.w	sl, [r5], #1
 800a32a:	1aea      	subs	r2, r5, r3
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	4293      	cmp	r3, r2
 800a330:	dd09      	ble.n	800a346 <_dtoa_r+0xb56>
 800a332:	ee18 1a10 	vmov	r1, s16
 800a336:	2300      	movs	r3, #0
 800a338:	220a      	movs	r2, #10
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fc48 	bl	800abd0 <__multadd>
 800a340:	ee08 0a10 	vmov	s16, r0
 800a344:	e7e7      	b.n	800a316 <_dtoa_r+0xb26>
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bfc8      	it	gt
 800a34c:	461d      	movgt	r5, r3
 800a34e:	9b01      	ldr	r3, [sp, #4]
 800a350:	bfd8      	it	le
 800a352:	2501      	movle	r5, #1
 800a354:	441d      	add	r5, r3
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	ee18 1a10 	vmov	r1, s16
 800a35e:	2201      	movs	r2, #1
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fe2f 	bl	800afc4 <__lshift>
 800a366:	4631      	mov	r1, r6
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	f000 fe9a 	bl	800b0a4 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	dc91      	bgt.n	800a298 <_dtoa_r+0xaa8>
 800a374:	d102      	bne.n	800a37c <_dtoa_r+0xb8c>
 800a376:	f01a 0f01 	tst.w	sl, #1
 800a37a:	d18d      	bne.n	800a298 <_dtoa_r+0xaa8>
 800a37c:	462b      	mov	r3, r5
 800a37e:	461d      	mov	r5, r3
 800a380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a384:	2a30      	cmp	r2, #48	; 0x30
 800a386:	d0fa      	beq.n	800a37e <_dtoa_r+0xb8e>
 800a388:	e6d7      	b.n	800a13a <_dtoa_r+0x94a>
 800a38a:	9a01      	ldr	r2, [sp, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d184      	bne.n	800a29a <_dtoa_r+0xaaa>
 800a390:	9b00      	ldr	r3, [sp, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2331      	movs	r3, #49	; 0x31
 800a398:	7013      	strb	r3, [r2, #0]
 800a39a:	e6ce      	b.n	800a13a <_dtoa_r+0x94a>
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <_dtoa_r+0xbd4>)
 800a39e:	f7ff ba95 	b.w	80098cc <_dtoa_r+0xdc>
 800a3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f aa6e 	bne.w	8009886 <_dtoa_r+0x96>
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <_dtoa_r+0xbd8>)
 800a3ac:	f7ff ba8e 	b.w	80098cc <_dtoa_r+0xdc>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dcae      	bgt.n	800a314 <_dtoa_r+0xb24>
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	f73f aea8 	bgt.w	800a10e <_dtoa_r+0x91e>
 800a3be:	e7a9      	b.n	800a314 <_dtoa_r+0xb24>
 800a3c0:	0800ced8 	.word	0x0800ced8
 800a3c4:	0800d0d1 	.word	0x0800d0d1
 800a3c8:	0800ce59 	.word	0x0800ce59

0800a3cc <rshift>:
 800a3cc:	6903      	ldr	r3, [r0, #16]
 800a3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3da:	f100 0414 	add.w	r4, r0, #20
 800a3de:	dd45      	ble.n	800a46c <rshift+0xa0>
 800a3e0:	f011 011f 	ands.w	r1, r1, #31
 800a3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ec:	d10c      	bne.n	800a408 <rshift+0x3c>
 800a3ee:	f100 0710 	add.w	r7, r0, #16
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	42b1      	cmp	r1, r6
 800a3f6:	d334      	bcc.n	800a462 <rshift+0x96>
 800a3f8:	1a9b      	subs	r3, r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	1eea      	subs	r2, r5, #3
 800a3fe:	4296      	cmp	r6, r2
 800a400:	bf38      	it	cc
 800a402:	2300      	movcc	r3, #0
 800a404:	4423      	add	r3, r4
 800a406:	e015      	b.n	800a434 <rshift+0x68>
 800a408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a40c:	f1c1 0820 	rsb	r8, r1, #32
 800a410:	40cf      	lsrs	r7, r1
 800a412:	f105 0e04 	add.w	lr, r5, #4
 800a416:	46a1      	mov	r9, r4
 800a418:	4576      	cmp	r6, lr
 800a41a:	46f4      	mov	ip, lr
 800a41c:	d815      	bhi.n	800a44a <rshift+0x7e>
 800a41e:	1a9a      	subs	r2, r3, r2
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	3a04      	subs	r2, #4
 800a424:	3501      	adds	r5, #1
 800a426:	42ae      	cmp	r6, r5
 800a428:	bf38      	it	cc
 800a42a:	2200      	movcc	r2, #0
 800a42c:	18a3      	adds	r3, r4, r2
 800a42e:	50a7      	str	r7, [r4, r2]
 800a430:	b107      	cbz	r7, 800a434 <rshift+0x68>
 800a432:	3304      	adds	r3, #4
 800a434:	1b1a      	subs	r2, r3, r4
 800a436:	42a3      	cmp	r3, r4
 800a438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a43c:	bf08      	it	eq
 800a43e:	2300      	moveq	r3, #0
 800a440:	6102      	str	r2, [r0, #16]
 800a442:	bf08      	it	eq
 800a444:	6143      	streq	r3, [r0, #20]
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44a:	f8dc c000 	ldr.w	ip, [ip]
 800a44e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a452:	ea4c 0707 	orr.w	r7, ip, r7
 800a456:	f849 7b04 	str.w	r7, [r9], #4
 800a45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a45e:	40cf      	lsrs	r7, r1
 800a460:	e7da      	b.n	800a418 <rshift+0x4c>
 800a462:	f851 cb04 	ldr.w	ip, [r1], #4
 800a466:	f847 cf04 	str.w	ip, [r7, #4]!
 800a46a:	e7c3      	b.n	800a3f4 <rshift+0x28>
 800a46c:	4623      	mov	r3, r4
 800a46e:	e7e1      	b.n	800a434 <rshift+0x68>

0800a470 <__hexdig_fun>:
 800a470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d802      	bhi.n	800a47e <__hexdig_fun+0xe>
 800a478:	3820      	subs	r0, #32
 800a47a:	b2c0      	uxtb	r0, r0
 800a47c:	4770      	bx	lr
 800a47e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a482:	2b05      	cmp	r3, #5
 800a484:	d801      	bhi.n	800a48a <__hexdig_fun+0x1a>
 800a486:	3847      	subs	r0, #71	; 0x47
 800a488:	e7f7      	b.n	800a47a <__hexdig_fun+0xa>
 800a48a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d801      	bhi.n	800a496 <__hexdig_fun+0x26>
 800a492:	3827      	subs	r0, #39	; 0x27
 800a494:	e7f1      	b.n	800a47a <__hexdig_fun+0xa>
 800a496:	2000      	movs	r0, #0
 800a498:	4770      	bx	lr
	...

0800a49c <__gethex>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	ed2d 8b02 	vpush	{d8}
 800a4a4:	b089      	sub	sp, #36	; 0x24
 800a4a6:	ee08 0a10 	vmov	s16, r0
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	4bb4      	ldr	r3, [pc, #720]	; (800a780 <__gethex+0x2e4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	468b      	mov	fp, r1
 800a4b6:	4690      	mov	r8, r2
 800a4b8:	f7f5 feb2 	bl	8000220 <strlen>
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	f8db 2000 	ldr.w	r2, [fp]
 800a4c2:	4403      	add	r3, r0
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	1c93      	adds	r3, r2, #2
 800a4ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4d6:	32fe      	adds	r2, #254	; 0xfe
 800a4d8:	18d1      	adds	r1, r2, r3
 800a4da:	461f      	mov	r7, r3
 800a4dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4e0:	9100      	str	r1, [sp, #0]
 800a4e2:	2830      	cmp	r0, #48	; 0x30
 800a4e4:	d0f8      	beq.n	800a4d8 <__gethex+0x3c>
 800a4e6:	f7ff ffc3 	bl	800a470 <__hexdig_fun>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d13a      	bne.n	800a566 <__gethex+0xca>
 800a4f0:	9901      	ldr	r1, [sp, #4]
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f001 fda3 	bl	800c040 <strncmp>
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d168      	bne.n	800a5d2 <__gethex+0x136>
 800a500:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a504:	eb07 060a 	add.w	r6, r7, sl
 800a508:	f7ff ffb2 	bl	800a470 <__hexdig_fun>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d062      	beq.n	800a5d6 <__gethex+0x13a>
 800a510:	4633      	mov	r3, r6
 800a512:	7818      	ldrb	r0, [r3, #0]
 800a514:	2830      	cmp	r0, #48	; 0x30
 800a516:	461f      	mov	r7, r3
 800a518:	f103 0301 	add.w	r3, r3, #1
 800a51c:	d0f9      	beq.n	800a512 <__gethex+0x76>
 800a51e:	f7ff ffa7 	bl	800a470 <__hexdig_fun>
 800a522:	2301      	movs	r3, #1
 800a524:	fab0 f480 	clz	r4, r0
 800a528:	0964      	lsrs	r4, r4, #5
 800a52a:	4635      	mov	r5, r6
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	463a      	mov	r2, r7
 800a530:	4616      	mov	r6, r2
 800a532:	3201      	adds	r2, #1
 800a534:	7830      	ldrb	r0, [r6, #0]
 800a536:	f7ff ff9b 	bl	800a470 <__hexdig_fun>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d1f8      	bne.n	800a530 <__gethex+0x94>
 800a53e:	9901      	ldr	r1, [sp, #4]
 800a540:	4652      	mov	r2, sl
 800a542:	4630      	mov	r0, r6
 800a544:	f001 fd7c 	bl	800c040 <strncmp>
 800a548:	b980      	cbnz	r0, 800a56c <__gethex+0xd0>
 800a54a:	b94d      	cbnz	r5, 800a560 <__gethex+0xc4>
 800a54c:	eb06 050a 	add.w	r5, r6, sl
 800a550:	462a      	mov	r2, r5
 800a552:	4616      	mov	r6, r2
 800a554:	3201      	adds	r2, #1
 800a556:	7830      	ldrb	r0, [r6, #0]
 800a558:	f7ff ff8a 	bl	800a470 <__hexdig_fun>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1f8      	bne.n	800a552 <__gethex+0xb6>
 800a560:	1bad      	subs	r5, r5, r6
 800a562:	00ad      	lsls	r5, r5, #2
 800a564:	e004      	b.n	800a570 <__gethex+0xd4>
 800a566:	2400      	movs	r4, #0
 800a568:	4625      	mov	r5, r4
 800a56a:	e7e0      	b.n	800a52e <__gethex+0x92>
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	d1f7      	bne.n	800a560 <__gethex+0xc4>
 800a570:	7833      	ldrb	r3, [r6, #0]
 800a572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a576:	2b50      	cmp	r3, #80	; 0x50
 800a578:	d13b      	bne.n	800a5f2 <__gethex+0x156>
 800a57a:	7873      	ldrb	r3, [r6, #1]
 800a57c:	2b2b      	cmp	r3, #43	; 0x2b
 800a57e:	d02c      	beq.n	800a5da <__gethex+0x13e>
 800a580:	2b2d      	cmp	r3, #45	; 0x2d
 800a582:	d02e      	beq.n	800a5e2 <__gethex+0x146>
 800a584:	1c71      	adds	r1, r6, #1
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	7808      	ldrb	r0, [r1, #0]
 800a58c:	f7ff ff70 	bl	800a470 <__hexdig_fun>
 800a590:	1e43      	subs	r3, r0, #1
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b18      	cmp	r3, #24
 800a596:	d82c      	bhi.n	800a5f2 <__gethex+0x156>
 800a598:	f1a0 0210 	sub.w	r2, r0, #16
 800a59c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5a0:	f7ff ff66 	bl	800a470 <__hexdig_fun>
 800a5a4:	1e43      	subs	r3, r0, #1
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b18      	cmp	r3, #24
 800a5aa:	d91d      	bls.n	800a5e8 <__gethex+0x14c>
 800a5ac:	f1b9 0f00 	cmp.w	r9, #0
 800a5b0:	d000      	beq.n	800a5b4 <__gethex+0x118>
 800a5b2:	4252      	negs	r2, r2
 800a5b4:	4415      	add	r5, r2
 800a5b6:	f8cb 1000 	str.w	r1, [fp]
 800a5ba:	b1e4      	cbz	r4, 800a5f6 <__gethex+0x15a>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bf14      	ite	ne
 800a5c2:	2700      	movne	r7, #0
 800a5c4:	2706      	moveq	r7, #6
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	b009      	add	sp, #36	; 0x24
 800a5ca:	ecbd 8b02 	vpop	{d8}
 800a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d2:	463e      	mov	r6, r7
 800a5d4:	4625      	mov	r5, r4
 800a5d6:	2401      	movs	r4, #1
 800a5d8:	e7ca      	b.n	800a570 <__gethex+0xd4>
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	1cb1      	adds	r1, r6, #2
 800a5e0:	e7d3      	b.n	800a58a <__gethex+0xee>
 800a5e2:	f04f 0901 	mov.w	r9, #1
 800a5e6:	e7fa      	b.n	800a5de <__gethex+0x142>
 800a5e8:	230a      	movs	r3, #10
 800a5ea:	fb03 0202 	mla	r2, r3, r2, r0
 800a5ee:	3a10      	subs	r2, #16
 800a5f0:	e7d4      	b.n	800a59c <__gethex+0x100>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	e7df      	b.n	800a5b6 <__gethex+0x11a>
 800a5f6:	1bf3      	subs	r3, r6, r7
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	dc0b      	bgt.n	800a618 <__gethex+0x17c>
 800a600:	ee18 0a10 	vmov	r0, s16
 800a604:	f000 fa82 	bl	800ab0c <_Balloc>
 800a608:	4604      	mov	r4, r0
 800a60a:	b940      	cbnz	r0, 800a61e <__gethex+0x182>
 800a60c:	4b5d      	ldr	r3, [pc, #372]	; (800a784 <__gethex+0x2e8>)
 800a60e:	4602      	mov	r2, r0
 800a610:	21de      	movs	r1, #222	; 0xde
 800a612:	485d      	ldr	r0, [pc, #372]	; (800a788 <__gethex+0x2ec>)
 800a614:	f001 fde4 	bl	800c1e0 <__assert_func>
 800a618:	3101      	adds	r1, #1
 800a61a:	105b      	asrs	r3, r3, #1
 800a61c:	e7ee      	b.n	800a5fc <__gethex+0x160>
 800a61e:	f100 0914 	add.w	r9, r0, #20
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	f1ca 0301 	rsb	r3, sl, #1
 800a62a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a62e:	f8cd b000 	str.w	fp, [sp]
 800a632:	9306      	str	r3, [sp, #24]
 800a634:	42b7      	cmp	r7, r6
 800a636:	d340      	bcc.n	800a6ba <__gethex+0x21e>
 800a638:	9802      	ldr	r0, [sp, #8]
 800a63a:	9b00      	ldr	r3, [sp, #0]
 800a63c:	f840 3b04 	str.w	r3, [r0], #4
 800a640:	eba0 0009 	sub.w	r0, r0, r9
 800a644:	1080      	asrs	r0, r0, #2
 800a646:	0146      	lsls	r6, r0, #5
 800a648:	6120      	str	r0, [r4, #16]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fb50 	bl	800acf0 <__hi0bits>
 800a650:	1a30      	subs	r0, r6, r0
 800a652:	f8d8 6000 	ldr.w	r6, [r8]
 800a656:	42b0      	cmp	r0, r6
 800a658:	dd63      	ble.n	800a722 <__gethex+0x286>
 800a65a:	1b87      	subs	r7, r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fef4 	bl	800b44c <__any_on>
 800a664:	4682      	mov	sl, r0
 800a666:	b1a8      	cbz	r0, 800a694 <__gethex+0x1f8>
 800a668:	1e7b      	subs	r3, r7, #1
 800a66a:	1159      	asrs	r1, r3, #5
 800a66c:	f003 021f 	and.w	r2, r3, #31
 800a670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a674:	f04f 0a01 	mov.w	sl, #1
 800a678:	fa0a f202 	lsl.w	r2, sl, r2
 800a67c:	420a      	tst	r2, r1
 800a67e:	d009      	beq.n	800a694 <__gethex+0x1f8>
 800a680:	4553      	cmp	r3, sl
 800a682:	dd05      	ble.n	800a690 <__gethex+0x1f4>
 800a684:	1eb9      	subs	r1, r7, #2
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fee0 	bl	800b44c <__any_on>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d145      	bne.n	800a71c <__gethex+0x280>
 800a690:	f04f 0a02 	mov.w	sl, #2
 800a694:	4639      	mov	r1, r7
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff fe98 	bl	800a3cc <rshift>
 800a69c:	443d      	add	r5, r7
 800a69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a2:	42ab      	cmp	r3, r5
 800a6a4:	da4c      	bge.n	800a740 <__gethex+0x2a4>
 800a6a6:	ee18 0a10 	vmov	r0, s16
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f000 fa6e 	bl	800ab8c <_Bfree>
 800a6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	27a3      	movs	r7, #163	; 0xa3
 800a6b8:	e785      	b.n	800a5c6 <__gethex+0x12a>
 800a6ba:	1e73      	subs	r3, r6, #1
 800a6bc:	9a05      	ldr	r2, [sp, #20]
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d019      	beq.n	800a6fc <__gethex+0x260>
 800a6c8:	f1bb 0f20 	cmp.w	fp, #32
 800a6cc:	d107      	bne.n	800a6de <__gethex+0x242>
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	9a00      	ldr	r2, [sp, #0]
 800a6d2:	f843 2b04 	str.w	r2, [r3], #4
 800a6d6:	9302      	str	r3, [sp, #8]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	469b      	mov	fp, r3
 800a6de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6e2:	f7ff fec5 	bl	800a470 <__hexdig_fun>
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	f000 000f 	and.w	r0, r0, #15
 800a6ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f0:	4303      	orrs	r3, r0
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	f10b 0b04 	add.w	fp, fp, #4
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	e00d      	b.n	800a718 <__gethex+0x27c>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	4413      	add	r3, r2
 800a702:	42bb      	cmp	r3, r7
 800a704:	d3e0      	bcc.n	800a6c8 <__gethex+0x22c>
 800a706:	4618      	mov	r0, r3
 800a708:	9901      	ldr	r1, [sp, #4]
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	4652      	mov	r2, sl
 800a70e:	f001 fc97 	bl	800c040 <strncmp>
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	2800      	cmp	r0, #0
 800a716:	d1d7      	bne.n	800a6c8 <__gethex+0x22c>
 800a718:	461e      	mov	r6, r3
 800a71a:	e78b      	b.n	800a634 <__gethex+0x198>
 800a71c:	f04f 0a03 	mov.w	sl, #3
 800a720:	e7b8      	b.n	800a694 <__gethex+0x1f8>
 800a722:	da0a      	bge.n	800a73a <__gethex+0x29e>
 800a724:	1a37      	subs	r7, r6, r0
 800a726:	4621      	mov	r1, r4
 800a728:	ee18 0a10 	vmov	r0, s16
 800a72c:	463a      	mov	r2, r7
 800a72e:	f000 fc49 	bl	800afc4 <__lshift>
 800a732:	1bed      	subs	r5, r5, r7
 800a734:	4604      	mov	r4, r0
 800a736:	f100 0914 	add.w	r9, r0, #20
 800a73a:	f04f 0a00 	mov.w	sl, #0
 800a73e:	e7ae      	b.n	800a69e <__gethex+0x202>
 800a740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a744:	42a8      	cmp	r0, r5
 800a746:	dd72      	ble.n	800a82e <__gethex+0x392>
 800a748:	1b45      	subs	r5, r0, r5
 800a74a:	42ae      	cmp	r6, r5
 800a74c:	dc36      	bgt.n	800a7bc <__gethex+0x320>
 800a74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d02a      	beq.n	800a7ac <__gethex+0x310>
 800a756:	2b03      	cmp	r3, #3
 800a758:	d02c      	beq.n	800a7b4 <__gethex+0x318>
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d11c      	bne.n	800a798 <__gethex+0x2fc>
 800a75e:	42ae      	cmp	r6, r5
 800a760:	d11a      	bne.n	800a798 <__gethex+0x2fc>
 800a762:	2e01      	cmp	r6, #1
 800a764:	d112      	bne.n	800a78c <__gethex+0x2f0>
 800a766:	9a04      	ldr	r2, [sp, #16]
 800a768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	2301      	movs	r3, #1
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	f8c9 3000 	str.w	r3, [r9]
 800a776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a778:	2762      	movs	r7, #98	; 0x62
 800a77a:	601c      	str	r4, [r3, #0]
 800a77c:	e723      	b.n	800a5c6 <__gethex+0x12a>
 800a77e:	bf00      	nop
 800a780:	0800cf50 	.word	0x0800cf50
 800a784:	0800ced8 	.word	0x0800ced8
 800a788:	0800cee9 	.word	0x0800cee9
 800a78c:	1e71      	subs	r1, r6, #1
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fe5c 	bl	800b44c <__any_on>
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e6      	bne.n	800a766 <__gethex+0x2ca>
 800a798:	ee18 0a10 	vmov	r0, s16
 800a79c:	4621      	mov	r1, r4
 800a79e:	f000 f9f5 	bl	800ab8c <_Bfree>
 800a7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	2750      	movs	r7, #80	; 0x50
 800a7aa:	e70c      	b.n	800a5c6 <__gethex+0x12a>
 800a7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1f2      	bne.n	800a798 <__gethex+0x2fc>
 800a7b2:	e7d8      	b.n	800a766 <__gethex+0x2ca>
 800a7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1d5      	bne.n	800a766 <__gethex+0x2ca>
 800a7ba:	e7ed      	b.n	800a798 <__gethex+0x2fc>
 800a7bc:	1e6f      	subs	r7, r5, #1
 800a7be:	f1ba 0f00 	cmp.w	sl, #0
 800a7c2:	d131      	bne.n	800a828 <__gethex+0x38c>
 800a7c4:	b127      	cbz	r7, 800a7d0 <__gethex+0x334>
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fe3f 	bl	800b44c <__any_on>
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	117b      	asrs	r3, r7, #5
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7d8:	f007 071f 	and.w	r7, r7, #31
 800a7dc:	fa01 f707 	lsl.w	r7, r1, r7
 800a7e0:	421f      	tst	r7, r3
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	bf18      	it	ne
 800a7e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7ec:	1b76      	subs	r6, r6, r5
 800a7ee:	f7ff fded 	bl	800a3cc <rshift>
 800a7f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7f6:	2702      	movs	r7, #2
 800a7f8:	f1ba 0f00 	cmp.w	sl, #0
 800a7fc:	d048      	beq.n	800a890 <__gethex+0x3f4>
 800a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d015      	beq.n	800a832 <__gethex+0x396>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d017      	beq.n	800a83a <__gethex+0x39e>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d109      	bne.n	800a822 <__gethex+0x386>
 800a80e:	f01a 0f02 	tst.w	sl, #2
 800a812:	d006      	beq.n	800a822 <__gethex+0x386>
 800a814:	f8d9 0000 	ldr.w	r0, [r9]
 800a818:	ea4a 0a00 	orr.w	sl, sl, r0
 800a81c:	f01a 0f01 	tst.w	sl, #1
 800a820:	d10e      	bne.n	800a840 <__gethex+0x3a4>
 800a822:	f047 0710 	orr.w	r7, r7, #16
 800a826:	e033      	b.n	800a890 <__gethex+0x3f4>
 800a828:	f04f 0a01 	mov.w	sl, #1
 800a82c:	e7d0      	b.n	800a7d0 <__gethex+0x334>
 800a82e:	2701      	movs	r7, #1
 800a830:	e7e2      	b.n	800a7f8 <__gethex+0x35c>
 800a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a834:	f1c3 0301 	rsb	r3, r3, #1
 800a838:	9315      	str	r3, [sp, #84]	; 0x54
 800a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0f0      	beq.n	800a822 <__gethex+0x386>
 800a840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a844:	f104 0314 	add.w	r3, r4, #20
 800a848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a84c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a85e:	d01c      	beq.n	800a89a <__gethex+0x3fe>
 800a860:	3201      	adds	r2, #1
 800a862:	6002      	str	r2, [r0, #0]
 800a864:	2f02      	cmp	r7, #2
 800a866:	f104 0314 	add.w	r3, r4, #20
 800a86a:	d13f      	bne.n	800a8ec <__gethex+0x450>
 800a86c:	f8d8 2000 	ldr.w	r2, [r8]
 800a870:	3a01      	subs	r2, #1
 800a872:	42b2      	cmp	r2, r6
 800a874:	d10a      	bne.n	800a88c <__gethex+0x3f0>
 800a876:	1171      	asrs	r1, r6, #5
 800a878:	2201      	movs	r2, #1
 800a87a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a87e:	f006 061f 	and.w	r6, r6, #31
 800a882:	fa02 f606 	lsl.w	r6, r2, r6
 800a886:	421e      	tst	r6, r3
 800a888:	bf18      	it	ne
 800a88a:	4617      	movne	r7, r2
 800a88c:	f047 0720 	orr.w	r7, r7, #32
 800a890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a892:	601c      	str	r4, [r3, #0]
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	601d      	str	r5, [r3, #0]
 800a898:	e695      	b.n	800a5c6 <__gethex+0x12a>
 800a89a:	4299      	cmp	r1, r3
 800a89c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8a0:	d8d8      	bhi.n	800a854 <__gethex+0x3b8>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	459b      	cmp	fp, r3
 800a8a6:	db19      	blt.n	800a8dc <__gethex+0x440>
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	ee18 0a10 	vmov	r0, s16
 800a8ae:	3101      	adds	r1, #1
 800a8b0:	f000 f92c 	bl	800ab0c <_Balloc>
 800a8b4:	4681      	mov	r9, r0
 800a8b6:	b918      	cbnz	r0, 800a8c0 <__gethex+0x424>
 800a8b8:	4b1a      	ldr	r3, [pc, #104]	; (800a924 <__gethex+0x488>)
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	2184      	movs	r1, #132	; 0x84
 800a8be:	e6a8      	b.n	800a612 <__gethex+0x176>
 800a8c0:	6922      	ldr	r2, [r4, #16]
 800a8c2:	3202      	adds	r2, #2
 800a8c4:	f104 010c 	add.w	r1, r4, #12
 800a8c8:	0092      	lsls	r2, r2, #2
 800a8ca:	300c      	adds	r0, #12
 800a8cc:	f7fd f90c 	bl	8007ae8 <memcpy>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	ee18 0a10 	vmov	r0, s16
 800a8d6:	f000 f959 	bl	800ab8c <_Bfree>
 800a8da:	464c      	mov	r4, r9
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8e4:	6122      	str	r2, [r4, #16]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	615a      	str	r2, [r3, #20]
 800a8ea:	e7bb      	b.n	800a864 <__gethex+0x3c8>
 800a8ec:	6922      	ldr	r2, [r4, #16]
 800a8ee:	455a      	cmp	r2, fp
 800a8f0:	dd0b      	ble.n	800a90a <__gethex+0x46e>
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7ff fd69 	bl	800a3cc <rshift>
 800a8fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8fe:	3501      	adds	r5, #1
 800a900:	42ab      	cmp	r3, r5
 800a902:	f6ff aed0 	blt.w	800a6a6 <__gethex+0x20a>
 800a906:	2701      	movs	r7, #1
 800a908:	e7c0      	b.n	800a88c <__gethex+0x3f0>
 800a90a:	f016 061f 	ands.w	r6, r6, #31
 800a90e:	d0fa      	beq.n	800a906 <__gethex+0x46a>
 800a910:	4453      	add	r3, sl
 800a912:	f1c6 0620 	rsb	r6, r6, #32
 800a916:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a91a:	f000 f9e9 	bl	800acf0 <__hi0bits>
 800a91e:	42b0      	cmp	r0, r6
 800a920:	dbe7      	blt.n	800a8f2 <__gethex+0x456>
 800a922:	e7f0      	b.n	800a906 <__gethex+0x46a>
 800a924:	0800ced8 	.word	0x0800ced8

0800a928 <L_shift>:
 800a928:	f1c2 0208 	rsb	r2, r2, #8
 800a92c:	0092      	lsls	r2, r2, #2
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	f1c2 0620 	rsb	r6, r2, #32
 800a934:	6843      	ldr	r3, [r0, #4]
 800a936:	6804      	ldr	r4, [r0, #0]
 800a938:	fa03 f506 	lsl.w	r5, r3, r6
 800a93c:	432c      	orrs	r4, r5
 800a93e:	40d3      	lsrs	r3, r2
 800a940:	6004      	str	r4, [r0, #0]
 800a942:	f840 3f04 	str.w	r3, [r0, #4]!
 800a946:	4288      	cmp	r0, r1
 800a948:	d3f4      	bcc.n	800a934 <L_shift+0xc>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}

0800a94c <__match>:
 800a94c:	b530      	push	{r4, r5, lr}
 800a94e:	6803      	ldr	r3, [r0, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a956:	b914      	cbnz	r4, 800a95e <__match+0x12>
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2001      	movs	r0, #1
 800a95c:	bd30      	pop	{r4, r5, pc}
 800a95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a966:	2d19      	cmp	r5, #25
 800a968:	bf98      	it	ls
 800a96a:	3220      	addls	r2, #32
 800a96c:	42a2      	cmp	r2, r4
 800a96e:	d0f0      	beq.n	800a952 <__match+0x6>
 800a970:	2000      	movs	r0, #0
 800a972:	e7f3      	b.n	800a95c <__match+0x10>

0800a974 <__hexnan>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	680b      	ldr	r3, [r1, #0]
 800a97a:	115e      	asrs	r6, r3, #5
 800a97c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a980:	f013 031f 	ands.w	r3, r3, #31
 800a984:	b087      	sub	sp, #28
 800a986:	bf18      	it	ne
 800a988:	3604      	addne	r6, #4
 800a98a:	2500      	movs	r5, #0
 800a98c:	1f37      	subs	r7, r6, #4
 800a98e:	4690      	mov	r8, r2
 800a990:	6802      	ldr	r2, [r0, #0]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	4682      	mov	sl, r0
 800a996:	f846 5c04 	str.w	r5, [r6, #-4]
 800a99a:	46b9      	mov	r9, r7
 800a99c:	463c      	mov	r4, r7
 800a99e:	9502      	str	r5, [sp, #8]
 800a9a0:	46ab      	mov	fp, r5
 800a9a2:	7851      	ldrb	r1, [r2, #1]
 800a9a4:	1c53      	adds	r3, r2, #1
 800a9a6:	9303      	str	r3, [sp, #12]
 800a9a8:	b341      	cbz	r1, 800a9fc <__hexnan+0x88>
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	9205      	str	r2, [sp, #20]
 800a9ae:	9104      	str	r1, [sp, #16]
 800a9b0:	f7ff fd5e 	bl	800a470 <__hexdig_fun>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d14f      	bne.n	800aa58 <__hexnan+0xe4>
 800a9b8:	9904      	ldr	r1, [sp, #16]
 800a9ba:	9a05      	ldr	r2, [sp, #20]
 800a9bc:	2920      	cmp	r1, #32
 800a9be:	d818      	bhi.n	800a9f2 <__hexnan+0x7e>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	459b      	cmp	fp, r3
 800a9c4:	dd13      	ble.n	800a9ee <__hexnan+0x7a>
 800a9c6:	454c      	cmp	r4, r9
 800a9c8:	d206      	bcs.n	800a9d8 <__hexnan+0x64>
 800a9ca:	2d07      	cmp	r5, #7
 800a9cc:	dc04      	bgt.n	800a9d8 <__hexnan+0x64>
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff ffa8 	bl	800a928 <L_shift>
 800a9d8:	4544      	cmp	r4, r8
 800a9da:	d950      	bls.n	800aa7e <__hexnan+0x10a>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f1a4 0904 	sub.w	r9, r4, #4
 800a9e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ea:	464c      	mov	r4, r9
 800a9ec:	461d      	mov	r5, r3
 800a9ee:	9a03      	ldr	r2, [sp, #12]
 800a9f0:	e7d7      	b.n	800a9a2 <__hexnan+0x2e>
 800a9f2:	2929      	cmp	r1, #41	; 0x29
 800a9f4:	d156      	bne.n	800aaa4 <__hexnan+0x130>
 800a9f6:	3202      	adds	r2, #2
 800a9f8:	f8ca 2000 	str.w	r2, [sl]
 800a9fc:	f1bb 0f00 	cmp.w	fp, #0
 800aa00:	d050      	beq.n	800aaa4 <__hexnan+0x130>
 800aa02:	454c      	cmp	r4, r9
 800aa04:	d206      	bcs.n	800aa14 <__hexnan+0xa0>
 800aa06:	2d07      	cmp	r5, #7
 800aa08:	dc04      	bgt.n	800aa14 <__hexnan+0xa0>
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff ff8a 	bl	800a928 <L_shift>
 800aa14:	4544      	cmp	r4, r8
 800aa16:	d934      	bls.n	800aa82 <__hexnan+0x10e>
 800aa18:	f1a8 0204 	sub.w	r2, r8, #4
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa22:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa26:	429f      	cmp	r7, r3
 800aa28:	d2f9      	bcs.n	800aa1e <__hexnan+0xaa>
 800aa2a:	1b3b      	subs	r3, r7, r4
 800aa2c:	f023 0303 	bic.w	r3, r3, #3
 800aa30:	3304      	adds	r3, #4
 800aa32:	3401      	adds	r4, #1
 800aa34:	3e03      	subs	r6, #3
 800aa36:	42b4      	cmp	r4, r6
 800aa38:	bf88      	it	hi
 800aa3a:	2304      	movhi	r3, #4
 800aa3c:	4443      	add	r3, r8
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f843 2b04 	str.w	r2, [r3], #4
 800aa44:	429f      	cmp	r7, r3
 800aa46:	d2fb      	bcs.n	800aa40 <__hexnan+0xcc>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	b91b      	cbnz	r3, 800aa54 <__hexnan+0xe0>
 800aa4c:	4547      	cmp	r7, r8
 800aa4e:	d127      	bne.n	800aaa0 <__hexnan+0x12c>
 800aa50:	2301      	movs	r3, #1
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	2005      	movs	r0, #5
 800aa56:	e026      	b.n	800aaa6 <__hexnan+0x132>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	2d08      	cmp	r5, #8
 800aa5c:	f10b 0b01 	add.w	fp, fp, #1
 800aa60:	dd06      	ble.n	800aa70 <__hexnan+0xfc>
 800aa62:	4544      	cmp	r4, r8
 800aa64:	d9c3      	bls.n	800a9ee <__hexnan+0x7a>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa6c:	2501      	movs	r5, #1
 800aa6e:	3c04      	subs	r4, #4
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	f000 000f 	and.w	r0, r0, #15
 800aa76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	e7b7      	b.n	800a9ee <__hexnan+0x7a>
 800aa7e:	2508      	movs	r5, #8
 800aa80:	e7b5      	b.n	800a9ee <__hexnan+0x7a>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0df      	beq.n	800aa48 <__hexnan+0xd4>
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8c:	f1c3 0320 	rsb	r3, r3, #32
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa98:	401a      	ands	r2, r3
 800aa9a:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa9e:	e7d3      	b.n	800aa48 <__hexnan+0xd4>
 800aaa0:	3f04      	subs	r7, #4
 800aaa2:	e7d1      	b.n	800aa48 <__hexnan+0xd4>
 800aaa4:	2004      	movs	r0, #4
 800aaa6:	b007      	add	sp, #28
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaac <_localeconv_r>:
 800aaac:	4800      	ldr	r0, [pc, #0]	; (800aab0 <_localeconv_r+0x4>)
 800aaae:	4770      	bx	lr
 800aab0:	20000168 	.word	0x20000168

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d07      	ldr	r5, [pc, #28]	; (800aad4 <_lseek_r+0x20>)
 800aab8:	4604      	mov	r4, r0
 800aaba:	4608      	mov	r0, r1
 800aabc:	4611      	mov	r1, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f7 f948 	bl	8001d58 <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20000714 	.word	0x20000714

0800aad8 <malloc>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <malloc+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f000 bd59 	b.w	800b594 <_malloc_r>
 800aae2:	bf00      	nop
 800aae4:	20000010 	.word	0x20000010

0800aae8 <__ascii_mbtowc>:
 800aae8:	b082      	sub	sp, #8
 800aaea:	b901      	cbnz	r1, 800aaee <__ascii_mbtowc+0x6>
 800aaec:	a901      	add	r1, sp, #4
 800aaee:	b142      	cbz	r2, 800ab02 <__ascii_mbtowc+0x1a>
 800aaf0:	b14b      	cbz	r3, 800ab06 <__ascii_mbtowc+0x1e>
 800aaf2:	7813      	ldrb	r3, [r2, #0]
 800aaf4:	600b      	str	r3, [r1, #0]
 800aaf6:	7812      	ldrb	r2, [r2, #0]
 800aaf8:	1e10      	subs	r0, r2, #0
 800aafa:	bf18      	it	ne
 800aafc:	2001      	movne	r0, #1
 800aafe:	b002      	add	sp, #8
 800ab00:	4770      	bx	lr
 800ab02:	4610      	mov	r0, r2
 800ab04:	e7fb      	b.n	800aafe <__ascii_mbtowc+0x16>
 800ab06:	f06f 0001 	mvn.w	r0, #1
 800ab0a:	e7f8      	b.n	800aafe <__ascii_mbtowc+0x16>

0800ab0c <_Balloc>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	b976      	cbnz	r6, 800ab34 <_Balloc+0x28>
 800ab16:	2010      	movs	r0, #16
 800ab18:	f7ff ffde 	bl	800aad8 <malloc>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ab20:	b920      	cbnz	r0, 800ab2c <_Balloc+0x20>
 800ab22:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <_Balloc+0x78>)
 800ab24:	4818      	ldr	r0, [pc, #96]	; (800ab88 <_Balloc+0x7c>)
 800ab26:	2166      	movs	r1, #102	; 0x66
 800ab28:	f001 fb5a 	bl	800c1e0 <__assert_func>
 800ab2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab30:	6006      	str	r6, [r0, #0]
 800ab32:	60c6      	str	r6, [r0, #12]
 800ab34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab36:	68f3      	ldr	r3, [r6, #12]
 800ab38:	b183      	cbz	r3, 800ab5c <_Balloc+0x50>
 800ab3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab42:	b9b8      	cbnz	r0, 800ab74 <_Balloc+0x68>
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4a:	1d72      	adds	r2, r6, #5
 800ab4c:	0092      	lsls	r2, r2, #2
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 fc9d 	bl	800b48e <_calloc_r>
 800ab54:	b160      	cbz	r0, 800ab70 <_Balloc+0x64>
 800ab56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5a:	e00e      	b.n	800ab7a <_Balloc+0x6e>
 800ab5c:	2221      	movs	r2, #33	; 0x21
 800ab5e:	2104      	movs	r1, #4
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fc94 	bl	800b48e <_calloc_r>
 800ab66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab68:	60f0      	str	r0, [r6, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e4      	bne.n	800ab3a <_Balloc+0x2e>
 800ab70:	2000      	movs	r0, #0
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	6802      	ldr	r2, [r0, #0]
 800ab76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab80:	e7f7      	b.n	800ab72 <_Balloc+0x66>
 800ab82:	bf00      	nop
 800ab84:	0800ce66 	.word	0x0800ce66
 800ab88:	0800cf64 	.word	0x0800cf64

0800ab8c <_Bfree>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b976      	cbnz	r6, 800abb4 <_Bfree+0x28>
 800ab96:	2010      	movs	r0, #16
 800ab98:	f7ff ff9e 	bl	800aad8 <malloc>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6268      	str	r0, [r5, #36]	; 0x24
 800aba0:	b920      	cbnz	r0, 800abac <_Bfree+0x20>
 800aba2:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <_Bfree+0x3c>)
 800aba4:	4809      	ldr	r0, [pc, #36]	; (800abcc <_Bfree+0x40>)
 800aba6:	218a      	movs	r1, #138	; 0x8a
 800aba8:	f001 fb1a 	bl	800c1e0 <__assert_func>
 800abac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb0:	6006      	str	r6, [r0, #0]
 800abb2:	60c6      	str	r6, [r0, #12]
 800abb4:	b13c      	cbz	r4, 800abc6 <_Bfree+0x3a>
 800abb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc0:	6021      	str	r1, [r4, #0]
 800abc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	0800ce66 	.word	0x0800ce66
 800abcc:	0800cf64 	.word	0x0800cf64

0800abd0 <__multadd>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	690d      	ldr	r5, [r1, #16]
 800abd6:	4607      	mov	r7, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	461e      	mov	r6, r3
 800abdc:	f101 0c14 	add.w	ip, r1, #20
 800abe0:	2000      	movs	r0, #0
 800abe2:	f8dc 3000 	ldr.w	r3, [ip]
 800abe6:	b299      	uxth	r1, r3
 800abe8:	fb02 6101 	mla	r1, r2, r1, r6
 800abec:	0c1e      	lsrs	r6, r3, #16
 800abee:	0c0b      	lsrs	r3, r1, #16
 800abf0:	fb02 3306 	mla	r3, r2, r6, r3
 800abf4:	b289      	uxth	r1, r1
 800abf6:	3001      	adds	r0, #1
 800abf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abfc:	4285      	cmp	r5, r0
 800abfe:	f84c 1b04 	str.w	r1, [ip], #4
 800ac02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac06:	dcec      	bgt.n	800abe2 <__multadd+0x12>
 800ac08:	b30e      	cbz	r6, 800ac4e <__multadd+0x7e>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc19      	bgt.n	800ac44 <__multadd+0x74>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4638      	mov	r0, r7
 800ac14:	3101      	adds	r1, #1
 800ac16:	f7ff ff79 	bl	800ab0c <_Balloc>
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	b928      	cbnz	r0, 800ac2a <__multadd+0x5a>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <__multadd+0x84>)
 800ac22:	480d      	ldr	r0, [pc, #52]	; (800ac58 <__multadd+0x88>)
 800ac24:	21b5      	movs	r1, #181	; 0xb5
 800ac26:	f001 fadb 	bl	800c1e0 <__assert_func>
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	3202      	adds	r2, #2
 800ac2e:	f104 010c 	add.w	r1, r4, #12
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	300c      	adds	r0, #12
 800ac36:	f7fc ff57 	bl	8007ae8 <memcpy>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7ff ffa5 	bl	800ab8c <_Bfree>
 800ac42:	4644      	mov	r4, r8
 800ac44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac48:	3501      	adds	r5, #1
 800ac4a:	615e      	str	r6, [r3, #20]
 800ac4c:	6125      	str	r5, [r4, #16]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	0800ced8 	.word	0x0800ced8
 800ac58:	0800cf64 	.word	0x0800cf64

0800ac5c <__s2b>:
 800ac5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	4615      	mov	r5, r2
 800ac64:	461f      	mov	r7, r3
 800ac66:	2209      	movs	r2, #9
 800ac68:	3308      	adds	r3, #8
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac70:	2100      	movs	r1, #0
 800ac72:	2201      	movs	r2, #1
 800ac74:	429a      	cmp	r2, r3
 800ac76:	db09      	blt.n	800ac8c <__s2b+0x30>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ff47 	bl	800ab0c <_Balloc>
 800ac7e:	b940      	cbnz	r0, 800ac92 <__s2b+0x36>
 800ac80:	4602      	mov	r2, r0
 800ac82:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <__s2b+0x8c>)
 800ac84:	4819      	ldr	r0, [pc, #100]	; (800acec <__s2b+0x90>)
 800ac86:	21ce      	movs	r1, #206	; 0xce
 800ac88:	f001 faaa 	bl	800c1e0 <__assert_func>
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3101      	adds	r1, #1
 800ac90:	e7f0      	b.n	800ac74 <__s2b+0x18>
 800ac92:	9b08      	ldr	r3, [sp, #32]
 800ac94:	6143      	str	r3, [r0, #20]
 800ac96:	2d09      	cmp	r5, #9
 800ac98:	f04f 0301 	mov.w	r3, #1
 800ac9c:	6103      	str	r3, [r0, #16]
 800ac9e:	dd16      	ble.n	800acce <__s2b+0x72>
 800aca0:	f104 0909 	add.w	r9, r4, #9
 800aca4:	46c8      	mov	r8, r9
 800aca6:	442c      	add	r4, r5
 800aca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acac:	4601      	mov	r1, r0
 800acae:	3b30      	subs	r3, #48	; 0x30
 800acb0:	220a      	movs	r2, #10
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ff8c 	bl	800abd0 <__multadd>
 800acb8:	45a0      	cmp	r8, r4
 800acba:	d1f5      	bne.n	800aca8 <__s2b+0x4c>
 800acbc:	f1a5 0408 	sub.w	r4, r5, #8
 800acc0:	444c      	add	r4, r9
 800acc2:	1b2d      	subs	r5, r5, r4
 800acc4:	1963      	adds	r3, r4, r5
 800acc6:	42bb      	cmp	r3, r7
 800acc8:	db04      	blt.n	800acd4 <__s2b+0x78>
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	340a      	adds	r4, #10
 800acd0:	2509      	movs	r5, #9
 800acd2:	e7f6      	b.n	800acc2 <__s2b+0x66>
 800acd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acd8:	4601      	mov	r1, r0
 800acda:	3b30      	subs	r3, #48	; 0x30
 800acdc:	220a      	movs	r2, #10
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ff76 	bl	800abd0 <__multadd>
 800ace4:	e7ee      	b.n	800acc4 <__s2b+0x68>
 800ace6:	bf00      	nop
 800ace8:	0800ced8 	.word	0x0800ced8
 800acec:	0800cf64 	.word	0x0800cf64

0800acf0 <__hi0bits>:
 800acf0:	0c03      	lsrs	r3, r0, #16
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	b9d3      	cbnz	r3, 800ad2c <__hi0bits+0x3c>
 800acf6:	0400      	lsls	r0, r0, #16
 800acf8:	2310      	movs	r3, #16
 800acfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acfe:	bf04      	itt	eq
 800ad00:	0200      	lsleq	r0, r0, #8
 800ad02:	3308      	addeq	r3, #8
 800ad04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad08:	bf04      	itt	eq
 800ad0a:	0100      	lsleq	r0, r0, #4
 800ad0c:	3304      	addeq	r3, #4
 800ad0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad12:	bf04      	itt	eq
 800ad14:	0080      	lsleq	r0, r0, #2
 800ad16:	3302      	addeq	r3, #2
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	db05      	blt.n	800ad28 <__hi0bits+0x38>
 800ad1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad20:	f103 0301 	add.w	r3, r3, #1
 800ad24:	bf08      	it	eq
 800ad26:	2320      	moveq	r3, #32
 800ad28:	4618      	mov	r0, r3
 800ad2a:	4770      	bx	lr
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e7e4      	b.n	800acfa <__hi0bits+0xa>

0800ad30 <__lo0bits>:
 800ad30:	6803      	ldr	r3, [r0, #0]
 800ad32:	f013 0207 	ands.w	r2, r3, #7
 800ad36:	4601      	mov	r1, r0
 800ad38:	d00b      	beq.n	800ad52 <__lo0bits+0x22>
 800ad3a:	07da      	lsls	r2, r3, #31
 800ad3c:	d423      	bmi.n	800ad86 <__lo0bits+0x56>
 800ad3e:	0798      	lsls	r0, r3, #30
 800ad40:	bf49      	itett	mi
 800ad42:	085b      	lsrmi	r3, r3, #1
 800ad44:	089b      	lsrpl	r3, r3, #2
 800ad46:	2001      	movmi	r0, #1
 800ad48:	600b      	strmi	r3, [r1, #0]
 800ad4a:	bf5c      	itt	pl
 800ad4c:	600b      	strpl	r3, [r1, #0]
 800ad4e:	2002      	movpl	r0, #2
 800ad50:	4770      	bx	lr
 800ad52:	b298      	uxth	r0, r3
 800ad54:	b9a8      	cbnz	r0, 800ad82 <__lo0bits+0x52>
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	2010      	movs	r0, #16
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	b90a      	cbnz	r2, 800ad62 <__lo0bits+0x32>
 800ad5e:	3008      	adds	r0, #8
 800ad60:	0a1b      	lsrs	r3, r3, #8
 800ad62:	071a      	lsls	r2, r3, #28
 800ad64:	bf04      	itt	eq
 800ad66:	091b      	lsreq	r3, r3, #4
 800ad68:	3004      	addeq	r0, #4
 800ad6a:	079a      	lsls	r2, r3, #30
 800ad6c:	bf04      	itt	eq
 800ad6e:	089b      	lsreq	r3, r3, #2
 800ad70:	3002      	addeq	r0, #2
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d403      	bmi.n	800ad7e <__lo0bits+0x4e>
 800ad76:	085b      	lsrs	r3, r3, #1
 800ad78:	f100 0001 	add.w	r0, r0, #1
 800ad7c:	d005      	beq.n	800ad8a <__lo0bits+0x5a>
 800ad7e:	600b      	str	r3, [r1, #0]
 800ad80:	4770      	bx	lr
 800ad82:	4610      	mov	r0, r2
 800ad84:	e7e9      	b.n	800ad5a <__lo0bits+0x2a>
 800ad86:	2000      	movs	r0, #0
 800ad88:	4770      	bx	lr
 800ad8a:	2020      	movs	r0, #32
 800ad8c:	4770      	bx	lr
	...

0800ad90 <__i2b>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	460c      	mov	r4, r1
 800ad94:	2101      	movs	r1, #1
 800ad96:	f7ff feb9 	bl	800ab0c <_Balloc>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__i2b+0x1a>
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <__i2b+0x24>)
 800ada0:	4805      	ldr	r0, [pc, #20]	; (800adb8 <__i2b+0x28>)
 800ada2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ada6:	f001 fa1b 	bl	800c1e0 <__assert_func>
 800adaa:	2301      	movs	r3, #1
 800adac:	6144      	str	r4, [r0, #20]
 800adae:	6103      	str	r3, [r0, #16]
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	0800ced8 	.word	0x0800ced8
 800adb8:	0800cf64 	.word	0x0800cf64

0800adbc <__multiply>:
 800adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	4691      	mov	r9, r2
 800adc2:	690a      	ldr	r2, [r1, #16]
 800adc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	bfb8      	it	lt
 800adcc:	460b      	movlt	r3, r1
 800adce:	460c      	mov	r4, r1
 800add0:	bfbc      	itt	lt
 800add2:	464c      	movlt	r4, r9
 800add4:	4699      	movlt	r9, r3
 800add6:	6927      	ldr	r7, [r4, #16]
 800add8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	6861      	ldr	r1, [r4, #4]
 800ade0:	eb07 060a 	add.w	r6, r7, sl
 800ade4:	42b3      	cmp	r3, r6
 800ade6:	b085      	sub	sp, #20
 800ade8:	bfb8      	it	lt
 800adea:	3101      	addlt	r1, #1
 800adec:	f7ff fe8e 	bl	800ab0c <_Balloc>
 800adf0:	b930      	cbnz	r0, 800ae00 <__multiply+0x44>
 800adf2:	4602      	mov	r2, r0
 800adf4:	4b44      	ldr	r3, [pc, #272]	; (800af08 <__multiply+0x14c>)
 800adf6:	4845      	ldr	r0, [pc, #276]	; (800af0c <__multiply+0x150>)
 800adf8:	f240 115d 	movw	r1, #349	; 0x15d
 800adfc:	f001 f9f0 	bl	800c1e0 <__assert_func>
 800ae00:	f100 0514 	add.w	r5, r0, #20
 800ae04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae08:	462b      	mov	r3, r5
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	d321      	bcc.n	800ae54 <__multiply+0x98>
 800ae10:	f104 0314 	add.w	r3, r4, #20
 800ae14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae18:	f109 0314 	add.w	r3, r9, #20
 800ae1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae20:	9202      	str	r2, [sp, #8]
 800ae22:	1b3a      	subs	r2, r7, r4
 800ae24:	3a15      	subs	r2, #21
 800ae26:	f022 0203 	bic.w	r2, r2, #3
 800ae2a:	3204      	adds	r2, #4
 800ae2c:	f104 0115 	add.w	r1, r4, #21
 800ae30:	428f      	cmp	r7, r1
 800ae32:	bf38      	it	cc
 800ae34:	2204      	movcc	r2, #4
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	9a02      	ldr	r2, [sp, #8]
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d80c      	bhi.n	800ae5a <__multiply+0x9e>
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	dd03      	ble.n	800ae4c <__multiply+0x90>
 800ae44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d05a      	beq.n	800af02 <__multiply+0x146>
 800ae4c:	6106      	str	r6, [r0, #16]
 800ae4e:	b005      	add	sp, #20
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	f843 2b04 	str.w	r2, [r3], #4
 800ae58:	e7d8      	b.n	800ae0c <__multiply+0x50>
 800ae5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae5e:	f1ba 0f00 	cmp.w	sl, #0
 800ae62:	d024      	beq.n	800aeae <__multiply+0xf2>
 800ae64:	f104 0e14 	add.w	lr, r4, #20
 800ae68:	46a9      	mov	r9, r5
 800ae6a:	f04f 0c00 	mov.w	ip, #0
 800ae6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae72:	f8d9 1000 	ldr.w	r1, [r9]
 800ae76:	fa1f fb82 	uxth.w	fp, r2
 800ae7a:	b289      	uxth	r1, r1
 800ae7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae84:	f8d9 2000 	ldr.w	r2, [r9]
 800ae88:	4461      	add	r1, ip
 800ae8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae96:	b289      	uxth	r1, r1
 800ae98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae9c:	4577      	cmp	r7, lr
 800ae9e:	f849 1b04 	str.w	r1, [r9], #4
 800aea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aea6:	d8e2      	bhi.n	800ae6e <__multiply+0xb2>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f845 c002 	str.w	ip, [r5, r2]
 800aeae:	9a03      	ldr	r2, [sp, #12]
 800aeb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	f1b9 0f00 	cmp.w	r9, #0
 800aeba:	d020      	beq.n	800aefe <__multiply+0x142>
 800aebc:	6829      	ldr	r1, [r5, #0]
 800aebe:	f104 0c14 	add.w	ip, r4, #20
 800aec2:	46ae      	mov	lr, r5
 800aec4:	f04f 0a00 	mov.w	sl, #0
 800aec8:	f8bc b000 	ldrh.w	fp, [ip]
 800aecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed0:	fb09 220b 	mla	r2, r9, fp, r2
 800aed4:	4492      	add	sl, r2
 800aed6:	b289      	uxth	r1, r1
 800aed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aedc:	f84e 1b04 	str.w	r1, [lr], #4
 800aee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee4:	f8be 1000 	ldrh.w	r1, [lr]
 800aee8:	0c12      	lsrs	r2, r2, #16
 800aeea:	fb09 1102 	mla	r1, r9, r2, r1
 800aeee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aef2:	4567      	cmp	r7, ip
 800aef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aef8:	d8e6      	bhi.n	800aec8 <__multiply+0x10c>
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	50a9      	str	r1, [r5, r2]
 800aefe:	3504      	adds	r5, #4
 800af00:	e79a      	b.n	800ae38 <__multiply+0x7c>
 800af02:	3e01      	subs	r6, #1
 800af04:	e79c      	b.n	800ae40 <__multiply+0x84>
 800af06:	bf00      	nop
 800af08:	0800ced8 	.word	0x0800ced8
 800af0c:	0800cf64 	.word	0x0800cf64

0800af10 <__pow5mult>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	4615      	mov	r5, r2
 800af16:	f012 0203 	ands.w	r2, r2, #3
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	d007      	beq.n	800af30 <__pow5mult+0x20>
 800af20:	4c25      	ldr	r4, [pc, #148]	; (800afb8 <__pow5mult+0xa8>)
 800af22:	3a01      	subs	r2, #1
 800af24:	2300      	movs	r3, #0
 800af26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2a:	f7ff fe51 	bl	800abd0 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	10ad      	asrs	r5, r5, #2
 800af32:	d03d      	beq.n	800afb0 <__pow5mult+0xa0>
 800af34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af36:	b97c      	cbnz	r4, 800af58 <__pow5mult+0x48>
 800af38:	2010      	movs	r0, #16
 800af3a:	f7ff fdcd 	bl	800aad8 <malloc>
 800af3e:	4602      	mov	r2, r0
 800af40:	6270      	str	r0, [r6, #36]	; 0x24
 800af42:	b928      	cbnz	r0, 800af50 <__pow5mult+0x40>
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <__pow5mult+0xac>)
 800af46:	481e      	ldr	r0, [pc, #120]	; (800afc0 <__pow5mult+0xb0>)
 800af48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af4c:	f001 f948 	bl	800c1e0 <__assert_func>
 800af50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af54:	6004      	str	r4, [r0, #0]
 800af56:	60c4      	str	r4, [r0, #12]
 800af58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af60:	b94c      	cbnz	r4, 800af76 <__pow5mult+0x66>
 800af62:	f240 2171 	movw	r1, #625	; 0x271
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ff12 	bl	800ad90 <__i2b>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af72:	4604      	mov	r4, r0
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	07eb      	lsls	r3, r5, #31
 800af7c:	d50a      	bpl.n	800af94 <__pow5mult+0x84>
 800af7e:	4639      	mov	r1, r7
 800af80:	4622      	mov	r2, r4
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff1a 	bl	800adbc <__multiply>
 800af88:	4639      	mov	r1, r7
 800af8a:	4680      	mov	r8, r0
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff fdfd 	bl	800ab8c <_Bfree>
 800af92:	4647      	mov	r7, r8
 800af94:	106d      	asrs	r5, r5, #1
 800af96:	d00b      	beq.n	800afb0 <__pow5mult+0xa0>
 800af98:	6820      	ldr	r0, [r4, #0]
 800af9a:	b938      	cbnz	r0, 800afac <__pow5mult+0x9c>
 800af9c:	4622      	mov	r2, r4
 800af9e:	4621      	mov	r1, r4
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff ff0b 	bl	800adbc <__multiply>
 800afa6:	6020      	str	r0, [r4, #0]
 800afa8:	f8c0 9000 	str.w	r9, [r0]
 800afac:	4604      	mov	r4, r0
 800afae:	e7e4      	b.n	800af7a <__pow5mult+0x6a>
 800afb0:	4638      	mov	r0, r7
 800afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb6:	bf00      	nop
 800afb8:	0800d0b0 	.word	0x0800d0b0
 800afbc:	0800ce66 	.word	0x0800ce66
 800afc0:	0800cf64 	.word	0x0800cf64

0800afc4 <__lshift>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	6849      	ldr	r1, [r1, #4]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	4607      	mov	r7, r0
 800afd6:	4691      	mov	r9, r2
 800afd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afdc:	f108 0601 	add.w	r6, r8, #1
 800afe0:	42b3      	cmp	r3, r6
 800afe2:	db0b      	blt.n	800affc <__lshift+0x38>
 800afe4:	4638      	mov	r0, r7
 800afe6:	f7ff fd91 	bl	800ab0c <_Balloc>
 800afea:	4605      	mov	r5, r0
 800afec:	b948      	cbnz	r0, 800b002 <__lshift+0x3e>
 800afee:	4602      	mov	r2, r0
 800aff0:	4b2a      	ldr	r3, [pc, #168]	; (800b09c <__lshift+0xd8>)
 800aff2:	482b      	ldr	r0, [pc, #172]	; (800b0a0 <__lshift+0xdc>)
 800aff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aff8:	f001 f8f2 	bl	800c1e0 <__assert_func>
 800affc:	3101      	adds	r1, #1
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	e7ee      	b.n	800afe0 <__lshift+0x1c>
 800b002:	2300      	movs	r3, #0
 800b004:	f100 0114 	add.w	r1, r0, #20
 800b008:	f100 0210 	add.w	r2, r0, #16
 800b00c:	4618      	mov	r0, r3
 800b00e:	4553      	cmp	r3, sl
 800b010:	db37      	blt.n	800b082 <__lshift+0xbe>
 800b012:	6920      	ldr	r0, [r4, #16]
 800b014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b018:	f104 0314 	add.w	r3, r4, #20
 800b01c:	f019 091f 	ands.w	r9, r9, #31
 800b020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b028:	d02f      	beq.n	800b08a <__lshift+0xc6>
 800b02a:	f1c9 0e20 	rsb	lr, r9, #32
 800b02e:	468a      	mov	sl, r1
 800b030:	f04f 0c00 	mov.w	ip, #0
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	fa02 f209 	lsl.w	r2, r2, r9
 800b03a:	ea42 020c 	orr.w	r2, r2, ip
 800b03e:	f84a 2b04 	str.w	r2, [sl], #4
 800b042:	f853 2b04 	ldr.w	r2, [r3], #4
 800b046:	4298      	cmp	r0, r3
 800b048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b04c:	d8f2      	bhi.n	800b034 <__lshift+0x70>
 800b04e:	1b03      	subs	r3, r0, r4
 800b050:	3b15      	subs	r3, #21
 800b052:	f023 0303 	bic.w	r3, r3, #3
 800b056:	3304      	adds	r3, #4
 800b058:	f104 0215 	add.w	r2, r4, #21
 800b05c:	4290      	cmp	r0, r2
 800b05e:	bf38      	it	cc
 800b060:	2304      	movcc	r3, #4
 800b062:	f841 c003 	str.w	ip, [r1, r3]
 800b066:	f1bc 0f00 	cmp.w	ip, #0
 800b06a:	d001      	beq.n	800b070 <__lshift+0xac>
 800b06c:	f108 0602 	add.w	r6, r8, #2
 800b070:	3e01      	subs	r6, #1
 800b072:	4638      	mov	r0, r7
 800b074:	612e      	str	r6, [r5, #16]
 800b076:	4621      	mov	r1, r4
 800b078:	f7ff fd88 	bl	800ab8c <_Bfree>
 800b07c:	4628      	mov	r0, r5
 800b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b082:	f842 0f04 	str.w	r0, [r2, #4]!
 800b086:	3301      	adds	r3, #1
 800b088:	e7c1      	b.n	800b00e <__lshift+0x4a>
 800b08a:	3904      	subs	r1, #4
 800b08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b090:	f841 2f04 	str.w	r2, [r1, #4]!
 800b094:	4298      	cmp	r0, r3
 800b096:	d8f9      	bhi.n	800b08c <__lshift+0xc8>
 800b098:	e7ea      	b.n	800b070 <__lshift+0xac>
 800b09a:	bf00      	nop
 800b09c:	0800ced8 	.word	0x0800ced8
 800b0a0:	0800cf64 	.word	0x0800cf64

0800b0a4 <__mcmp>:
 800b0a4:	b530      	push	{r4, r5, lr}
 800b0a6:	6902      	ldr	r2, [r0, #16]
 800b0a8:	690c      	ldr	r4, [r1, #16]
 800b0aa:	1b12      	subs	r2, r2, r4
 800b0ac:	d10e      	bne.n	800b0cc <__mcmp+0x28>
 800b0ae:	f100 0314 	add.w	r3, r0, #20
 800b0b2:	3114      	adds	r1, #20
 800b0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c4:	42a5      	cmp	r5, r4
 800b0c6:	d003      	beq.n	800b0d0 <__mcmp+0x2c>
 800b0c8:	d305      	bcc.n	800b0d6 <__mcmp+0x32>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	bd30      	pop	{r4, r5, pc}
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	d3f3      	bcc.n	800b0bc <__mcmp+0x18>
 800b0d4:	e7fa      	b.n	800b0cc <__mcmp+0x28>
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0da:	e7f7      	b.n	800b0cc <__mcmp+0x28>

0800b0dc <__mdiff>:
 800b0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	f7ff ffdb 	bl	800b0a4 <__mcmp>
 800b0ee:	1e05      	subs	r5, r0, #0
 800b0f0:	d110      	bne.n	800b114 <__mdiff+0x38>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff fd09 	bl	800ab0c <_Balloc>
 800b0fa:	b930      	cbnz	r0, 800b10a <__mdiff+0x2e>
 800b0fc:	4b3a      	ldr	r3, [pc, #232]	; (800b1e8 <__mdiff+0x10c>)
 800b0fe:	4602      	mov	r2, r0
 800b100:	f240 2132 	movw	r1, #562	; 0x232
 800b104:	4839      	ldr	r0, [pc, #228]	; (800b1ec <__mdiff+0x110>)
 800b106:	f001 f86b 	bl	800c1e0 <__assert_func>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	bfa4      	itt	ge
 800b116:	4643      	movge	r3, r8
 800b118:	46a0      	movge	r8, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b120:	bfa6      	itte	ge
 800b122:	461c      	movge	r4, r3
 800b124:	2500      	movge	r5, #0
 800b126:	2501      	movlt	r5, #1
 800b128:	f7ff fcf0 	bl	800ab0c <_Balloc>
 800b12c:	b920      	cbnz	r0, 800b138 <__mdiff+0x5c>
 800b12e:	4b2e      	ldr	r3, [pc, #184]	; (800b1e8 <__mdiff+0x10c>)
 800b130:	4602      	mov	r2, r0
 800b132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b136:	e7e5      	b.n	800b104 <__mdiff+0x28>
 800b138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b13c:	6926      	ldr	r6, [r4, #16]
 800b13e:	60c5      	str	r5, [r0, #12]
 800b140:	f104 0914 	add.w	r9, r4, #20
 800b144:	f108 0514 	add.w	r5, r8, #20
 800b148:	f100 0e14 	add.w	lr, r0, #20
 800b14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b154:	f108 0210 	add.w	r2, r8, #16
 800b158:	46f2      	mov	sl, lr
 800b15a:	2100      	movs	r1, #0
 800b15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b164:	fa1f f883 	uxth.w	r8, r3
 800b168:	fa11 f18b 	uxtah	r1, r1, fp
 800b16c:	0c1b      	lsrs	r3, r3, #16
 800b16e:	eba1 0808 	sub.w	r8, r1, r8
 800b172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b17a:	fa1f f888 	uxth.w	r8, r8
 800b17e:	1419      	asrs	r1, r3, #16
 800b180:	454e      	cmp	r6, r9
 800b182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b186:	f84a 3b04 	str.w	r3, [sl], #4
 800b18a:	d8e7      	bhi.n	800b15c <__mdiff+0x80>
 800b18c:	1b33      	subs	r3, r6, r4
 800b18e:	3b15      	subs	r3, #21
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	3304      	adds	r3, #4
 800b196:	3415      	adds	r4, #21
 800b198:	42a6      	cmp	r6, r4
 800b19a:	bf38      	it	cc
 800b19c:	2304      	movcc	r3, #4
 800b19e:	441d      	add	r5, r3
 800b1a0:	4473      	add	r3, lr
 800b1a2:	469e      	mov	lr, r3
 800b1a4:	462e      	mov	r6, r5
 800b1a6:	4566      	cmp	r6, ip
 800b1a8:	d30e      	bcc.n	800b1c8 <__mdiff+0xec>
 800b1aa:	f10c 0203 	add.w	r2, ip, #3
 800b1ae:	1b52      	subs	r2, r2, r5
 800b1b0:	f022 0203 	bic.w	r2, r2, #3
 800b1b4:	3d03      	subs	r5, #3
 800b1b6:	45ac      	cmp	ip, r5
 800b1b8:	bf38      	it	cc
 800b1ba:	2200      	movcc	r2, #0
 800b1bc:	441a      	add	r2, r3
 800b1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1c2:	b17b      	cbz	r3, 800b1e4 <__mdiff+0x108>
 800b1c4:	6107      	str	r7, [r0, #16]
 800b1c6:	e7a3      	b.n	800b110 <__mdiff+0x34>
 800b1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1cc:	fa11 f288 	uxtah	r2, r1, r8
 800b1d0:	1414      	asrs	r4, r2, #16
 800b1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1d6:	b292      	uxth	r2, r2
 800b1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e0:	1421      	asrs	r1, r4, #16
 800b1e2:	e7e0      	b.n	800b1a6 <__mdiff+0xca>
 800b1e4:	3f01      	subs	r7, #1
 800b1e6:	e7ea      	b.n	800b1be <__mdiff+0xe2>
 800b1e8:	0800ced8 	.word	0x0800ced8
 800b1ec:	0800cf64 	.word	0x0800cf64

0800b1f0 <__ulp>:
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	ed8d 0b00 	vstr	d0, [sp]
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	4912      	ldr	r1, [pc, #72]	; (800b244 <__ulp+0x54>)
 800b1fa:	4019      	ands	r1, r3
 800b1fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b200:	2900      	cmp	r1, #0
 800b202:	dd05      	ble.n	800b210 <__ulp+0x20>
 800b204:	2200      	movs	r2, #0
 800b206:	460b      	mov	r3, r1
 800b208:	ec43 2b10 	vmov	d0, r2, r3
 800b20c:	b002      	add	sp, #8
 800b20e:	4770      	bx	lr
 800b210:	4249      	negs	r1, r1
 800b212:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b216:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	da04      	bge.n	800b22e <__ulp+0x3e>
 800b224:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b228:	fa41 f300 	asr.w	r3, r1, r0
 800b22c:	e7ec      	b.n	800b208 <__ulp+0x18>
 800b22e:	f1a0 0114 	sub.w	r1, r0, #20
 800b232:	291e      	cmp	r1, #30
 800b234:	bfda      	itte	le
 800b236:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b23a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b23e:	2101      	movgt	r1, #1
 800b240:	460a      	mov	r2, r1
 800b242:	e7e1      	b.n	800b208 <__ulp+0x18>
 800b244:	7ff00000 	.word	0x7ff00000

0800b248 <__b2d>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	6905      	ldr	r5, [r0, #16]
 800b24c:	f100 0714 	add.w	r7, r0, #20
 800b250:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b254:	1f2e      	subs	r6, r5, #4
 800b256:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f7ff fd48 	bl	800acf0 <__hi0bits>
 800b260:	f1c0 0320 	rsb	r3, r0, #32
 800b264:	280a      	cmp	r0, #10
 800b266:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2e4 <__b2d+0x9c>
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	dc14      	bgt.n	800b298 <__b2d+0x50>
 800b26e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b272:	fa24 f10e 	lsr.w	r1, r4, lr
 800b276:	42b7      	cmp	r7, r6
 800b278:	ea41 030c 	orr.w	r3, r1, ip
 800b27c:	bf34      	ite	cc
 800b27e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b282:	2100      	movcs	r1, #0
 800b284:	3015      	adds	r0, #21
 800b286:	fa04 f000 	lsl.w	r0, r4, r0
 800b28a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b28e:	ea40 0201 	orr.w	r2, r0, r1
 800b292:	ec43 2b10 	vmov	d0, r2, r3
 800b296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b298:	42b7      	cmp	r7, r6
 800b29a:	bf3a      	itte	cc
 800b29c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2a4:	2100      	movcs	r1, #0
 800b2a6:	380b      	subs	r0, #11
 800b2a8:	d017      	beq.n	800b2da <__b2d+0x92>
 800b2aa:	f1c0 0c20 	rsb	ip, r0, #32
 800b2ae:	fa04 f500 	lsl.w	r5, r4, r0
 800b2b2:	42be      	cmp	r6, r7
 800b2b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2b8:	ea45 0504 	orr.w	r5, r5, r4
 800b2bc:	bf8c      	ite	hi
 800b2be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2c2:	2400      	movls	r4, #0
 800b2c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2c8:	fa01 f000 	lsl.w	r0, r1, r0
 800b2cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2d4:	ea40 0204 	orr.w	r2, r0, r4
 800b2d8:	e7db      	b.n	800b292 <__b2d+0x4a>
 800b2da:	ea44 030c 	orr.w	r3, r4, ip
 800b2de:	460a      	mov	r2, r1
 800b2e0:	e7d7      	b.n	800b292 <__b2d+0x4a>
 800b2e2:	bf00      	nop
 800b2e4:	3ff00000 	.word	0x3ff00000

0800b2e8 <__d2b>:
 800b2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	ec57 6b10 	vmov	r6, r7, d0
 800b2f4:	4690      	mov	r8, r2
 800b2f6:	f7ff fc09 	bl	800ab0c <_Balloc>
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	b930      	cbnz	r0, 800b30c <__d2b+0x24>
 800b2fe:	4602      	mov	r2, r0
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <__d2b+0xb0>)
 800b302:	4826      	ldr	r0, [pc, #152]	; (800b39c <__d2b+0xb4>)
 800b304:	f240 310a 	movw	r1, #778	; 0x30a
 800b308:	f000 ff6a 	bl	800c1e0 <__assert_func>
 800b30c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b314:	bb35      	cbnz	r5, 800b364 <__d2b+0x7c>
 800b316:	2e00      	cmp	r6, #0
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	d028      	beq.n	800b36e <__d2b+0x86>
 800b31c:	4668      	mov	r0, sp
 800b31e:	9600      	str	r6, [sp, #0]
 800b320:	f7ff fd06 	bl	800ad30 <__lo0bits>
 800b324:	9900      	ldr	r1, [sp, #0]
 800b326:	b300      	cbz	r0, 800b36a <__d2b+0x82>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	f1c0 0320 	rsb	r3, r0, #32
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	430b      	orrs	r3, r1
 800b334:	40c2      	lsrs	r2, r0
 800b336:	6163      	str	r3, [r4, #20]
 800b338:	9201      	str	r2, [sp, #4]
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	61a3      	str	r3, [r4, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bf14      	ite	ne
 800b342:	2202      	movne	r2, #2
 800b344:	2201      	moveq	r2, #1
 800b346:	6122      	str	r2, [r4, #16]
 800b348:	b1d5      	cbz	r5, 800b380 <__d2b+0x98>
 800b34a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b34e:	4405      	add	r5, r0
 800b350:	f8c9 5000 	str.w	r5, [r9]
 800b354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b358:	f8c8 0000 	str.w	r0, [r8]
 800b35c:	4620      	mov	r0, r4
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b368:	e7d5      	b.n	800b316 <__d2b+0x2e>
 800b36a:	6161      	str	r1, [r4, #20]
 800b36c:	e7e5      	b.n	800b33a <__d2b+0x52>
 800b36e:	a801      	add	r0, sp, #4
 800b370:	f7ff fcde 	bl	800ad30 <__lo0bits>
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	6163      	str	r3, [r4, #20]
 800b378:	2201      	movs	r2, #1
 800b37a:	6122      	str	r2, [r4, #16]
 800b37c:	3020      	adds	r0, #32
 800b37e:	e7e3      	b.n	800b348 <__d2b+0x60>
 800b380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b388:	f8c9 0000 	str.w	r0, [r9]
 800b38c:	6918      	ldr	r0, [r3, #16]
 800b38e:	f7ff fcaf 	bl	800acf0 <__hi0bits>
 800b392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b396:	e7df      	b.n	800b358 <__d2b+0x70>
 800b398:	0800ced8 	.word	0x0800ced8
 800b39c:	0800cf64 	.word	0x0800cf64

0800b3a0 <__ratio>:
 800b3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4688      	mov	r8, r1
 800b3a6:	4669      	mov	r1, sp
 800b3a8:	4681      	mov	r9, r0
 800b3aa:	f7ff ff4d 	bl	800b248 <__b2d>
 800b3ae:	a901      	add	r1, sp, #4
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	ec55 4b10 	vmov	r4, r5, d0
 800b3b6:	f7ff ff47 	bl	800b248 <__b2d>
 800b3ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b3c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3d0:	ec51 0b10 	vmov	r0, r1, d0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bfd6      	itet	le
 800b3d8:	460a      	movle	r2, r1
 800b3da:	462a      	movgt	r2, r5
 800b3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3e0:	468b      	mov	fp, r1
 800b3e2:	462f      	mov	r7, r5
 800b3e4:	bfd4      	ite	le
 800b3e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	ee10 2a10 	vmov	r2, s0
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	f7f5 fa50 	bl	800089c <__aeabi_ddiv>
 800b3fc:	ec41 0b10 	vmov	d0, r0, r1
 800b400:	b003      	add	sp, #12
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b406 <__copybits>:
 800b406:	3901      	subs	r1, #1
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	1149      	asrs	r1, r1, #5
 800b40c:	6914      	ldr	r4, [r2, #16]
 800b40e:	3101      	adds	r1, #1
 800b410:	f102 0314 	add.w	r3, r2, #20
 800b414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b41c:	1f05      	subs	r5, r0, #4
 800b41e:	42a3      	cmp	r3, r4
 800b420:	d30c      	bcc.n	800b43c <__copybits+0x36>
 800b422:	1aa3      	subs	r3, r4, r2
 800b424:	3b11      	subs	r3, #17
 800b426:	f023 0303 	bic.w	r3, r3, #3
 800b42a:	3211      	adds	r2, #17
 800b42c:	42a2      	cmp	r2, r4
 800b42e:	bf88      	it	hi
 800b430:	2300      	movhi	r3, #0
 800b432:	4418      	add	r0, r3
 800b434:	2300      	movs	r3, #0
 800b436:	4288      	cmp	r0, r1
 800b438:	d305      	bcc.n	800b446 <__copybits+0x40>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b440:	f845 6f04 	str.w	r6, [r5, #4]!
 800b444:	e7eb      	b.n	800b41e <__copybits+0x18>
 800b446:	f840 3b04 	str.w	r3, [r0], #4
 800b44a:	e7f4      	b.n	800b436 <__copybits+0x30>

0800b44c <__any_on>:
 800b44c:	f100 0214 	add.w	r2, r0, #20
 800b450:	6900      	ldr	r0, [r0, #16]
 800b452:	114b      	asrs	r3, r1, #5
 800b454:	4298      	cmp	r0, r3
 800b456:	b510      	push	{r4, lr}
 800b458:	db11      	blt.n	800b47e <__any_on+0x32>
 800b45a:	dd0a      	ble.n	800b472 <__any_on+0x26>
 800b45c:	f011 011f 	ands.w	r1, r1, #31
 800b460:	d007      	beq.n	800b472 <__any_on+0x26>
 800b462:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b466:	fa24 f001 	lsr.w	r0, r4, r1
 800b46a:	fa00 f101 	lsl.w	r1, r0, r1
 800b46e:	428c      	cmp	r4, r1
 800b470:	d10b      	bne.n	800b48a <__any_on+0x3e>
 800b472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b476:	4293      	cmp	r3, r2
 800b478:	d803      	bhi.n	800b482 <__any_on+0x36>
 800b47a:	2000      	movs	r0, #0
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	4603      	mov	r3, r0
 800b480:	e7f7      	b.n	800b472 <__any_on+0x26>
 800b482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b486:	2900      	cmp	r1, #0
 800b488:	d0f5      	beq.n	800b476 <__any_on+0x2a>
 800b48a:	2001      	movs	r0, #1
 800b48c:	e7f6      	b.n	800b47c <__any_on+0x30>

0800b48e <_calloc_r>:
 800b48e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b490:	fba1 2402 	umull	r2, r4, r1, r2
 800b494:	b94c      	cbnz	r4, 800b4aa <_calloc_r+0x1c>
 800b496:	4611      	mov	r1, r2
 800b498:	9201      	str	r2, [sp, #4]
 800b49a:	f000 f87b 	bl	800b594 <_malloc_r>
 800b49e:	9a01      	ldr	r2, [sp, #4]
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	b930      	cbnz	r0, 800b4b2 <_calloc_r+0x24>
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	b003      	add	sp, #12
 800b4a8:	bd30      	pop	{r4, r5, pc}
 800b4aa:	220c      	movs	r2, #12
 800b4ac:	6002      	str	r2, [r0, #0]
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	e7f8      	b.n	800b4a4 <_calloc_r+0x16>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	f7fc fb26 	bl	8007b04 <memset>
 800b4b8:	e7f4      	b.n	800b4a4 <_calloc_r+0x16>
	...

0800b4bc <_free_r>:
 800b4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d044      	beq.n	800b54c <_free_r+0x90>
 800b4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c6:	9001      	str	r0, [sp, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ce:	bfb8      	it	lt
 800b4d0:	18e4      	addlt	r4, r4, r3
 800b4d2:	f001 f889 	bl	800c5e8 <__malloc_lock>
 800b4d6:	4a1e      	ldr	r2, [pc, #120]	; (800b550 <_free_r+0x94>)
 800b4d8:	9801      	ldr	r0, [sp, #4]
 800b4da:	6813      	ldr	r3, [r2, #0]
 800b4dc:	b933      	cbnz	r3, 800b4ec <_free_r+0x30>
 800b4de:	6063      	str	r3, [r4, #4]
 800b4e0:	6014      	str	r4, [r2, #0]
 800b4e2:	b003      	add	sp, #12
 800b4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4e8:	f001 b884 	b.w	800c5f4 <__malloc_unlock>
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	d908      	bls.n	800b502 <_free_r+0x46>
 800b4f0:	6825      	ldr	r5, [r4, #0]
 800b4f2:	1961      	adds	r1, r4, r5
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf01      	itttt	eq
 800b4f8:	6819      	ldreq	r1, [r3, #0]
 800b4fa:	685b      	ldreq	r3, [r3, #4]
 800b4fc:	1949      	addeq	r1, r1, r5
 800b4fe:	6021      	streq	r1, [r4, #0]
 800b500:	e7ed      	b.n	800b4de <_free_r+0x22>
 800b502:	461a      	mov	r2, r3
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b10b      	cbz	r3, 800b50c <_free_r+0x50>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d9fa      	bls.n	800b502 <_free_r+0x46>
 800b50c:	6811      	ldr	r1, [r2, #0]
 800b50e:	1855      	adds	r5, r2, r1
 800b510:	42a5      	cmp	r5, r4
 800b512:	d10b      	bne.n	800b52c <_free_r+0x70>
 800b514:	6824      	ldr	r4, [r4, #0]
 800b516:	4421      	add	r1, r4
 800b518:	1854      	adds	r4, r2, r1
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	6011      	str	r1, [r2, #0]
 800b51e:	d1e0      	bne.n	800b4e2 <_free_r+0x26>
 800b520:	681c      	ldr	r4, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	6053      	str	r3, [r2, #4]
 800b526:	4421      	add	r1, r4
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	e7da      	b.n	800b4e2 <_free_r+0x26>
 800b52c:	d902      	bls.n	800b534 <_free_r+0x78>
 800b52e:	230c      	movs	r3, #12
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	e7d6      	b.n	800b4e2 <_free_r+0x26>
 800b534:	6825      	ldr	r5, [r4, #0]
 800b536:	1961      	adds	r1, r4, r5
 800b538:	428b      	cmp	r3, r1
 800b53a:	bf04      	itt	eq
 800b53c:	6819      	ldreq	r1, [r3, #0]
 800b53e:	685b      	ldreq	r3, [r3, #4]
 800b540:	6063      	str	r3, [r4, #4]
 800b542:	bf04      	itt	eq
 800b544:	1949      	addeq	r1, r1, r5
 800b546:	6021      	streq	r1, [r4, #0]
 800b548:	6054      	str	r4, [r2, #4]
 800b54a:	e7ca      	b.n	800b4e2 <_free_r+0x26>
 800b54c:	b003      	add	sp, #12
 800b54e:	bd30      	pop	{r4, r5, pc}
 800b550:	2000070c 	.word	0x2000070c

0800b554 <sbrk_aligned>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4e0e      	ldr	r6, [pc, #56]	; (800b590 <sbrk_aligned+0x3c>)
 800b558:	460c      	mov	r4, r1
 800b55a:	6831      	ldr	r1, [r6, #0]
 800b55c:	4605      	mov	r5, r0
 800b55e:	b911      	cbnz	r1, 800b566 <sbrk_aligned+0x12>
 800b560:	f000 fd26 	bl	800bfb0 <_sbrk_r>
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	4621      	mov	r1, r4
 800b568:	4628      	mov	r0, r5
 800b56a:	f000 fd21 	bl	800bfb0 <_sbrk_r>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <sbrk_aligned+0x34>
 800b572:	1cc4      	adds	r4, r0, #3
 800b574:	f024 0403 	bic.w	r4, r4, #3
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d007      	beq.n	800b58c <sbrk_aligned+0x38>
 800b57c:	1a21      	subs	r1, r4, r0
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 fd16 	bl	800bfb0 <_sbrk_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d101      	bne.n	800b58c <sbrk_aligned+0x38>
 800b588:	f04f 34ff 	mov.w	r4, #4294967295
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	20000710 	.word	0x20000710

0800b594 <_malloc_r>:
 800b594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	1ccd      	adds	r5, r1, #3
 800b59a:	f025 0503 	bic.w	r5, r5, #3
 800b59e:	3508      	adds	r5, #8
 800b5a0:	2d0c      	cmp	r5, #12
 800b5a2:	bf38      	it	cc
 800b5a4:	250c      	movcc	r5, #12
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	db01      	blt.n	800b5b0 <_malloc_r+0x1c>
 800b5ac:	42a9      	cmp	r1, r5
 800b5ae:	d905      	bls.n	800b5bc <_malloc_r+0x28>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	4e2e      	ldr	r6, [pc, #184]	; (800b678 <_malloc_r+0xe4>)
 800b5be:	f001 f813 	bl	800c5e8 <__malloc_lock>
 800b5c2:	6833      	ldr	r3, [r6, #0]
 800b5c4:	461c      	mov	r4, r3
 800b5c6:	bb34      	cbnz	r4, 800b616 <_malloc_r+0x82>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	f7ff ffc2 	bl	800b554 <sbrk_aligned>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	d14d      	bne.n	800b672 <_malloc_r+0xde>
 800b5d6:	6834      	ldr	r4, [r6, #0]
 800b5d8:	4626      	mov	r6, r4
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	d140      	bne.n	800b660 <_malloc_r+0xcc>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	eb04 0803 	add.w	r8, r4, r3
 800b5e8:	f000 fce2 	bl	800bfb0 <_sbrk_r>
 800b5ec:	4580      	cmp	r8, r0
 800b5ee:	d13a      	bne.n	800b666 <_malloc_r+0xd2>
 800b5f0:	6821      	ldr	r1, [r4, #0]
 800b5f2:	3503      	adds	r5, #3
 800b5f4:	1a6d      	subs	r5, r5, r1
 800b5f6:	f025 0503 	bic.w	r5, r5, #3
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2d0c      	cmp	r5, #12
 800b5fe:	bf38      	it	cc
 800b600:	250c      	movcc	r5, #12
 800b602:	4629      	mov	r1, r5
 800b604:	4638      	mov	r0, r7
 800b606:	f7ff ffa5 	bl	800b554 <sbrk_aligned>
 800b60a:	3001      	adds	r0, #1
 800b60c:	d02b      	beq.n	800b666 <_malloc_r+0xd2>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	442b      	add	r3, r5
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	e00e      	b.n	800b634 <_malloc_r+0xa0>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	1b52      	subs	r2, r2, r5
 800b61a:	d41e      	bmi.n	800b65a <_malloc_r+0xc6>
 800b61c:	2a0b      	cmp	r2, #11
 800b61e:	d916      	bls.n	800b64e <_malloc_r+0xba>
 800b620:	1961      	adds	r1, r4, r5
 800b622:	42a3      	cmp	r3, r4
 800b624:	6025      	str	r5, [r4, #0]
 800b626:	bf18      	it	ne
 800b628:	6059      	strne	r1, [r3, #4]
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	bf08      	it	eq
 800b62e:	6031      	streq	r1, [r6, #0]
 800b630:	5162      	str	r2, [r4, r5]
 800b632:	604b      	str	r3, [r1, #4]
 800b634:	4638      	mov	r0, r7
 800b636:	f104 060b 	add.w	r6, r4, #11
 800b63a:	f000 ffdb 	bl	800c5f4 <__malloc_unlock>
 800b63e:	f026 0607 	bic.w	r6, r6, #7
 800b642:	1d23      	adds	r3, r4, #4
 800b644:	1af2      	subs	r2, r6, r3
 800b646:	d0b6      	beq.n	800b5b6 <_malloc_r+0x22>
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	50a3      	str	r3, [r4, r2]
 800b64c:	e7b3      	b.n	800b5b6 <_malloc_r+0x22>
 800b64e:	6862      	ldr	r2, [r4, #4]
 800b650:	42a3      	cmp	r3, r4
 800b652:	bf0c      	ite	eq
 800b654:	6032      	streq	r2, [r6, #0]
 800b656:	605a      	strne	r2, [r3, #4]
 800b658:	e7ec      	b.n	800b634 <_malloc_r+0xa0>
 800b65a:	4623      	mov	r3, r4
 800b65c:	6864      	ldr	r4, [r4, #4]
 800b65e:	e7b2      	b.n	800b5c6 <_malloc_r+0x32>
 800b660:	4634      	mov	r4, r6
 800b662:	6876      	ldr	r6, [r6, #4]
 800b664:	e7b9      	b.n	800b5da <_malloc_r+0x46>
 800b666:	230c      	movs	r3, #12
 800b668:	603b      	str	r3, [r7, #0]
 800b66a:	4638      	mov	r0, r7
 800b66c:	f000 ffc2 	bl	800c5f4 <__malloc_unlock>
 800b670:	e7a1      	b.n	800b5b6 <_malloc_r+0x22>
 800b672:	6025      	str	r5, [r4, #0]
 800b674:	e7de      	b.n	800b634 <_malloc_r+0xa0>
 800b676:	bf00      	nop
 800b678:	2000070c 	.word	0x2000070c

0800b67c <__ssputs_r>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	688e      	ldr	r6, [r1, #8]
 800b682:	429e      	cmp	r6, r3
 800b684:	4682      	mov	sl, r0
 800b686:	460c      	mov	r4, r1
 800b688:	4690      	mov	r8, r2
 800b68a:	461f      	mov	r7, r3
 800b68c:	d838      	bhi.n	800b700 <__ssputs_r+0x84>
 800b68e:	898a      	ldrh	r2, [r1, #12]
 800b690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b694:	d032      	beq.n	800b6fc <__ssputs_r+0x80>
 800b696:	6825      	ldr	r5, [r4, #0]
 800b698:	6909      	ldr	r1, [r1, #16]
 800b69a:	eba5 0901 	sub.w	r9, r5, r1
 800b69e:	6965      	ldr	r5, [r4, #20]
 800b6a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	444b      	add	r3, r9
 800b6ac:	106d      	asrs	r5, r5, #1
 800b6ae:	429d      	cmp	r5, r3
 800b6b0:	bf38      	it	cc
 800b6b2:	461d      	movcc	r5, r3
 800b6b4:	0553      	lsls	r3, r2, #21
 800b6b6:	d531      	bpl.n	800b71c <__ssputs_r+0xa0>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7ff ff6b 	bl	800b594 <_malloc_r>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	b950      	cbnz	r0, 800b6d8 <__ssputs_r+0x5c>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	f8ca 3000 	str.w	r3, [sl]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d8:	6921      	ldr	r1, [r4, #16]
 800b6da:	464a      	mov	r2, r9
 800b6dc:	f7fc fa04 	bl	8007ae8 <memcpy>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	6126      	str	r6, [r4, #16]
 800b6ee:	6165      	str	r5, [r4, #20]
 800b6f0:	444e      	add	r6, r9
 800b6f2:	eba5 0509 	sub.w	r5, r5, r9
 800b6f6:	6026      	str	r6, [r4, #0]
 800b6f8:	60a5      	str	r5, [r4, #8]
 800b6fa:	463e      	mov	r6, r7
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	d900      	bls.n	800b702 <__ssputs_r+0x86>
 800b700:	463e      	mov	r6, r7
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	4632      	mov	r2, r6
 800b706:	4641      	mov	r1, r8
 800b708:	f000 ff54 	bl	800c5b4 <memmove>
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	1b9b      	subs	r3, r3, r6
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	4433      	add	r3, r6
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	2000      	movs	r0, #0
 800b71a:	e7db      	b.n	800b6d4 <__ssputs_r+0x58>
 800b71c:	462a      	mov	r2, r5
 800b71e:	f000 ff6f 	bl	800c600 <_realloc_r>
 800b722:	4606      	mov	r6, r0
 800b724:	2800      	cmp	r0, #0
 800b726:	d1e1      	bne.n	800b6ec <__ssputs_r+0x70>
 800b728:	6921      	ldr	r1, [r4, #16]
 800b72a:	4650      	mov	r0, sl
 800b72c:	f7ff fec6 	bl	800b4bc <_free_r>
 800b730:	e7c7      	b.n	800b6c2 <__ssputs_r+0x46>
	...

0800b734 <_svfiprintf_r>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	4698      	mov	r8, r3
 800b73a:	898b      	ldrh	r3, [r1, #12]
 800b73c:	061b      	lsls	r3, r3, #24
 800b73e:	b09d      	sub	sp, #116	; 0x74
 800b740:	4607      	mov	r7, r0
 800b742:	460d      	mov	r5, r1
 800b744:	4614      	mov	r4, r2
 800b746:	d50e      	bpl.n	800b766 <_svfiprintf_r+0x32>
 800b748:	690b      	ldr	r3, [r1, #16]
 800b74a:	b963      	cbnz	r3, 800b766 <_svfiprintf_r+0x32>
 800b74c:	2140      	movs	r1, #64	; 0x40
 800b74e:	f7ff ff21 	bl	800b594 <_malloc_r>
 800b752:	6028      	str	r0, [r5, #0]
 800b754:	6128      	str	r0, [r5, #16]
 800b756:	b920      	cbnz	r0, 800b762 <_svfiprintf_r+0x2e>
 800b758:	230c      	movs	r3, #12
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	e0d1      	b.n	800b906 <_svfiprintf_r+0x1d2>
 800b762:	2340      	movs	r3, #64	; 0x40
 800b764:	616b      	str	r3, [r5, #20]
 800b766:	2300      	movs	r3, #0
 800b768:	9309      	str	r3, [sp, #36]	; 0x24
 800b76a:	2320      	movs	r3, #32
 800b76c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b770:	f8cd 800c 	str.w	r8, [sp, #12]
 800b774:	2330      	movs	r3, #48	; 0x30
 800b776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b920 <_svfiprintf_r+0x1ec>
 800b77a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77e:	f04f 0901 	mov.w	r9, #1
 800b782:	4623      	mov	r3, r4
 800b784:	469a      	mov	sl, r3
 800b786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78a:	b10a      	cbz	r2, 800b790 <_svfiprintf_r+0x5c>
 800b78c:	2a25      	cmp	r2, #37	; 0x25
 800b78e:	d1f9      	bne.n	800b784 <_svfiprintf_r+0x50>
 800b790:	ebba 0b04 	subs.w	fp, sl, r4
 800b794:	d00b      	beq.n	800b7ae <_svfiprintf_r+0x7a>
 800b796:	465b      	mov	r3, fp
 800b798:	4622      	mov	r2, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff ff6d 	bl	800b67c <__ssputs_r>
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	f000 80aa 	beq.w	800b8fc <_svfiprintf_r+0x1c8>
 800b7a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7aa:	445a      	add	r2, fp
 800b7ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 80a2 	beq.w	800b8fc <_svfiprintf_r+0x1c8>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b7be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c2:	f10a 0a01 	add.w	sl, sl, #1
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d0:	4654      	mov	r4, sl
 800b7d2:	2205      	movs	r2, #5
 800b7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d8:	4851      	ldr	r0, [pc, #324]	; (800b920 <_svfiprintf_r+0x1ec>)
 800b7da:	f7f4 fd29 	bl	8000230 <memchr>
 800b7de:	9a04      	ldr	r2, [sp, #16]
 800b7e0:	b9d8      	cbnz	r0, 800b81a <_svfiprintf_r+0xe6>
 800b7e2:	06d0      	lsls	r0, r2, #27
 800b7e4:	bf44      	itt	mi
 800b7e6:	2320      	movmi	r3, #32
 800b7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ec:	0711      	lsls	r1, r2, #28
 800b7ee:	bf44      	itt	mi
 800b7f0:	232b      	movmi	r3, #43	; 0x2b
 800b7f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fc:	d015      	beq.n	800b82a <_svfiprintf_r+0xf6>
 800b7fe:	9a07      	ldr	r2, [sp, #28]
 800b800:	4654      	mov	r4, sl
 800b802:	2000      	movs	r0, #0
 800b804:	f04f 0c0a 	mov.w	ip, #10
 800b808:	4621      	mov	r1, r4
 800b80a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80e:	3b30      	subs	r3, #48	; 0x30
 800b810:	2b09      	cmp	r3, #9
 800b812:	d94e      	bls.n	800b8b2 <_svfiprintf_r+0x17e>
 800b814:	b1b0      	cbz	r0, 800b844 <_svfiprintf_r+0x110>
 800b816:	9207      	str	r2, [sp, #28]
 800b818:	e014      	b.n	800b844 <_svfiprintf_r+0x110>
 800b81a:	eba0 0308 	sub.w	r3, r0, r8
 800b81e:	fa09 f303 	lsl.w	r3, r9, r3
 800b822:	4313      	orrs	r3, r2
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	46a2      	mov	sl, r4
 800b828:	e7d2      	b.n	800b7d0 <_svfiprintf_r+0x9c>
 800b82a:	9b03      	ldr	r3, [sp, #12]
 800b82c:	1d19      	adds	r1, r3, #4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	9103      	str	r1, [sp, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	bfbb      	ittet	lt
 800b836:	425b      	neglt	r3, r3
 800b838:	f042 0202 	orrlt.w	r2, r2, #2
 800b83c:	9307      	strge	r3, [sp, #28]
 800b83e:	9307      	strlt	r3, [sp, #28]
 800b840:	bfb8      	it	lt
 800b842:	9204      	strlt	r2, [sp, #16]
 800b844:	7823      	ldrb	r3, [r4, #0]
 800b846:	2b2e      	cmp	r3, #46	; 0x2e
 800b848:	d10c      	bne.n	800b864 <_svfiprintf_r+0x130>
 800b84a:	7863      	ldrb	r3, [r4, #1]
 800b84c:	2b2a      	cmp	r3, #42	; 0x2a
 800b84e:	d135      	bne.n	800b8bc <_svfiprintf_r+0x188>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	1d1a      	adds	r2, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	9203      	str	r2, [sp, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfb8      	it	lt
 800b85c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b860:	3402      	adds	r4, #2
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b930 <_svfiprintf_r+0x1fc>
 800b868:	7821      	ldrb	r1, [r4, #0]
 800b86a:	2203      	movs	r2, #3
 800b86c:	4650      	mov	r0, sl
 800b86e:	f7f4 fcdf 	bl	8000230 <memchr>
 800b872:	b140      	cbz	r0, 800b886 <_svfiprintf_r+0x152>
 800b874:	2340      	movs	r3, #64	; 0x40
 800b876:	eba0 000a 	sub.w	r0, r0, sl
 800b87a:	fa03 f000 	lsl.w	r0, r3, r0
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	4303      	orrs	r3, r0
 800b882:	3401      	adds	r4, #1
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88a:	4826      	ldr	r0, [pc, #152]	; (800b924 <_svfiprintf_r+0x1f0>)
 800b88c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b890:	2206      	movs	r2, #6
 800b892:	f7f4 fccd 	bl	8000230 <memchr>
 800b896:	2800      	cmp	r0, #0
 800b898:	d038      	beq.n	800b90c <_svfiprintf_r+0x1d8>
 800b89a:	4b23      	ldr	r3, [pc, #140]	; (800b928 <_svfiprintf_r+0x1f4>)
 800b89c:	bb1b      	cbnz	r3, 800b8e6 <_svfiprintf_r+0x1b2>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	f023 0307 	bic.w	r3, r3, #7
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	9303      	str	r3, [sp, #12]
 800b8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ac:	4433      	add	r3, r6
 800b8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b0:	e767      	b.n	800b782 <_svfiprintf_r+0x4e>
 800b8b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	e7a5      	b.n	800b808 <_svfiprintf_r+0xd4>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	3401      	adds	r4, #1
 800b8c0:	9305      	str	r3, [sp, #20]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f04f 0c0a 	mov.w	ip, #10
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ce:	3a30      	subs	r2, #48	; 0x30
 800b8d0:	2a09      	cmp	r2, #9
 800b8d2:	d903      	bls.n	800b8dc <_svfiprintf_r+0x1a8>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0c5      	beq.n	800b864 <_svfiprintf_r+0x130>
 800b8d8:	9105      	str	r1, [sp, #20]
 800b8da:	e7c3      	b.n	800b864 <_svfiprintf_r+0x130>
 800b8dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e7f0      	b.n	800b8c8 <_svfiprintf_r+0x194>
 800b8e6:	ab03      	add	r3, sp, #12
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <_svfiprintf_r+0x1f8>)
 800b8ee:	a904      	add	r1, sp, #16
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f7fc f9af 	bl	8007c54 <_printf_float>
 800b8f6:	1c42      	adds	r2, r0, #1
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	d1d6      	bne.n	800b8aa <_svfiprintf_r+0x176>
 800b8fc:	89ab      	ldrh	r3, [r5, #12]
 800b8fe:	065b      	lsls	r3, r3, #25
 800b900:	f53f af2c 	bmi.w	800b75c <_svfiprintf_r+0x28>
 800b904:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b906:	b01d      	add	sp, #116	; 0x74
 800b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90c:	ab03      	add	r3, sp, #12
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	462a      	mov	r2, r5
 800b912:	4b06      	ldr	r3, [pc, #24]	; (800b92c <_svfiprintf_r+0x1f8>)
 800b914:	a904      	add	r1, sp, #16
 800b916:	4638      	mov	r0, r7
 800b918:	f7fc fc40 	bl	800819c <_printf_i>
 800b91c:	e7eb      	b.n	800b8f6 <_svfiprintf_r+0x1c2>
 800b91e:	bf00      	nop
 800b920:	0800d0bc 	.word	0x0800d0bc
 800b924:	0800d0c6 	.word	0x0800d0c6
 800b928:	08007c55 	.word	0x08007c55
 800b92c:	0800b67d 	.word	0x0800b67d
 800b930:	0800d0c2 	.word	0x0800d0c2

0800b934 <_sungetc_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	1c4b      	adds	r3, r1, #1
 800b938:	4614      	mov	r4, r2
 800b93a:	d103      	bne.n	800b944 <_sungetc_r+0x10>
 800b93c:	f04f 35ff 	mov.w	r5, #4294967295
 800b940:	4628      	mov	r0, r5
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	8993      	ldrh	r3, [r2, #12]
 800b946:	f023 0320 	bic.w	r3, r3, #32
 800b94a:	8193      	strh	r3, [r2, #12]
 800b94c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b94e:	6852      	ldr	r2, [r2, #4]
 800b950:	b2cd      	uxtb	r5, r1
 800b952:	b18b      	cbz	r3, 800b978 <_sungetc_r+0x44>
 800b954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b956:	4293      	cmp	r3, r2
 800b958:	dd08      	ble.n	800b96c <_sungetc_r+0x38>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	1e5a      	subs	r2, r3, #1
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	3301      	adds	r3, #1
 800b968:	6063      	str	r3, [r4, #4]
 800b96a:	e7e9      	b.n	800b940 <_sungetc_r+0xc>
 800b96c:	4621      	mov	r1, r4
 800b96e:	f000 fbef 	bl	800c150 <__submore>
 800b972:	2800      	cmp	r0, #0
 800b974:	d0f1      	beq.n	800b95a <_sungetc_r+0x26>
 800b976:	e7e1      	b.n	800b93c <_sungetc_r+0x8>
 800b978:	6921      	ldr	r1, [r4, #16]
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	b151      	cbz	r1, 800b994 <_sungetc_r+0x60>
 800b97e:	4299      	cmp	r1, r3
 800b980:	d208      	bcs.n	800b994 <_sungetc_r+0x60>
 800b982:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b986:	42a9      	cmp	r1, r5
 800b988:	d104      	bne.n	800b994 <_sungetc_r+0x60>
 800b98a:	3b01      	subs	r3, #1
 800b98c:	3201      	adds	r2, #1
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	6062      	str	r2, [r4, #4]
 800b992:	e7d5      	b.n	800b940 <_sungetc_r+0xc>
 800b994:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b99c:	6363      	str	r3, [r4, #52]	; 0x34
 800b99e:	2303      	movs	r3, #3
 800b9a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e7dc      	b.n	800b968 <_sungetc_r+0x34>

0800b9ae <__ssrefill_r>:
 800b9ae:	b510      	push	{r4, lr}
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9b4:	b169      	cbz	r1, 800b9d2 <__ssrefill_r+0x24>
 800b9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	d001      	beq.n	800b9c2 <__ssrefill_r+0x14>
 800b9be:	f7ff fd7d 	bl	800b4bc <_free_r>
 800b9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9c4:	6063      	str	r3, [r4, #4]
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ca:	b113      	cbz	r3, 800b9d2 <__ssrefill_r+0x24>
 800b9cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	6063      	str	r3, [r4, #4]
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	f043 0320 	orr.w	r3, r3, #32
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	e7f3      	b.n	800b9d0 <__ssrefill_r+0x22>

0800b9e8 <__ssvfiscanf_r>:
 800b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b9f8:	49a6      	ldr	r1, [pc, #664]	; (800bc94 <__ssvfiscanf_r+0x2ac>)
 800b9fa:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9fc:	f10d 0804 	add.w	r8, sp, #4
 800ba00:	49a5      	ldr	r1, [pc, #660]	; (800bc98 <__ssvfiscanf_r+0x2b0>)
 800ba02:	4fa6      	ldr	r7, [pc, #664]	; (800bc9c <__ssvfiscanf_r+0x2b4>)
 800ba04:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bca0 <__ssvfiscanf_r+0x2b8>
 800ba08:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	7813      	ldrb	r3, [r2, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 815a 	beq.w	800bcce <__ssvfiscanf_r+0x2e6>
 800ba1a:	5dd9      	ldrb	r1, [r3, r7]
 800ba1c:	f011 0108 	ands.w	r1, r1, #8
 800ba20:	f102 0501 	add.w	r5, r2, #1
 800ba24:	d019      	beq.n	800ba5a <__ssvfiscanf_r+0x72>
 800ba26:	6863      	ldr	r3, [r4, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dd0f      	ble.n	800ba4c <__ssvfiscanf_r+0x64>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	5cba      	ldrb	r2, [r7, r2]
 800ba32:	0712      	lsls	r2, r2, #28
 800ba34:	d401      	bmi.n	800ba3a <__ssvfiscanf_r+0x52>
 800ba36:	462a      	mov	r2, r5
 800ba38:	e7eb      	b.n	800ba12 <__ssvfiscanf_r+0x2a>
 800ba3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	9245      	str	r2, [sp, #276]	; 0x114
 800ba40:	6862      	ldr	r2, [r4, #4]
 800ba42:	3301      	adds	r3, #1
 800ba44:	3a01      	subs	r2, #1
 800ba46:	6062      	str	r2, [r4, #4]
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	e7ec      	b.n	800ba26 <__ssvfiscanf_r+0x3e>
 800ba4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4630      	mov	r0, r6
 800ba52:	4798      	blx	r3
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d0e9      	beq.n	800ba2c <__ssvfiscanf_r+0x44>
 800ba58:	e7ed      	b.n	800ba36 <__ssvfiscanf_r+0x4e>
 800ba5a:	2b25      	cmp	r3, #37	; 0x25
 800ba5c:	d012      	beq.n	800ba84 <__ssvfiscanf_r+0x9c>
 800ba5e:	469a      	mov	sl, r3
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f340 8091 	ble.w	800bb8a <__ssvfiscanf_r+0x1a2>
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	7813      	ldrb	r3, [r2, #0]
 800ba6c:	4553      	cmp	r3, sl
 800ba6e:	f040 812e 	bne.w	800bcce <__ssvfiscanf_r+0x2e6>
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ba7a:	3201      	adds	r2, #1
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	9345      	str	r3, [sp, #276]	; 0x114
 800ba82:	e7d8      	b.n	800ba36 <__ssvfiscanf_r+0x4e>
 800ba84:	9141      	str	r1, [sp, #260]	; 0x104
 800ba86:	9143      	str	r1, [sp, #268]	; 0x10c
 800ba88:	7853      	ldrb	r3, [r2, #1]
 800ba8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8c:	bf02      	ittt	eq
 800ba8e:	2310      	moveq	r3, #16
 800ba90:	1c95      	addeq	r5, r2, #2
 800ba92:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba94:	220a      	movs	r2, #10
 800ba96:	46aa      	mov	sl, r5
 800ba98:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ba9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800baa0:	2b09      	cmp	r3, #9
 800baa2:	d91d      	bls.n	800bae0 <__ssvfiscanf_r+0xf8>
 800baa4:	487e      	ldr	r0, [pc, #504]	; (800bca0 <__ssvfiscanf_r+0x2b8>)
 800baa6:	2203      	movs	r2, #3
 800baa8:	f7f4 fbc2 	bl	8000230 <memchr>
 800baac:	b140      	cbz	r0, 800bac0 <__ssvfiscanf_r+0xd8>
 800baae:	2301      	movs	r3, #1
 800bab0:	eba0 0009 	sub.w	r0, r0, r9
 800bab4:	fa03 f000 	lsl.w	r0, r3, r0
 800bab8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800baba:	4318      	orrs	r0, r3
 800babc:	9041      	str	r0, [sp, #260]	; 0x104
 800babe:	4655      	mov	r5, sl
 800bac0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bac4:	2b78      	cmp	r3, #120	; 0x78
 800bac6:	d806      	bhi.n	800bad6 <__ssvfiscanf_r+0xee>
 800bac8:	2b57      	cmp	r3, #87	; 0x57
 800baca:	d810      	bhi.n	800baee <__ssvfiscanf_r+0x106>
 800bacc:	2b25      	cmp	r3, #37	; 0x25
 800bace:	d0c6      	beq.n	800ba5e <__ssvfiscanf_r+0x76>
 800bad0:	d856      	bhi.n	800bb80 <__ssvfiscanf_r+0x198>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d064      	beq.n	800bba0 <__ssvfiscanf_r+0x1b8>
 800bad6:	2303      	movs	r3, #3
 800bad8:	9347      	str	r3, [sp, #284]	; 0x11c
 800bada:	230a      	movs	r3, #10
 800badc:	9342      	str	r3, [sp, #264]	; 0x108
 800bade:	e071      	b.n	800bbc4 <__ssvfiscanf_r+0x1dc>
 800bae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bae2:	fb02 1103 	mla	r1, r2, r3, r1
 800bae6:	3930      	subs	r1, #48	; 0x30
 800bae8:	9143      	str	r1, [sp, #268]	; 0x10c
 800baea:	4655      	mov	r5, sl
 800baec:	e7d3      	b.n	800ba96 <__ssvfiscanf_r+0xae>
 800baee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800baf2:	2a20      	cmp	r2, #32
 800baf4:	d8ef      	bhi.n	800bad6 <__ssvfiscanf_r+0xee>
 800baf6:	a101      	add	r1, pc, #4	; (adr r1, 800bafc <__ssvfiscanf_r+0x114>)
 800baf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bafc:	0800bbaf 	.word	0x0800bbaf
 800bb00:	0800bad7 	.word	0x0800bad7
 800bb04:	0800bad7 	.word	0x0800bad7
 800bb08:	0800bc0d 	.word	0x0800bc0d
 800bb0c:	0800bad7 	.word	0x0800bad7
 800bb10:	0800bad7 	.word	0x0800bad7
 800bb14:	0800bad7 	.word	0x0800bad7
 800bb18:	0800bad7 	.word	0x0800bad7
 800bb1c:	0800bad7 	.word	0x0800bad7
 800bb20:	0800bad7 	.word	0x0800bad7
 800bb24:	0800bad7 	.word	0x0800bad7
 800bb28:	0800bc23 	.word	0x0800bc23
 800bb2c:	0800bbf9 	.word	0x0800bbf9
 800bb30:	0800bb87 	.word	0x0800bb87
 800bb34:	0800bb87 	.word	0x0800bb87
 800bb38:	0800bb87 	.word	0x0800bb87
 800bb3c:	0800bad7 	.word	0x0800bad7
 800bb40:	0800bbfd 	.word	0x0800bbfd
 800bb44:	0800bad7 	.word	0x0800bad7
 800bb48:	0800bad7 	.word	0x0800bad7
 800bb4c:	0800bad7 	.word	0x0800bad7
 800bb50:	0800bad7 	.word	0x0800bad7
 800bb54:	0800bc33 	.word	0x0800bc33
 800bb58:	0800bc05 	.word	0x0800bc05
 800bb5c:	0800bba7 	.word	0x0800bba7
 800bb60:	0800bad7 	.word	0x0800bad7
 800bb64:	0800bad7 	.word	0x0800bad7
 800bb68:	0800bc2f 	.word	0x0800bc2f
 800bb6c:	0800bad7 	.word	0x0800bad7
 800bb70:	0800bbf9 	.word	0x0800bbf9
 800bb74:	0800bad7 	.word	0x0800bad7
 800bb78:	0800bad7 	.word	0x0800bad7
 800bb7c:	0800bbaf 	.word	0x0800bbaf
 800bb80:	3b45      	subs	r3, #69	; 0x45
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d8a7      	bhi.n	800bad6 <__ssvfiscanf_r+0xee>
 800bb86:	2305      	movs	r3, #5
 800bb88:	e01b      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bb8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4630      	mov	r0, r6
 800bb90:	4798      	blx	r3
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f43f af68 	beq.w	800ba68 <__ssvfiscanf_r+0x80>
 800bb98:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	f040 808d 	bne.w	800bcba <__ssvfiscanf_r+0x2d2>
 800bba0:	f04f 30ff 	mov.w	r0, #4294967295
 800bba4:	e08f      	b.n	800bcc6 <__ssvfiscanf_r+0x2de>
 800bba6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bba8:	f042 0220 	orr.w	r2, r2, #32
 800bbac:	9241      	str	r2, [sp, #260]	; 0x104
 800bbae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbb4:	9241      	str	r2, [sp, #260]	; 0x104
 800bbb6:	2210      	movs	r2, #16
 800bbb8:	2b6f      	cmp	r3, #111	; 0x6f
 800bbba:	9242      	str	r2, [sp, #264]	; 0x108
 800bbbc:	bf34      	ite	cc
 800bbbe:	2303      	movcc	r3, #3
 800bbc0:	2304      	movcs	r3, #4
 800bbc2:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbc4:	6863      	ldr	r3, [r4, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dd42      	ble.n	800bc50 <__ssvfiscanf_r+0x268>
 800bbca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbcc:	0659      	lsls	r1, r3, #25
 800bbce:	d404      	bmi.n	800bbda <__ssvfiscanf_r+0x1f2>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	781a      	ldrb	r2, [r3, #0]
 800bbd4:	5cba      	ldrb	r2, [r7, r2]
 800bbd6:	0712      	lsls	r2, r2, #28
 800bbd8:	d441      	bmi.n	800bc5e <__ssvfiscanf_r+0x276>
 800bbda:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	dc50      	bgt.n	800bc82 <__ssvfiscanf_r+0x29a>
 800bbe0:	466b      	mov	r3, sp
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	a941      	add	r1, sp, #260	; 0x104
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f000 f876 	bl	800bcd8 <_scanf_chars>
 800bbec:	2801      	cmp	r0, #1
 800bbee:	d06e      	beq.n	800bcce <__ssvfiscanf_r+0x2e6>
 800bbf0:	2802      	cmp	r0, #2
 800bbf2:	f47f af20 	bne.w	800ba36 <__ssvfiscanf_r+0x4e>
 800bbf6:	e7cf      	b.n	800bb98 <__ssvfiscanf_r+0x1b0>
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	e7dd      	b.n	800bbb8 <__ssvfiscanf_r+0x1d0>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9342      	str	r3, [sp, #264]	; 0x108
 800bc00:	2303      	movs	r3, #3
 800bc02:	e7de      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bc04:	2308      	movs	r3, #8
 800bc06:	9342      	str	r3, [sp, #264]	; 0x108
 800bc08:	2304      	movs	r3, #4
 800bc0a:	e7da      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f000 f9de 	bl	800bfd0 <__sccl>
 800bc14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc1a:	9341      	str	r3, [sp, #260]	; 0x104
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e7cf      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bc22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc28:	9341      	str	r3, [sp, #260]	; 0x104
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e7c9      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e7c7      	b.n	800bbc2 <__ssvfiscanf_r+0x1da>
 800bc32:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc34:	06c3      	lsls	r3, r0, #27
 800bc36:	f53f aefe 	bmi.w	800ba36 <__ssvfiscanf_r+0x4e>
 800bc3a:	9b00      	ldr	r3, [sp, #0]
 800bc3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc3e:	1d19      	adds	r1, r3, #4
 800bc40:	9100      	str	r1, [sp, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f010 0f01 	tst.w	r0, #1
 800bc48:	bf14      	ite	ne
 800bc4a:	801a      	strhne	r2, [r3, #0]
 800bc4c:	601a      	streq	r2, [r3, #0]
 800bc4e:	e6f2      	b.n	800ba36 <__ssvfiscanf_r+0x4e>
 800bc50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc52:	4621      	mov	r1, r4
 800bc54:	4630      	mov	r0, r6
 800bc56:	4798      	blx	r3
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d0b6      	beq.n	800bbca <__ssvfiscanf_r+0x1e2>
 800bc5c:	e79c      	b.n	800bb98 <__ssvfiscanf_r+0x1b0>
 800bc5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc60:	3201      	adds	r2, #1
 800bc62:	9245      	str	r2, [sp, #276]	; 0x114
 800bc64:	6862      	ldr	r2, [r4, #4]
 800bc66:	3a01      	subs	r2, #1
 800bc68:	2a00      	cmp	r2, #0
 800bc6a:	6062      	str	r2, [r4, #4]
 800bc6c:	dd02      	ble.n	800bc74 <__ssvfiscanf_r+0x28c>
 800bc6e:	3301      	adds	r3, #1
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	e7ad      	b.n	800bbd0 <__ssvfiscanf_r+0x1e8>
 800bc74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc76:	4621      	mov	r1, r4
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4798      	blx	r3
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d0a7      	beq.n	800bbd0 <__ssvfiscanf_r+0x1e8>
 800bc80:	e78a      	b.n	800bb98 <__ssvfiscanf_r+0x1b0>
 800bc82:	2b04      	cmp	r3, #4
 800bc84:	dc0e      	bgt.n	800bca4 <__ssvfiscanf_r+0x2bc>
 800bc86:	466b      	mov	r3, sp
 800bc88:	4622      	mov	r2, r4
 800bc8a:	a941      	add	r1, sp, #260	; 0x104
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f000 f87d 	bl	800bd8c <_scanf_i>
 800bc92:	e7ab      	b.n	800bbec <__ssvfiscanf_r+0x204>
 800bc94:	0800b935 	.word	0x0800b935
 800bc98:	0800b9af 	.word	0x0800b9af
 800bc9c:	0800cd59 	.word	0x0800cd59
 800bca0:	0800d0c2 	.word	0x0800d0c2
 800bca4:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <__ssvfiscanf_r+0x2ec>)
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f43f aec5 	beq.w	800ba36 <__ssvfiscanf_r+0x4e>
 800bcac:	466b      	mov	r3, sp
 800bcae:	4622      	mov	r2, r4
 800bcb0:	a941      	add	r1, sp, #260	; 0x104
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7fc fb98 	bl	80083e8 <_scanf_float>
 800bcb8:	e798      	b.n	800bbec <__ssvfiscanf_r+0x204>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcc0:	bf18      	it	ne
 800bcc2:	f04f 30ff 	movne.w	r0, #4294967295
 800bcc6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcd0:	e7f9      	b.n	800bcc6 <__ssvfiscanf_r+0x2de>
 800bcd2:	bf00      	nop
 800bcd4:	080083e9 	.word	0x080083e9

0800bcd8 <_scanf_chars>:
 800bcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcdc:	4615      	mov	r5, r2
 800bcde:	688a      	ldr	r2, [r1, #8]
 800bce0:	4680      	mov	r8, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	b932      	cbnz	r2, 800bcf4 <_scanf_chars+0x1c>
 800bce6:	698a      	ldr	r2, [r1, #24]
 800bce8:	2a00      	cmp	r2, #0
 800bcea:	bf0c      	ite	eq
 800bcec:	2201      	moveq	r2, #1
 800bcee:	f04f 32ff 	movne.w	r2, #4294967295
 800bcf2:	608a      	str	r2, [r1, #8]
 800bcf4:	6822      	ldr	r2, [r4, #0]
 800bcf6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bd88 <_scanf_chars+0xb0>
 800bcfa:	06d1      	lsls	r1, r2, #27
 800bcfc:	bf5f      	itttt	pl
 800bcfe:	681a      	ldrpl	r2, [r3, #0]
 800bd00:	1d11      	addpl	r1, r2, #4
 800bd02:	6019      	strpl	r1, [r3, #0]
 800bd04:	6816      	ldrpl	r6, [r2, #0]
 800bd06:	2700      	movs	r7, #0
 800bd08:	69a0      	ldr	r0, [r4, #24]
 800bd0a:	b188      	cbz	r0, 800bd30 <_scanf_chars+0x58>
 800bd0c:	2801      	cmp	r0, #1
 800bd0e:	d107      	bne.n	800bd20 <_scanf_chars+0x48>
 800bd10:	682a      	ldr	r2, [r5, #0]
 800bd12:	7811      	ldrb	r1, [r2, #0]
 800bd14:	6962      	ldr	r2, [r4, #20]
 800bd16:	5c52      	ldrb	r2, [r2, r1]
 800bd18:	b952      	cbnz	r2, 800bd30 <_scanf_chars+0x58>
 800bd1a:	2f00      	cmp	r7, #0
 800bd1c:	d031      	beq.n	800bd82 <_scanf_chars+0xaa>
 800bd1e:	e022      	b.n	800bd66 <_scanf_chars+0x8e>
 800bd20:	2802      	cmp	r0, #2
 800bd22:	d120      	bne.n	800bd66 <_scanf_chars+0x8e>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bd2c:	071b      	lsls	r3, r3, #28
 800bd2e:	d41a      	bmi.n	800bd66 <_scanf_chars+0x8e>
 800bd30:	6823      	ldr	r3, [r4, #0]
 800bd32:	06da      	lsls	r2, r3, #27
 800bd34:	bf5e      	ittt	pl
 800bd36:	682b      	ldrpl	r3, [r5, #0]
 800bd38:	781b      	ldrbpl	r3, [r3, #0]
 800bd3a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd3e:	682a      	ldr	r2, [r5, #0]
 800bd40:	686b      	ldr	r3, [r5, #4]
 800bd42:	3201      	adds	r2, #1
 800bd44:	602a      	str	r2, [r5, #0]
 800bd46:	68a2      	ldr	r2, [r4, #8]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	3a01      	subs	r2, #1
 800bd4c:	606b      	str	r3, [r5, #4]
 800bd4e:	3701      	adds	r7, #1
 800bd50:	60a2      	str	r2, [r4, #8]
 800bd52:	b142      	cbz	r2, 800bd66 <_scanf_chars+0x8e>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	dcd7      	bgt.n	800bd08 <_scanf_chars+0x30>
 800bd58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4798      	blx	r3
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d0d0      	beq.n	800bd08 <_scanf_chars+0x30>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	f013 0310 	ands.w	r3, r3, #16
 800bd6c:	d105      	bne.n	800bd7a <_scanf_chars+0xa2>
 800bd6e:	68e2      	ldr	r2, [r4, #12]
 800bd70:	3201      	adds	r2, #1
 800bd72:	60e2      	str	r2, [r4, #12]
 800bd74:	69a2      	ldr	r2, [r4, #24]
 800bd76:	b102      	cbz	r2, 800bd7a <_scanf_chars+0xa2>
 800bd78:	7033      	strb	r3, [r6, #0]
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	443b      	add	r3, r7
 800bd7e:	6123      	str	r3, [r4, #16]
 800bd80:	2000      	movs	r0, #0
 800bd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd86:	bf00      	nop
 800bd88:	0800cd59 	.word	0x0800cd59

0800bd8c <_scanf_i>:
 800bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	4698      	mov	r8, r3
 800bd92:	4b76      	ldr	r3, [pc, #472]	; (800bf6c <_scanf_i+0x1e0>)
 800bd94:	460c      	mov	r4, r1
 800bd96:	4682      	mov	sl, r0
 800bd98:	4616      	mov	r6, r2
 800bd9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bda6:	4b72      	ldr	r3, [pc, #456]	; (800bf70 <_scanf_i+0x1e4>)
 800bda8:	69a1      	ldr	r1, [r4, #24]
 800bdaa:	4a72      	ldr	r2, [pc, #456]	; (800bf74 <_scanf_i+0x1e8>)
 800bdac:	2903      	cmp	r1, #3
 800bdae:	bf18      	it	ne
 800bdb0:	461a      	movne	r2, r3
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	9201      	str	r2, [sp, #4]
 800bdb6:	1e5a      	subs	r2, r3, #1
 800bdb8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdbc:	bf88      	it	hi
 800bdbe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdc2:	4627      	mov	r7, r4
 800bdc4:	bf82      	ittt	hi
 800bdc6:	eb03 0905 	addhi.w	r9, r3, r5
 800bdca:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdce:	60a3      	strhi	r3, [r4, #8]
 800bdd0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdd4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bdd8:	bf98      	it	ls
 800bdda:	f04f 0900 	movls.w	r9, #0
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	463d      	mov	r5, r7
 800bde2:	f04f 0b00 	mov.w	fp, #0
 800bde6:	6831      	ldr	r1, [r6, #0]
 800bde8:	ab03      	add	r3, sp, #12
 800bdea:	7809      	ldrb	r1, [r1, #0]
 800bdec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	f7f4 fa1d 	bl	8000230 <memchr>
 800bdf6:	b328      	cbz	r0, 800be44 <_scanf_i+0xb8>
 800bdf8:	f1bb 0f01 	cmp.w	fp, #1
 800bdfc:	d159      	bne.n	800beb2 <_scanf_i+0x126>
 800bdfe:	6862      	ldr	r2, [r4, #4]
 800be00:	b92a      	cbnz	r2, 800be0e <_scanf_i+0x82>
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	2308      	movs	r3, #8
 800be06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be0a:	6063      	str	r3, [r4, #4]
 800be0c:	6022      	str	r2, [r4, #0]
 800be0e:	6822      	ldr	r2, [r4, #0]
 800be10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800be14:	6022      	str	r2, [r4, #0]
 800be16:	68a2      	ldr	r2, [r4, #8]
 800be18:	1e51      	subs	r1, r2, #1
 800be1a:	60a1      	str	r1, [r4, #8]
 800be1c:	b192      	cbz	r2, 800be44 <_scanf_i+0xb8>
 800be1e:	6832      	ldr	r2, [r6, #0]
 800be20:	1c51      	adds	r1, r2, #1
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	7812      	ldrb	r2, [r2, #0]
 800be26:	f805 2b01 	strb.w	r2, [r5], #1
 800be2a:	6872      	ldr	r2, [r6, #4]
 800be2c:	3a01      	subs	r2, #1
 800be2e:	2a00      	cmp	r2, #0
 800be30:	6072      	str	r2, [r6, #4]
 800be32:	dc07      	bgt.n	800be44 <_scanf_i+0xb8>
 800be34:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be38:	4631      	mov	r1, r6
 800be3a:	4650      	mov	r0, sl
 800be3c:	4790      	blx	r2
 800be3e:	2800      	cmp	r0, #0
 800be40:	f040 8085 	bne.w	800bf4e <_scanf_i+0x1c2>
 800be44:	f10b 0b01 	add.w	fp, fp, #1
 800be48:	f1bb 0f03 	cmp.w	fp, #3
 800be4c:	d1cb      	bne.n	800bde6 <_scanf_i+0x5a>
 800be4e:	6863      	ldr	r3, [r4, #4]
 800be50:	b90b      	cbnz	r3, 800be56 <_scanf_i+0xca>
 800be52:	230a      	movs	r3, #10
 800be54:	6063      	str	r3, [r4, #4]
 800be56:	6863      	ldr	r3, [r4, #4]
 800be58:	4947      	ldr	r1, [pc, #284]	; (800bf78 <_scanf_i+0x1ec>)
 800be5a:	6960      	ldr	r0, [r4, #20]
 800be5c:	1ac9      	subs	r1, r1, r3
 800be5e:	f000 f8b7 	bl	800bfd0 <__sccl>
 800be62:	f04f 0b00 	mov.w	fp, #0
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d03d      	beq.n	800beea <_scanf_i+0x15e>
 800be6e:	6831      	ldr	r1, [r6, #0]
 800be70:	6960      	ldr	r0, [r4, #20]
 800be72:	f891 c000 	ldrb.w	ip, [r1]
 800be76:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d035      	beq.n	800beea <_scanf_i+0x15e>
 800be7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be82:	d124      	bne.n	800bece <_scanf_i+0x142>
 800be84:	0510      	lsls	r0, r2, #20
 800be86:	d522      	bpl.n	800bece <_scanf_i+0x142>
 800be88:	f10b 0b01 	add.w	fp, fp, #1
 800be8c:	f1b9 0f00 	cmp.w	r9, #0
 800be90:	d003      	beq.n	800be9a <_scanf_i+0x10e>
 800be92:	3301      	adds	r3, #1
 800be94:	f109 39ff 	add.w	r9, r9, #4294967295
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	6873      	ldr	r3, [r6, #4]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	6073      	str	r3, [r6, #4]
 800bea2:	dd1b      	ble.n	800bedc <_scanf_i+0x150>
 800bea4:	6833      	ldr	r3, [r6, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	6033      	str	r3, [r6, #0]
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	3b01      	subs	r3, #1
 800beae:	60a3      	str	r3, [r4, #8]
 800beb0:	e7d9      	b.n	800be66 <_scanf_i+0xda>
 800beb2:	f1bb 0f02 	cmp.w	fp, #2
 800beb6:	d1ae      	bne.n	800be16 <_scanf_i+0x8a>
 800beb8:	6822      	ldr	r2, [r4, #0]
 800beba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bebe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bec2:	d1bf      	bne.n	800be44 <_scanf_i+0xb8>
 800bec4:	2310      	movs	r3, #16
 800bec6:	6063      	str	r3, [r4, #4]
 800bec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800becc:	e7a2      	b.n	800be14 <_scanf_i+0x88>
 800bece:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bed2:	6022      	str	r2, [r4, #0]
 800bed4:	780b      	ldrb	r3, [r1, #0]
 800bed6:	f805 3b01 	strb.w	r3, [r5], #1
 800beda:	e7de      	b.n	800be9a <_scanf_i+0x10e>
 800bedc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bee0:	4631      	mov	r1, r6
 800bee2:	4650      	mov	r0, sl
 800bee4:	4798      	blx	r3
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d0df      	beq.n	800beaa <_scanf_i+0x11e>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	05db      	lsls	r3, r3, #23
 800beee:	d50d      	bpl.n	800bf0c <_scanf_i+0x180>
 800bef0:	42bd      	cmp	r5, r7
 800bef2:	d909      	bls.n	800bf08 <_scanf_i+0x17c>
 800bef4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800befc:	4632      	mov	r2, r6
 800befe:	4650      	mov	r0, sl
 800bf00:	4798      	blx	r3
 800bf02:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf06:	464d      	mov	r5, r9
 800bf08:	42bd      	cmp	r5, r7
 800bf0a:	d02d      	beq.n	800bf68 <_scanf_i+0x1dc>
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	f012 0210 	ands.w	r2, r2, #16
 800bf12:	d113      	bne.n	800bf3c <_scanf_i+0x1b0>
 800bf14:	702a      	strb	r2, [r5, #0]
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	9e01      	ldr	r6, [sp, #4]
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	4650      	mov	r0, sl
 800bf1e:	47b0      	blx	r6
 800bf20:	6821      	ldr	r1, [r4, #0]
 800bf22:	f8d8 3000 	ldr.w	r3, [r8]
 800bf26:	f011 0f20 	tst.w	r1, #32
 800bf2a:	d013      	beq.n	800bf54 <_scanf_i+0x1c8>
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	f8c8 2000 	str.w	r2, [r8]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6018      	str	r0, [r3, #0]
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	60e3      	str	r3, [r4, #12]
 800bf3c:	1bed      	subs	r5, r5, r7
 800bf3e:	44ab      	add	fp, r5
 800bf40:	6925      	ldr	r5, [r4, #16]
 800bf42:	445d      	add	r5, fp
 800bf44:	6125      	str	r5, [r4, #16]
 800bf46:	2000      	movs	r0, #0
 800bf48:	b007      	add	sp, #28
 800bf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4e:	f04f 0b00 	mov.w	fp, #0
 800bf52:	e7ca      	b.n	800beea <_scanf_i+0x15e>
 800bf54:	1d1a      	adds	r2, r3, #4
 800bf56:	f8c8 2000 	str.w	r2, [r8]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f011 0f01 	tst.w	r1, #1
 800bf60:	bf14      	ite	ne
 800bf62:	8018      	strhne	r0, [r3, #0]
 800bf64:	6018      	streq	r0, [r3, #0]
 800bf66:	e7e6      	b.n	800bf36 <_scanf_i+0x1aa>
 800bf68:	2001      	movs	r0, #1
 800bf6a:	e7ed      	b.n	800bf48 <_scanf_i+0x1bc>
 800bf6c:	0800cc80 	.word	0x0800cc80
 800bf70:	0800c14d 	.word	0x0800c14d
 800bf74:	0800968d 	.word	0x0800968d
 800bf78:	0800d0e6 	.word	0x0800d0e6

0800bf7c <_read_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4d07      	ldr	r5, [pc, #28]	; (800bf9c <_read_r+0x20>)
 800bf80:	4604      	mov	r4, r0
 800bf82:	4608      	mov	r0, r1
 800bf84:	4611      	mov	r1, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	602a      	str	r2, [r5, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f7f5 fe84 	bl	8001c98 <_read>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_read_r+0x1e>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_read_r+0x1e>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	20000714 	.word	0x20000714

0800bfa0 <nan>:
 800bfa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bfa8 <nan+0x8>
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	7ff80000 	.word	0x7ff80000

0800bfb0 <_sbrk_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d06      	ldr	r5, [pc, #24]	; (800bfcc <_sbrk_r+0x1c>)
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	f7f5 feda 	bl	8001d74 <_sbrk>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d102      	bne.n	800bfca <_sbrk_r+0x1a>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	b103      	cbz	r3, 800bfca <_sbrk_r+0x1a>
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	20000714 	.word	0x20000714

0800bfd0 <__sccl>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	780b      	ldrb	r3, [r1, #0]
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	2b5e      	cmp	r3, #94	; 0x5e
 800bfd8:	bf0b      	itete	eq
 800bfda:	784b      	ldrbeq	r3, [r1, #1]
 800bfdc:	1c48      	addne	r0, r1, #1
 800bfde:	1c88      	addeq	r0, r1, #2
 800bfe0:	2200      	movne	r2, #0
 800bfe2:	bf08      	it	eq
 800bfe4:	2201      	moveq	r2, #1
 800bfe6:	1e61      	subs	r1, r4, #1
 800bfe8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bfec:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bff0:	42a9      	cmp	r1, r5
 800bff2:	d1fb      	bne.n	800bfec <__sccl+0x1c>
 800bff4:	b90b      	cbnz	r3, 800bffa <__sccl+0x2a>
 800bff6:	3801      	subs	r0, #1
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	f082 0201 	eor.w	r2, r2, #1
 800bffe:	54e2      	strb	r2, [r4, r3]
 800c000:	4605      	mov	r5, r0
 800c002:	4628      	mov	r0, r5
 800c004:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c008:	292d      	cmp	r1, #45	; 0x2d
 800c00a:	d006      	beq.n	800c01a <__sccl+0x4a>
 800c00c:	295d      	cmp	r1, #93	; 0x5d
 800c00e:	d0f3      	beq.n	800bff8 <__sccl+0x28>
 800c010:	b909      	cbnz	r1, 800c016 <__sccl+0x46>
 800c012:	4628      	mov	r0, r5
 800c014:	e7f0      	b.n	800bff8 <__sccl+0x28>
 800c016:	460b      	mov	r3, r1
 800c018:	e7f1      	b.n	800bffe <__sccl+0x2e>
 800c01a:	786e      	ldrb	r6, [r5, #1]
 800c01c:	2e5d      	cmp	r6, #93	; 0x5d
 800c01e:	d0fa      	beq.n	800c016 <__sccl+0x46>
 800c020:	42b3      	cmp	r3, r6
 800c022:	dcf8      	bgt.n	800c016 <__sccl+0x46>
 800c024:	3502      	adds	r5, #2
 800c026:	4619      	mov	r1, r3
 800c028:	3101      	adds	r1, #1
 800c02a:	428e      	cmp	r6, r1
 800c02c:	5462      	strb	r2, [r4, r1]
 800c02e:	dcfb      	bgt.n	800c028 <__sccl+0x58>
 800c030:	1af1      	subs	r1, r6, r3
 800c032:	3901      	subs	r1, #1
 800c034:	1c58      	adds	r0, r3, #1
 800c036:	42b3      	cmp	r3, r6
 800c038:	bfa8      	it	ge
 800c03a:	2100      	movge	r1, #0
 800c03c:	1843      	adds	r3, r0, r1
 800c03e:	e7e0      	b.n	800c002 <__sccl+0x32>

0800c040 <strncmp>:
 800c040:	b510      	push	{r4, lr}
 800c042:	b17a      	cbz	r2, 800c064 <strncmp+0x24>
 800c044:	4603      	mov	r3, r0
 800c046:	3901      	subs	r1, #1
 800c048:	1884      	adds	r4, r0, r2
 800c04a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c04e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c052:	4290      	cmp	r0, r2
 800c054:	d101      	bne.n	800c05a <strncmp+0x1a>
 800c056:	42a3      	cmp	r3, r4
 800c058:	d101      	bne.n	800c05e <strncmp+0x1e>
 800c05a:	1a80      	subs	r0, r0, r2
 800c05c:	bd10      	pop	{r4, pc}
 800c05e:	2800      	cmp	r0, #0
 800c060:	d1f3      	bne.n	800c04a <strncmp+0xa>
 800c062:	e7fa      	b.n	800c05a <strncmp+0x1a>
 800c064:	4610      	mov	r0, r2
 800c066:	e7f9      	b.n	800c05c <strncmp+0x1c>

0800c068 <_strtoul_l.constprop.0>:
 800c068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4f36      	ldr	r7, [pc, #216]	; (800c148 <_strtoul_l.constprop.0+0xe0>)
 800c06e:	4686      	mov	lr, r0
 800c070:	460d      	mov	r5, r1
 800c072:	4628      	mov	r0, r5
 800c074:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c078:	5de6      	ldrb	r6, [r4, r7]
 800c07a:	f016 0608 	ands.w	r6, r6, #8
 800c07e:	d1f8      	bne.n	800c072 <_strtoul_l.constprop.0+0xa>
 800c080:	2c2d      	cmp	r4, #45	; 0x2d
 800c082:	d12f      	bne.n	800c0e4 <_strtoul_l.constprop.0+0x7c>
 800c084:	782c      	ldrb	r4, [r5, #0]
 800c086:	2601      	movs	r6, #1
 800c088:	1c85      	adds	r5, r0, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d057      	beq.n	800c13e <_strtoul_l.constprop.0+0xd6>
 800c08e:	2b10      	cmp	r3, #16
 800c090:	d109      	bne.n	800c0a6 <_strtoul_l.constprop.0+0x3e>
 800c092:	2c30      	cmp	r4, #48	; 0x30
 800c094:	d107      	bne.n	800c0a6 <_strtoul_l.constprop.0+0x3e>
 800c096:	7828      	ldrb	r0, [r5, #0]
 800c098:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c09c:	2858      	cmp	r0, #88	; 0x58
 800c09e:	d149      	bne.n	800c134 <_strtoul_l.constprop.0+0xcc>
 800c0a0:	786c      	ldrb	r4, [r5, #1]
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	3502      	adds	r5, #2
 800c0a6:	f04f 38ff 	mov.w	r8, #4294967295
 800c0aa:	2700      	movs	r7, #0
 800c0ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800c0b0:	fb03 f908 	mul.w	r9, r3, r8
 800c0b4:	ea6f 0909 	mvn.w	r9, r9
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c0be:	f1bc 0f09 	cmp.w	ip, #9
 800c0c2:	d814      	bhi.n	800c0ee <_strtoul_l.constprop.0+0x86>
 800c0c4:	4664      	mov	r4, ip
 800c0c6:	42a3      	cmp	r3, r4
 800c0c8:	dd22      	ble.n	800c110 <_strtoul_l.constprop.0+0xa8>
 800c0ca:	2f00      	cmp	r7, #0
 800c0cc:	db1d      	blt.n	800c10a <_strtoul_l.constprop.0+0xa2>
 800c0ce:	4580      	cmp	r8, r0
 800c0d0:	d31b      	bcc.n	800c10a <_strtoul_l.constprop.0+0xa2>
 800c0d2:	d101      	bne.n	800c0d8 <_strtoul_l.constprop.0+0x70>
 800c0d4:	45a1      	cmp	r9, r4
 800c0d6:	db18      	blt.n	800c10a <_strtoul_l.constprop.0+0xa2>
 800c0d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c0dc:	2701      	movs	r7, #1
 800c0de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0e2:	e7ea      	b.n	800c0ba <_strtoul_l.constprop.0+0x52>
 800c0e4:	2c2b      	cmp	r4, #43	; 0x2b
 800c0e6:	bf04      	itt	eq
 800c0e8:	782c      	ldrbeq	r4, [r5, #0]
 800c0ea:	1c85      	addeq	r5, r0, #2
 800c0ec:	e7cd      	b.n	800c08a <_strtoul_l.constprop.0+0x22>
 800c0ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c0f2:	f1bc 0f19 	cmp.w	ip, #25
 800c0f6:	d801      	bhi.n	800c0fc <_strtoul_l.constprop.0+0x94>
 800c0f8:	3c37      	subs	r4, #55	; 0x37
 800c0fa:	e7e4      	b.n	800c0c6 <_strtoul_l.constprop.0+0x5e>
 800c0fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c100:	f1bc 0f19 	cmp.w	ip, #25
 800c104:	d804      	bhi.n	800c110 <_strtoul_l.constprop.0+0xa8>
 800c106:	3c57      	subs	r4, #87	; 0x57
 800c108:	e7dd      	b.n	800c0c6 <_strtoul_l.constprop.0+0x5e>
 800c10a:	f04f 37ff 	mov.w	r7, #4294967295
 800c10e:	e7e6      	b.n	800c0de <_strtoul_l.constprop.0+0x76>
 800c110:	2f00      	cmp	r7, #0
 800c112:	da07      	bge.n	800c124 <_strtoul_l.constprop.0+0xbc>
 800c114:	2322      	movs	r3, #34	; 0x22
 800c116:	f8ce 3000 	str.w	r3, [lr]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	b932      	cbnz	r2, 800c12e <_strtoul_l.constprop.0+0xc6>
 800c120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c124:	b106      	cbz	r6, 800c128 <_strtoul_l.constprop.0+0xc0>
 800c126:	4240      	negs	r0, r0
 800c128:	2a00      	cmp	r2, #0
 800c12a:	d0f9      	beq.n	800c120 <_strtoul_l.constprop.0+0xb8>
 800c12c:	b107      	cbz	r7, 800c130 <_strtoul_l.constprop.0+0xc8>
 800c12e:	1e69      	subs	r1, r5, #1
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	e7f5      	b.n	800c120 <_strtoul_l.constprop.0+0xb8>
 800c134:	2430      	movs	r4, #48	; 0x30
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1b5      	bne.n	800c0a6 <_strtoul_l.constprop.0+0x3e>
 800c13a:	2308      	movs	r3, #8
 800c13c:	e7b3      	b.n	800c0a6 <_strtoul_l.constprop.0+0x3e>
 800c13e:	2c30      	cmp	r4, #48	; 0x30
 800c140:	d0a9      	beq.n	800c096 <_strtoul_l.constprop.0+0x2e>
 800c142:	230a      	movs	r3, #10
 800c144:	e7af      	b.n	800c0a6 <_strtoul_l.constprop.0+0x3e>
 800c146:	bf00      	nop
 800c148:	0800cd59 	.word	0x0800cd59

0800c14c <_strtoul_r>:
 800c14c:	f7ff bf8c 	b.w	800c068 <_strtoul_l.constprop.0>

0800c150 <__submore>:
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	460c      	mov	r4, r1
 800c156:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c15c:	4299      	cmp	r1, r3
 800c15e:	d11d      	bne.n	800c19c <__submore+0x4c>
 800c160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c164:	f7ff fa16 	bl	800b594 <_malloc_r>
 800c168:	b918      	cbnz	r0, 800c172 <__submore+0x22>
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c176:	63a3      	str	r3, [r4, #56]	; 0x38
 800c178:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c17c:	6360      	str	r0, [r4, #52]	; 0x34
 800c17e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c182:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c186:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c18a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c18e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c192:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	2000      	movs	r0, #0
 800c19a:	e7e8      	b.n	800c16e <__submore+0x1e>
 800c19c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c19e:	0077      	lsls	r7, r6, #1
 800c1a0:	463a      	mov	r2, r7
 800c1a2:	f000 fa2d 	bl	800c600 <_realloc_r>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d0de      	beq.n	800c16a <__submore+0x1a>
 800c1ac:	eb00 0806 	add.w	r8, r0, r6
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	f7fb fc97 	bl	8007ae8 <memcpy>
 800c1ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c1be:	f8c4 8000 	str.w	r8, [r4]
 800c1c2:	e7e9      	b.n	800c198 <__submore+0x48>

0800c1c4 <__ascii_wctomb>:
 800c1c4:	b149      	cbz	r1, 800c1da <__ascii_wctomb+0x16>
 800c1c6:	2aff      	cmp	r2, #255	; 0xff
 800c1c8:	bf85      	ittet	hi
 800c1ca:	238a      	movhi	r3, #138	; 0x8a
 800c1cc:	6003      	strhi	r3, [r0, #0]
 800c1ce:	700a      	strbls	r2, [r1, #0]
 800c1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1d4:	bf98      	it	ls
 800c1d6:	2001      	movls	r0, #1
 800c1d8:	4770      	bx	lr
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <__assert_func>:
 800c1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4b09      	ldr	r3, [pc, #36]	; (800c20c <__assert_func+0x2c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	68d8      	ldr	r0, [r3, #12]
 800c1ee:	b14c      	cbz	r4, 800c204 <__assert_func+0x24>
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <__assert_func+0x30>)
 800c1f2:	9100      	str	r1, [sp, #0]
 800c1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1f8:	4906      	ldr	r1, [pc, #24]	; (800c214 <__assert_func+0x34>)
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f000 f9a6 	bl	800c54c <fiprintf>
 800c200:	f000 fc46 	bl	800ca90 <abort>
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <__assert_func+0x38>)
 800c206:	461c      	mov	r4, r3
 800c208:	e7f3      	b.n	800c1f2 <__assert_func+0x12>
 800c20a:	bf00      	nop
 800c20c:	20000010 	.word	0x20000010
 800c210:	0800d0e8 	.word	0x0800d0e8
 800c214:	0800d0f5 	.word	0x0800d0f5
 800c218:	0800d123 	.word	0x0800d123

0800c21c <__sflush_r>:
 800c21c:	898a      	ldrh	r2, [r1, #12]
 800c21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	0710      	lsls	r0, r2, #28
 800c226:	460c      	mov	r4, r1
 800c228:	d458      	bmi.n	800c2dc <__sflush_r+0xc0>
 800c22a:	684b      	ldr	r3, [r1, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dc05      	bgt.n	800c23c <__sflush_r+0x20>
 800c230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	dc02      	bgt.n	800c23c <__sflush_r+0x20>
 800c236:	2000      	movs	r0, #0
 800c238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c23c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c23e:	2e00      	cmp	r6, #0
 800c240:	d0f9      	beq.n	800c236 <__sflush_r+0x1a>
 800c242:	2300      	movs	r3, #0
 800c244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c248:	682f      	ldr	r7, [r5, #0]
 800c24a:	602b      	str	r3, [r5, #0]
 800c24c:	d032      	beq.n	800c2b4 <__sflush_r+0x98>
 800c24e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	075a      	lsls	r2, r3, #29
 800c254:	d505      	bpl.n	800c262 <__sflush_r+0x46>
 800c256:	6863      	ldr	r3, [r4, #4]
 800c258:	1ac0      	subs	r0, r0, r3
 800c25a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c25c:	b10b      	cbz	r3, 800c262 <__sflush_r+0x46>
 800c25e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c260:	1ac0      	subs	r0, r0, r3
 800c262:	2300      	movs	r3, #0
 800c264:	4602      	mov	r2, r0
 800c266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c268:	6a21      	ldr	r1, [r4, #32]
 800c26a:	4628      	mov	r0, r5
 800c26c:	47b0      	blx	r6
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	d106      	bne.n	800c282 <__sflush_r+0x66>
 800c274:	6829      	ldr	r1, [r5, #0]
 800c276:	291d      	cmp	r1, #29
 800c278:	d82c      	bhi.n	800c2d4 <__sflush_r+0xb8>
 800c27a:	4a2a      	ldr	r2, [pc, #168]	; (800c324 <__sflush_r+0x108>)
 800c27c:	40ca      	lsrs	r2, r1
 800c27e:	07d6      	lsls	r6, r2, #31
 800c280:	d528      	bpl.n	800c2d4 <__sflush_r+0xb8>
 800c282:	2200      	movs	r2, #0
 800c284:	6062      	str	r2, [r4, #4]
 800c286:	04d9      	lsls	r1, r3, #19
 800c288:	6922      	ldr	r2, [r4, #16]
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	d504      	bpl.n	800c298 <__sflush_r+0x7c>
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	d101      	bne.n	800c296 <__sflush_r+0x7a>
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	b903      	cbnz	r3, 800c298 <__sflush_r+0x7c>
 800c296:	6560      	str	r0, [r4, #84]	; 0x54
 800c298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c29a:	602f      	str	r7, [r5, #0]
 800c29c:	2900      	cmp	r1, #0
 800c29e:	d0ca      	beq.n	800c236 <__sflush_r+0x1a>
 800c2a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	d002      	beq.n	800c2ae <__sflush_r+0x92>
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff f907 	bl	800b4bc <_free_r>
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2b2:	e7c1      	b.n	800c238 <__sflush_r+0x1c>
 800c2b4:	6a21      	ldr	r1, [r4, #32]
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b0      	blx	r6
 800c2bc:	1c41      	adds	r1, r0, #1
 800c2be:	d1c7      	bne.n	800c250 <__sflush_r+0x34>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0c4      	beq.n	800c250 <__sflush_r+0x34>
 800c2c6:	2b1d      	cmp	r3, #29
 800c2c8:	d001      	beq.n	800c2ce <__sflush_r+0xb2>
 800c2ca:	2b16      	cmp	r3, #22
 800c2cc:	d101      	bne.n	800c2d2 <__sflush_r+0xb6>
 800c2ce:	602f      	str	r7, [r5, #0]
 800c2d0:	e7b1      	b.n	800c236 <__sflush_r+0x1a>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d8:	81a3      	strh	r3, [r4, #12]
 800c2da:	e7ad      	b.n	800c238 <__sflush_r+0x1c>
 800c2dc:	690f      	ldr	r7, [r1, #16]
 800c2de:	2f00      	cmp	r7, #0
 800c2e0:	d0a9      	beq.n	800c236 <__sflush_r+0x1a>
 800c2e2:	0793      	lsls	r3, r2, #30
 800c2e4:	680e      	ldr	r6, [r1, #0]
 800c2e6:	bf08      	it	eq
 800c2e8:	694b      	ldreq	r3, [r1, #20]
 800c2ea:	600f      	str	r7, [r1, #0]
 800c2ec:	bf18      	it	ne
 800c2ee:	2300      	movne	r3, #0
 800c2f0:	eba6 0807 	sub.w	r8, r6, r7
 800c2f4:	608b      	str	r3, [r1, #8]
 800c2f6:	f1b8 0f00 	cmp.w	r8, #0
 800c2fa:	dd9c      	ble.n	800c236 <__sflush_r+0x1a>
 800c2fc:	6a21      	ldr	r1, [r4, #32]
 800c2fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c300:	4643      	mov	r3, r8
 800c302:	463a      	mov	r2, r7
 800c304:	4628      	mov	r0, r5
 800c306:	47b0      	blx	r6
 800c308:	2800      	cmp	r0, #0
 800c30a:	dc06      	bgt.n	800c31a <__sflush_r+0xfe>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c312:	81a3      	strh	r3, [r4, #12]
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e78e      	b.n	800c238 <__sflush_r+0x1c>
 800c31a:	4407      	add	r7, r0
 800c31c:	eba8 0800 	sub.w	r8, r8, r0
 800c320:	e7e9      	b.n	800c2f6 <__sflush_r+0xda>
 800c322:	bf00      	nop
 800c324:	20400001 	.word	0x20400001

0800c328 <_fflush_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	690b      	ldr	r3, [r1, #16]
 800c32c:	4605      	mov	r5, r0
 800c32e:	460c      	mov	r4, r1
 800c330:	b913      	cbnz	r3, 800c338 <_fflush_r+0x10>
 800c332:	2500      	movs	r5, #0
 800c334:	4628      	mov	r0, r5
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	b118      	cbz	r0, 800c342 <_fflush_r+0x1a>
 800c33a:	6983      	ldr	r3, [r0, #24]
 800c33c:	b90b      	cbnz	r3, 800c342 <_fflush_r+0x1a>
 800c33e:	f000 f887 	bl	800c450 <__sinit>
 800c342:	4b14      	ldr	r3, [pc, #80]	; (800c394 <_fflush_r+0x6c>)
 800c344:	429c      	cmp	r4, r3
 800c346:	d11b      	bne.n	800c380 <_fflush_r+0x58>
 800c348:	686c      	ldr	r4, [r5, #4]
 800c34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d0ef      	beq.n	800c332 <_fflush_r+0xa>
 800c352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c354:	07d0      	lsls	r0, r2, #31
 800c356:	d404      	bmi.n	800c362 <_fflush_r+0x3a>
 800c358:	0599      	lsls	r1, r3, #22
 800c35a:	d402      	bmi.n	800c362 <_fflush_r+0x3a>
 800c35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c35e:	f000 f927 	bl	800c5b0 <__retarget_lock_acquire_recursive>
 800c362:	4628      	mov	r0, r5
 800c364:	4621      	mov	r1, r4
 800c366:	f7ff ff59 	bl	800c21c <__sflush_r>
 800c36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c36c:	07da      	lsls	r2, r3, #31
 800c36e:	4605      	mov	r5, r0
 800c370:	d4e0      	bmi.n	800c334 <_fflush_r+0xc>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	059b      	lsls	r3, r3, #22
 800c376:	d4dd      	bmi.n	800c334 <_fflush_r+0xc>
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f000 f91a 	bl	800c5b2 <__retarget_lock_release_recursive>
 800c37e:	e7d9      	b.n	800c334 <_fflush_r+0xc>
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <_fflush_r+0x70>)
 800c382:	429c      	cmp	r4, r3
 800c384:	d101      	bne.n	800c38a <_fflush_r+0x62>
 800c386:	68ac      	ldr	r4, [r5, #8]
 800c388:	e7df      	b.n	800c34a <_fflush_r+0x22>
 800c38a:	4b04      	ldr	r3, [pc, #16]	; (800c39c <_fflush_r+0x74>)
 800c38c:	429c      	cmp	r4, r3
 800c38e:	bf08      	it	eq
 800c390:	68ec      	ldreq	r4, [r5, #12]
 800c392:	e7da      	b.n	800c34a <_fflush_r+0x22>
 800c394:	0800d144 	.word	0x0800d144
 800c398:	0800d164 	.word	0x0800d164
 800c39c:	0800d124 	.word	0x0800d124

0800c3a0 <std>:
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ae:	6083      	str	r3, [r0, #8]
 800c3b0:	8181      	strh	r1, [r0, #12]
 800c3b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c3b4:	81c2      	strh	r2, [r0, #14]
 800c3b6:	6183      	str	r3, [r0, #24]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	2208      	movs	r2, #8
 800c3bc:	305c      	adds	r0, #92	; 0x5c
 800c3be:	f7fb fba1 	bl	8007b04 <memset>
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <std+0x38>)
 800c3c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c3c6:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <std+0x3c>)
 800c3c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <std+0x40>)
 800c3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3ce:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <std+0x44>)
 800c3d0:	6224      	str	r4, [r4, #32]
 800c3d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	bf00      	nop
 800c3d8:	080088ad 	.word	0x080088ad
 800c3dc:	080088d3 	.word	0x080088d3
 800c3e0:	0800890b 	.word	0x0800890b
 800c3e4:	0800892f 	.word	0x0800892f

0800c3e8 <_cleanup_r>:
 800c3e8:	4901      	ldr	r1, [pc, #4]	; (800c3f0 <_cleanup_r+0x8>)
 800c3ea:	f000 b8c1 	b.w	800c570 <_fwalk_reent>
 800c3ee:	bf00      	nop
 800c3f0:	0800c329 	.word	0x0800c329

0800c3f4 <__sfmoreglue>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	2268      	movs	r2, #104	; 0x68
 800c3f8:	1e4d      	subs	r5, r1, #1
 800c3fa:	4355      	muls	r5, r2
 800c3fc:	460e      	mov	r6, r1
 800c3fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c402:	f7ff f8c7 	bl	800b594 <_malloc_r>
 800c406:	4604      	mov	r4, r0
 800c408:	b140      	cbz	r0, 800c41c <__sfmoreglue+0x28>
 800c40a:	2100      	movs	r1, #0
 800c40c:	e9c0 1600 	strd	r1, r6, [r0]
 800c410:	300c      	adds	r0, #12
 800c412:	60a0      	str	r0, [r4, #8]
 800c414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c418:	f7fb fb74 	bl	8007b04 <memset>
 800c41c:	4620      	mov	r0, r4
 800c41e:	bd70      	pop	{r4, r5, r6, pc}

0800c420 <__sfp_lock_acquire>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__sfp_lock_acquire+0x8>)
 800c422:	f000 b8c5 	b.w	800c5b0 <__retarget_lock_acquire_recursive>
 800c426:	bf00      	nop
 800c428:	20000719 	.word	0x20000719

0800c42c <__sfp_lock_release>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__sfp_lock_release+0x8>)
 800c42e:	f000 b8c0 	b.w	800c5b2 <__retarget_lock_release_recursive>
 800c432:	bf00      	nop
 800c434:	20000719 	.word	0x20000719

0800c438 <__sinit_lock_acquire>:
 800c438:	4801      	ldr	r0, [pc, #4]	; (800c440 <__sinit_lock_acquire+0x8>)
 800c43a:	f000 b8b9 	b.w	800c5b0 <__retarget_lock_acquire_recursive>
 800c43e:	bf00      	nop
 800c440:	2000071a 	.word	0x2000071a

0800c444 <__sinit_lock_release>:
 800c444:	4801      	ldr	r0, [pc, #4]	; (800c44c <__sinit_lock_release+0x8>)
 800c446:	f000 b8b4 	b.w	800c5b2 <__retarget_lock_release_recursive>
 800c44a:	bf00      	nop
 800c44c:	2000071a 	.word	0x2000071a

0800c450 <__sinit>:
 800c450:	b510      	push	{r4, lr}
 800c452:	4604      	mov	r4, r0
 800c454:	f7ff fff0 	bl	800c438 <__sinit_lock_acquire>
 800c458:	69a3      	ldr	r3, [r4, #24]
 800c45a:	b11b      	cbz	r3, 800c464 <__sinit+0x14>
 800c45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c460:	f7ff bff0 	b.w	800c444 <__sinit_lock_release>
 800c464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c468:	6523      	str	r3, [r4, #80]	; 0x50
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <__sinit+0x68>)
 800c46c:	4a13      	ldr	r2, [pc, #76]	; (800c4bc <__sinit+0x6c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	62a2      	str	r2, [r4, #40]	; 0x28
 800c472:	42a3      	cmp	r3, r4
 800c474:	bf04      	itt	eq
 800c476:	2301      	moveq	r3, #1
 800c478:	61a3      	streq	r3, [r4, #24]
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f820 	bl	800c4c0 <__sfp>
 800c480:	6060      	str	r0, [r4, #4]
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f81c 	bl	800c4c0 <__sfp>
 800c488:	60a0      	str	r0, [r4, #8]
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 f818 	bl	800c4c0 <__sfp>
 800c490:	2200      	movs	r2, #0
 800c492:	60e0      	str	r0, [r4, #12]
 800c494:	2104      	movs	r1, #4
 800c496:	6860      	ldr	r0, [r4, #4]
 800c498:	f7ff ff82 	bl	800c3a0 <std>
 800c49c:	68a0      	ldr	r0, [r4, #8]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	2109      	movs	r1, #9
 800c4a2:	f7ff ff7d 	bl	800c3a0 <std>
 800c4a6:	68e0      	ldr	r0, [r4, #12]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	2112      	movs	r1, #18
 800c4ac:	f7ff ff78 	bl	800c3a0 <std>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	61a3      	str	r3, [r4, #24]
 800c4b4:	e7d2      	b.n	800c45c <__sinit+0xc>
 800c4b6:	bf00      	nop
 800c4b8:	0800cccc 	.word	0x0800cccc
 800c4bc:	0800c3e9 	.word	0x0800c3e9

0800c4c0 <__sfp>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	f7ff ffac 	bl	800c420 <__sfp_lock_acquire>
 800c4c8:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <__sfp+0x84>)
 800c4ca:	681e      	ldr	r6, [r3, #0]
 800c4cc:	69b3      	ldr	r3, [r6, #24]
 800c4ce:	b913      	cbnz	r3, 800c4d6 <__sfp+0x16>
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7ff ffbd 	bl	800c450 <__sinit>
 800c4d6:	3648      	adds	r6, #72	; 0x48
 800c4d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	d503      	bpl.n	800c4e8 <__sfp+0x28>
 800c4e0:	6833      	ldr	r3, [r6, #0]
 800c4e2:	b30b      	cbz	r3, 800c528 <__sfp+0x68>
 800c4e4:	6836      	ldr	r6, [r6, #0]
 800c4e6:	e7f7      	b.n	800c4d8 <__sfp+0x18>
 800c4e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4ec:	b9d5      	cbnz	r5, 800c524 <__sfp+0x64>
 800c4ee:	4b16      	ldr	r3, [pc, #88]	; (800c548 <__sfp+0x88>)
 800c4f0:	60e3      	str	r3, [r4, #12]
 800c4f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4f6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4f8:	f000 f859 	bl	800c5ae <__retarget_lock_init_recursive>
 800c4fc:	f7ff ff96 	bl	800c42c <__sfp_lock_release>
 800c500:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c504:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c508:	6025      	str	r5, [r4, #0]
 800c50a:	61a5      	str	r5, [r4, #24]
 800c50c:	2208      	movs	r2, #8
 800c50e:	4629      	mov	r1, r5
 800c510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c514:	f7fb faf6 	bl	8007b04 <memset>
 800c518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c51c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c520:	4620      	mov	r0, r4
 800c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c524:	3468      	adds	r4, #104	; 0x68
 800c526:	e7d9      	b.n	800c4dc <__sfp+0x1c>
 800c528:	2104      	movs	r1, #4
 800c52a:	4638      	mov	r0, r7
 800c52c:	f7ff ff62 	bl	800c3f4 <__sfmoreglue>
 800c530:	4604      	mov	r4, r0
 800c532:	6030      	str	r0, [r6, #0]
 800c534:	2800      	cmp	r0, #0
 800c536:	d1d5      	bne.n	800c4e4 <__sfp+0x24>
 800c538:	f7ff ff78 	bl	800c42c <__sfp_lock_release>
 800c53c:	230c      	movs	r3, #12
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	e7ee      	b.n	800c520 <__sfp+0x60>
 800c542:	bf00      	nop
 800c544:	0800cccc 	.word	0x0800cccc
 800c548:	ffff0001 	.word	0xffff0001

0800c54c <fiprintf>:
 800c54c:	b40e      	push	{r1, r2, r3}
 800c54e:	b503      	push	{r0, r1, lr}
 800c550:	4601      	mov	r1, r0
 800c552:	ab03      	add	r3, sp, #12
 800c554:	4805      	ldr	r0, [pc, #20]	; (800c56c <fiprintf+0x20>)
 800c556:	f853 2b04 	ldr.w	r2, [r3], #4
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f000 f8a7 	bl	800c6b0 <_vfiprintf_r>
 800c562:	b002      	add	sp, #8
 800c564:	f85d eb04 	ldr.w	lr, [sp], #4
 800c568:	b003      	add	sp, #12
 800c56a:	4770      	bx	lr
 800c56c:	20000010 	.word	0x20000010

0800c570 <_fwalk_reent>:
 800c570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c574:	4606      	mov	r6, r0
 800c576:	4688      	mov	r8, r1
 800c578:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c57c:	2700      	movs	r7, #0
 800c57e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c582:	f1b9 0901 	subs.w	r9, r9, #1
 800c586:	d505      	bpl.n	800c594 <_fwalk_reent+0x24>
 800c588:	6824      	ldr	r4, [r4, #0]
 800c58a:	2c00      	cmp	r4, #0
 800c58c:	d1f7      	bne.n	800c57e <_fwalk_reent+0xe>
 800c58e:	4638      	mov	r0, r7
 800c590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c594:	89ab      	ldrh	r3, [r5, #12]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d907      	bls.n	800c5aa <_fwalk_reent+0x3a>
 800c59a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	d003      	beq.n	800c5aa <_fwalk_reent+0x3a>
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	47c0      	blx	r8
 800c5a8:	4307      	orrs	r7, r0
 800c5aa:	3568      	adds	r5, #104	; 0x68
 800c5ac:	e7e9      	b.n	800c582 <_fwalk_reent+0x12>

0800c5ae <__retarget_lock_init_recursive>:
 800c5ae:	4770      	bx	lr

0800c5b0 <__retarget_lock_acquire_recursive>:
 800c5b0:	4770      	bx	lr

0800c5b2 <__retarget_lock_release_recursive>:
 800c5b2:	4770      	bx	lr

0800c5b4 <memmove>:
 800c5b4:	4288      	cmp	r0, r1
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	eb01 0402 	add.w	r4, r1, r2
 800c5bc:	d902      	bls.n	800c5c4 <memmove+0x10>
 800c5be:	4284      	cmp	r4, r0
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	d807      	bhi.n	800c5d4 <memmove+0x20>
 800c5c4:	1e43      	subs	r3, r0, #1
 800c5c6:	42a1      	cmp	r1, r4
 800c5c8:	d008      	beq.n	800c5dc <memmove+0x28>
 800c5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5d2:	e7f8      	b.n	800c5c6 <memmove+0x12>
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	428a      	cmp	r2, r1
 800c5da:	d100      	bne.n	800c5de <memmove+0x2a>
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5e6:	e7f7      	b.n	800c5d8 <memmove+0x24>

0800c5e8 <__malloc_lock>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__malloc_lock+0x8>)
 800c5ea:	f7ff bfe1 	b.w	800c5b0 <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	20000718 	.word	0x20000718

0800c5f4 <__malloc_unlock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__malloc_unlock+0x8>)
 800c5f6:	f7ff bfdc 	b.w	800c5b2 <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	20000718 	.word	0x20000718

0800c600 <_realloc_r>:
 800c600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	4680      	mov	r8, r0
 800c606:	4614      	mov	r4, r2
 800c608:	460e      	mov	r6, r1
 800c60a:	b921      	cbnz	r1, 800c616 <_realloc_r+0x16>
 800c60c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	4611      	mov	r1, r2
 800c612:	f7fe bfbf 	b.w	800b594 <_malloc_r>
 800c616:	b92a      	cbnz	r2, 800c624 <_realloc_r+0x24>
 800c618:	f7fe ff50 	bl	800b4bc <_free_r>
 800c61c:	4625      	mov	r5, r4
 800c61e:	4628      	mov	r0, r5
 800c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c624:	f000 faa0 	bl	800cb68 <_malloc_usable_size_r>
 800c628:	4284      	cmp	r4, r0
 800c62a:	4607      	mov	r7, r0
 800c62c:	d802      	bhi.n	800c634 <_realloc_r+0x34>
 800c62e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c632:	d812      	bhi.n	800c65a <_realloc_r+0x5a>
 800c634:	4621      	mov	r1, r4
 800c636:	4640      	mov	r0, r8
 800c638:	f7fe ffac 	bl	800b594 <_malloc_r>
 800c63c:	4605      	mov	r5, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	d0ed      	beq.n	800c61e <_realloc_r+0x1e>
 800c642:	42bc      	cmp	r4, r7
 800c644:	4622      	mov	r2, r4
 800c646:	4631      	mov	r1, r6
 800c648:	bf28      	it	cs
 800c64a:	463a      	movcs	r2, r7
 800c64c:	f7fb fa4c 	bl	8007ae8 <memcpy>
 800c650:	4631      	mov	r1, r6
 800c652:	4640      	mov	r0, r8
 800c654:	f7fe ff32 	bl	800b4bc <_free_r>
 800c658:	e7e1      	b.n	800c61e <_realloc_r+0x1e>
 800c65a:	4635      	mov	r5, r6
 800c65c:	e7df      	b.n	800c61e <_realloc_r+0x1e>

0800c65e <__sfputc_r>:
 800c65e:	6893      	ldr	r3, [r2, #8]
 800c660:	3b01      	subs	r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	b410      	push	{r4}
 800c666:	6093      	str	r3, [r2, #8]
 800c668:	da08      	bge.n	800c67c <__sfputc_r+0x1e>
 800c66a:	6994      	ldr	r4, [r2, #24]
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	db01      	blt.n	800c674 <__sfputc_r+0x16>
 800c670:	290a      	cmp	r1, #10
 800c672:	d103      	bne.n	800c67c <__sfputc_r+0x1e>
 800c674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c678:	f000 b94a 	b.w	800c910 <__swbuf_r>
 800c67c:	6813      	ldr	r3, [r2, #0]
 800c67e:	1c58      	adds	r0, r3, #1
 800c680:	6010      	str	r0, [r2, #0]
 800c682:	7019      	strb	r1, [r3, #0]
 800c684:	4608      	mov	r0, r1
 800c686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <__sfputs_r>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	4606      	mov	r6, r0
 800c690:	460f      	mov	r7, r1
 800c692:	4614      	mov	r4, r2
 800c694:	18d5      	adds	r5, r2, r3
 800c696:	42ac      	cmp	r4, r5
 800c698:	d101      	bne.n	800c69e <__sfputs_r+0x12>
 800c69a:	2000      	movs	r0, #0
 800c69c:	e007      	b.n	800c6ae <__sfputs_r+0x22>
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	463a      	mov	r2, r7
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f7ff ffda 	bl	800c65e <__sfputc_r>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d1f3      	bne.n	800c696 <__sfputs_r+0xa>
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6b0 <_vfiprintf_r>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	b09d      	sub	sp, #116	; 0x74
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	4698      	mov	r8, r3
 800c6bc:	4606      	mov	r6, r0
 800c6be:	b118      	cbz	r0, 800c6c8 <_vfiprintf_r+0x18>
 800c6c0:	6983      	ldr	r3, [r0, #24]
 800c6c2:	b90b      	cbnz	r3, 800c6c8 <_vfiprintf_r+0x18>
 800c6c4:	f7ff fec4 	bl	800c450 <__sinit>
 800c6c8:	4b89      	ldr	r3, [pc, #548]	; (800c8f0 <_vfiprintf_r+0x240>)
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	d11b      	bne.n	800c706 <_vfiprintf_r+0x56>
 800c6ce:	6875      	ldr	r5, [r6, #4]
 800c6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d2:	07d9      	lsls	r1, r3, #31
 800c6d4:	d405      	bmi.n	800c6e2 <_vfiprintf_r+0x32>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	059a      	lsls	r2, r3, #22
 800c6da:	d402      	bmi.n	800c6e2 <_vfiprintf_r+0x32>
 800c6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6de:	f7ff ff67 	bl	800c5b0 <__retarget_lock_acquire_recursive>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	071b      	lsls	r3, r3, #28
 800c6e6:	d501      	bpl.n	800c6ec <_vfiprintf_r+0x3c>
 800c6e8:	692b      	ldr	r3, [r5, #16]
 800c6ea:	b9eb      	cbnz	r3, 800c728 <_vfiprintf_r+0x78>
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f000 f960 	bl	800c9b4 <__swsetup_r>
 800c6f4:	b1c0      	cbz	r0, 800c728 <_vfiprintf_r+0x78>
 800c6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f8:	07dc      	lsls	r4, r3, #31
 800c6fa:	d50e      	bpl.n	800c71a <_vfiprintf_r+0x6a>
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	b01d      	add	sp, #116	; 0x74
 800c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c706:	4b7b      	ldr	r3, [pc, #492]	; (800c8f4 <_vfiprintf_r+0x244>)
 800c708:	429d      	cmp	r5, r3
 800c70a:	d101      	bne.n	800c710 <_vfiprintf_r+0x60>
 800c70c:	68b5      	ldr	r5, [r6, #8]
 800c70e:	e7df      	b.n	800c6d0 <_vfiprintf_r+0x20>
 800c710:	4b79      	ldr	r3, [pc, #484]	; (800c8f8 <_vfiprintf_r+0x248>)
 800c712:	429d      	cmp	r5, r3
 800c714:	bf08      	it	eq
 800c716:	68f5      	ldreq	r5, [r6, #12]
 800c718:	e7da      	b.n	800c6d0 <_vfiprintf_r+0x20>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	0598      	lsls	r0, r3, #22
 800c71e:	d4ed      	bmi.n	800c6fc <_vfiprintf_r+0x4c>
 800c720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c722:	f7ff ff46 	bl	800c5b2 <__retarget_lock_release_recursive>
 800c726:	e7e9      	b.n	800c6fc <_vfiprintf_r+0x4c>
 800c728:	2300      	movs	r3, #0
 800c72a:	9309      	str	r3, [sp, #36]	; 0x24
 800c72c:	2320      	movs	r3, #32
 800c72e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c732:	f8cd 800c 	str.w	r8, [sp, #12]
 800c736:	2330      	movs	r3, #48	; 0x30
 800c738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8fc <_vfiprintf_r+0x24c>
 800c73c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c740:	f04f 0901 	mov.w	r9, #1
 800c744:	4623      	mov	r3, r4
 800c746:	469a      	mov	sl, r3
 800c748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c74c:	b10a      	cbz	r2, 800c752 <_vfiprintf_r+0xa2>
 800c74e:	2a25      	cmp	r2, #37	; 0x25
 800c750:	d1f9      	bne.n	800c746 <_vfiprintf_r+0x96>
 800c752:	ebba 0b04 	subs.w	fp, sl, r4
 800c756:	d00b      	beq.n	800c770 <_vfiprintf_r+0xc0>
 800c758:	465b      	mov	r3, fp
 800c75a:	4622      	mov	r2, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	4630      	mov	r0, r6
 800c760:	f7ff ff94 	bl	800c68c <__sfputs_r>
 800c764:	3001      	adds	r0, #1
 800c766:	f000 80aa 	beq.w	800c8be <_vfiprintf_r+0x20e>
 800c76a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c76c:	445a      	add	r2, fp
 800c76e:	9209      	str	r2, [sp, #36]	; 0x24
 800c770:	f89a 3000 	ldrb.w	r3, [sl]
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 80a2 	beq.w	800c8be <_vfiprintf_r+0x20e>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f04f 32ff 	mov.w	r2, #4294967295
 800c780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c784:	f10a 0a01 	add.w	sl, sl, #1
 800c788:	9304      	str	r3, [sp, #16]
 800c78a:	9307      	str	r3, [sp, #28]
 800c78c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c790:	931a      	str	r3, [sp, #104]	; 0x68
 800c792:	4654      	mov	r4, sl
 800c794:	2205      	movs	r2, #5
 800c796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79a:	4858      	ldr	r0, [pc, #352]	; (800c8fc <_vfiprintf_r+0x24c>)
 800c79c:	f7f3 fd48 	bl	8000230 <memchr>
 800c7a0:	9a04      	ldr	r2, [sp, #16]
 800c7a2:	b9d8      	cbnz	r0, 800c7dc <_vfiprintf_r+0x12c>
 800c7a4:	06d1      	lsls	r1, r2, #27
 800c7a6:	bf44      	itt	mi
 800c7a8:	2320      	movmi	r3, #32
 800c7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ae:	0713      	lsls	r3, r2, #28
 800c7b0:	bf44      	itt	mi
 800c7b2:	232b      	movmi	r3, #43	; 0x2b
 800c7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7be:	d015      	beq.n	800c7ec <_vfiprintf_r+0x13c>
 800c7c0:	9a07      	ldr	r2, [sp, #28]
 800c7c2:	4654      	mov	r4, sl
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	f04f 0c0a 	mov.w	ip, #10
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7d0:	3b30      	subs	r3, #48	; 0x30
 800c7d2:	2b09      	cmp	r3, #9
 800c7d4:	d94e      	bls.n	800c874 <_vfiprintf_r+0x1c4>
 800c7d6:	b1b0      	cbz	r0, 800c806 <_vfiprintf_r+0x156>
 800c7d8:	9207      	str	r2, [sp, #28]
 800c7da:	e014      	b.n	800c806 <_vfiprintf_r+0x156>
 800c7dc:	eba0 0308 	sub.w	r3, r0, r8
 800c7e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	46a2      	mov	sl, r4
 800c7ea:	e7d2      	b.n	800c792 <_vfiprintf_r+0xe2>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	1d19      	adds	r1, r3, #4
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	9103      	str	r1, [sp, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfbb      	ittet	lt
 800c7f8:	425b      	neglt	r3, r3
 800c7fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c7fe:	9307      	strge	r3, [sp, #28]
 800c800:	9307      	strlt	r3, [sp, #28]
 800c802:	bfb8      	it	lt
 800c804:	9204      	strlt	r2, [sp, #16]
 800c806:	7823      	ldrb	r3, [r4, #0]
 800c808:	2b2e      	cmp	r3, #46	; 0x2e
 800c80a:	d10c      	bne.n	800c826 <_vfiprintf_r+0x176>
 800c80c:	7863      	ldrb	r3, [r4, #1]
 800c80e:	2b2a      	cmp	r3, #42	; 0x2a
 800c810:	d135      	bne.n	800c87e <_vfiprintf_r+0x1ce>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	1d1a      	adds	r2, r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	9203      	str	r2, [sp, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bfb8      	it	lt
 800c81e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c822:	3402      	adds	r4, #2
 800c824:	9305      	str	r3, [sp, #20]
 800c826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c90c <_vfiprintf_r+0x25c>
 800c82a:	7821      	ldrb	r1, [r4, #0]
 800c82c:	2203      	movs	r2, #3
 800c82e:	4650      	mov	r0, sl
 800c830:	f7f3 fcfe 	bl	8000230 <memchr>
 800c834:	b140      	cbz	r0, 800c848 <_vfiprintf_r+0x198>
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	eba0 000a 	sub.w	r0, r0, sl
 800c83c:	fa03 f000 	lsl.w	r0, r3, r0
 800c840:	9b04      	ldr	r3, [sp, #16]
 800c842:	4303      	orrs	r3, r0
 800c844:	3401      	adds	r4, #1
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84c:	482c      	ldr	r0, [pc, #176]	; (800c900 <_vfiprintf_r+0x250>)
 800c84e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c852:	2206      	movs	r2, #6
 800c854:	f7f3 fcec 	bl	8000230 <memchr>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d03f      	beq.n	800c8dc <_vfiprintf_r+0x22c>
 800c85c:	4b29      	ldr	r3, [pc, #164]	; (800c904 <_vfiprintf_r+0x254>)
 800c85e:	bb1b      	cbnz	r3, 800c8a8 <_vfiprintf_r+0x1f8>
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	3307      	adds	r3, #7
 800c864:	f023 0307 	bic.w	r3, r3, #7
 800c868:	3308      	adds	r3, #8
 800c86a:	9303      	str	r3, [sp, #12]
 800c86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86e:	443b      	add	r3, r7
 800c870:	9309      	str	r3, [sp, #36]	; 0x24
 800c872:	e767      	b.n	800c744 <_vfiprintf_r+0x94>
 800c874:	fb0c 3202 	mla	r2, ip, r2, r3
 800c878:	460c      	mov	r4, r1
 800c87a:	2001      	movs	r0, #1
 800c87c:	e7a5      	b.n	800c7ca <_vfiprintf_r+0x11a>
 800c87e:	2300      	movs	r3, #0
 800c880:	3401      	adds	r4, #1
 800c882:	9305      	str	r3, [sp, #20]
 800c884:	4619      	mov	r1, r3
 800c886:	f04f 0c0a 	mov.w	ip, #10
 800c88a:	4620      	mov	r0, r4
 800c88c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c890:	3a30      	subs	r2, #48	; 0x30
 800c892:	2a09      	cmp	r2, #9
 800c894:	d903      	bls.n	800c89e <_vfiprintf_r+0x1ee>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0c5      	beq.n	800c826 <_vfiprintf_r+0x176>
 800c89a:	9105      	str	r1, [sp, #20]
 800c89c:	e7c3      	b.n	800c826 <_vfiprintf_r+0x176>
 800c89e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e7f0      	b.n	800c88a <_vfiprintf_r+0x1da>
 800c8a8:	ab03      	add	r3, sp, #12
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	4b16      	ldr	r3, [pc, #88]	; (800c908 <_vfiprintf_r+0x258>)
 800c8b0:	a904      	add	r1, sp, #16
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7fb f9ce 	bl	8007c54 <_printf_float>
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	1c78      	adds	r0, r7, #1
 800c8bc:	d1d6      	bne.n	800c86c <_vfiprintf_r+0x1bc>
 800c8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8c0:	07d9      	lsls	r1, r3, #31
 800c8c2:	d405      	bmi.n	800c8d0 <_vfiprintf_r+0x220>
 800c8c4:	89ab      	ldrh	r3, [r5, #12]
 800c8c6:	059a      	lsls	r2, r3, #22
 800c8c8:	d402      	bmi.n	800c8d0 <_vfiprintf_r+0x220>
 800c8ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8cc:	f7ff fe71 	bl	800c5b2 <__retarget_lock_release_recursive>
 800c8d0:	89ab      	ldrh	r3, [r5, #12]
 800c8d2:	065b      	lsls	r3, r3, #25
 800c8d4:	f53f af12 	bmi.w	800c6fc <_vfiprintf_r+0x4c>
 800c8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8da:	e711      	b.n	800c700 <_vfiprintf_r+0x50>
 800c8dc:	ab03      	add	r3, sp, #12
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	4b09      	ldr	r3, [pc, #36]	; (800c908 <_vfiprintf_r+0x258>)
 800c8e4:	a904      	add	r1, sp, #16
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fb fc58 	bl	800819c <_printf_i>
 800c8ec:	e7e4      	b.n	800c8b8 <_vfiprintf_r+0x208>
 800c8ee:	bf00      	nop
 800c8f0:	0800d144 	.word	0x0800d144
 800c8f4:	0800d164 	.word	0x0800d164
 800c8f8:	0800d124 	.word	0x0800d124
 800c8fc:	0800d0bc 	.word	0x0800d0bc
 800c900:	0800d0c6 	.word	0x0800d0c6
 800c904:	08007c55 	.word	0x08007c55
 800c908:	0800c68d 	.word	0x0800c68d
 800c90c:	0800d0c2 	.word	0x0800d0c2

0800c910 <__swbuf_r>:
 800c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c912:	460e      	mov	r6, r1
 800c914:	4614      	mov	r4, r2
 800c916:	4605      	mov	r5, r0
 800c918:	b118      	cbz	r0, 800c922 <__swbuf_r+0x12>
 800c91a:	6983      	ldr	r3, [r0, #24]
 800c91c:	b90b      	cbnz	r3, 800c922 <__swbuf_r+0x12>
 800c91e:	f7ff fd97 	bl	800c450 <__sinit>
 800c922:	4b21      	ldr	r3, [pc, #132]	; (800c9a8 <__swbuf_r+0x98>)
 800c924:	429c      	cmp	r4, r3
 800c926:	d12b      	bne.n	800c980 <__swbuf_r+0x70>
 800c928:	686c      	ldr	r4, [r5, #4]
 800c92a:	69a3      	ldr	r3, [r4, #24]
 800c92c:	60a3      	str	r3, [r4, #8]
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	071a      	lsls	r2, r3, #28
 800c932:	d52f      	bpl.n	800c994 <__swbuf_r+0x84>
 800c934:	6923      	ldr	r3, [r4, #16]
 800c936:	b36b      	cbz	r3, 800c994 <__swbuf_r+0x84>
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	6820      	ldr	r0, [r4, #0]
 800c93c:	1ac0      	subs	r0, r0, r3
 800c93e:	6963      	ldr	r3, [r4, #20]
 800c940:	b2f6      	uxtb	r6, r6
 800c942:	4283      	cmp	r3, r0
 800c944:	4637      	mov	r7, r6
 800c946:	dc04      	bgt.n	800c952 <__swbuf_r+0x42>
 800c948:	4621      	mov	r1, r4
 800c94a:	4628      	mov	r0, r5
 800c94c:	f7ff fcec 	bl	800c328 <_fflush_r>
 800c950:	bb30      	cbnz	r0, 800c9a0 <__swbuf_r+0x90>
 800c952:	68a3      	ldr	r3, [r4, #8]
 800c954:	3b01      	subs	r3, #1
 800c956:	60a3      	str	r3, [r4, #8]
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	6022      	str	r2, [r4, #0]
 800c95e:	701e      	strb	r6, [r3, #0]
 800c960:	6963      	ldr	r3, [r4, #20]
 800c962:	3001      	adds	r0, #1
 800c964:	4283      	cmp	r3, r0
 800c966:	d004      	beq.n	800c972 <__swbuf_r+0x62>
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	07db      	lsls	r3, r3, #31
 800c96c:	d506      	bpl.n	800c97c <__swbuf_r+0x6c>
 800c96e:	2e0a      	cmp	r6, #10
 800c970:	d104      	bne.n	800c97c <__swbuf_r+0x6c>
 800c972:	4621      	mov	r1, r4
 800c974:	4628      	mov	r0, r5
 800c976:	f7ff fcd7 	bl	800c328 <_fflush_r>
 800c97a:	b988      	cbnz	r0, 800c9a0 <__swbuf_r+0x90>
 800c97c:	4638      	mov	r0, r7
 800c97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <__swbuf_r+0x9c>)
 800c982:	429c      	cmp	r4, r3
 800c984:	d101      	bne.n	800c98a <__swbuf_r+0x7a>
 800c986:	68ac      	ldr	r4, [r5, #8]
 800c988:	e7cf      	b.n	800c92a <__swbuf_r+0x1a>
 800c98a:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <__swbuf_r+0xa0>)
 800c98c:	429c      	cmp	r4, r3
 800c98e:	bf08      	it	eq
 800c990:	68ec      	ldreq	r4, [r5, #12]
 800c992:	e7ca      	b.n	800c92a <__swbuf_r+0x1a>
 800c994:	4621      	mov	r1, r4
 800c996:	4628      	mov	r0, r5
 800c998:	f000 f80c 	bl	800c9b4 <__swsetup_r>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d0cb      	beq.n	800c938 <__swbuf_r+0x28>
 800c9a0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9a4:	e7ea      	b.n	800c97c <__swbuf_r+0x6c>
 800c9a6:	bf00      	nop
 800c9a8:	0800d144 	.word	0x0800d144
 800c9ac:	0800d164 	.word	0x0800d164
 800c9b0:	0800d124 	.word	0x0800d124

0800c9b4 <__swsetup_r>:
 800c9b4:	4b32      	ldr	r3, [pc, #200]	; (800ca80 <__swsetup_r+0xcc>)
 800c9b6:	b570      	push	{r4, r5, r6, lr}
 800c9b8:	681d      	ldr	r5, [r3, #0]
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460c      	mov	r4, r1
 800c9be:	b125      	cbz	r5, 800c9ca <__swsetup_r+0x16>
 800c9c0:	69ab      	ldr	r3, [r5, #24]
 800c9c2:	b913      	cbnz	r3, 800c9ca <__swsetup_r+0x16>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fd43 	bl	800c450 <__sinit>
 800c9ca:	4b2e      	ldr	r3, [pc, #184]	; (800ca84 <__swsetup_r+0xd0>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	d10f      	bne.n	800c9f0 <__swsetup_r+0x3c>
 800c9d0:	686c      	ldr	r4, [r5, #4]
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9d8:	0719      	lsls	r1, r3, #28
 800c9da:	d42c      	bmi.n	800ca36 <__swsetup_r+0x82>
 800c9dc:	06dd      	lsls	r5, r3, #27
 800c9de:	d411      	bmi.n	800ca04 <__swsetup_r+0x50>
 800c9e0:	2309      	movs	r3, #9
 800c9e2:	6033      	str	r3, [r6, #0]
 800c9e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ee:	e03e      	b.n	800ca6e <__swsetup_r+0xba>
 800c9f0:	4b25      	ldr	r3, [pc, #148]	; (800ca88 <__swsetup_r+0xd4>)
 800c9f2:	429c      	cmp	r4, r3
 800c9f4:	d101      	bne.n	800c9fa <__swsetup_r+0x46>
 800c9f6:	68ac      	ldr	r4, [r5, #8]
 800c9f8:	e7eb      	b.n	800c9d2 <__swsetup_r+0x1e>
 800c9fa:	4b24      	ldr	r3, [pc, #144]	; (800ca8c <__swsetup_r+0xd8>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	bf08      	it	eq
 800ca00:	68ec      	ldreq	r4, [r5, #12]
 800ca02:	e7e6      	b.n	800c9d2 <__swsetup_r+0x1e>
 800ca04:	0758      	lsls	r0, r3, #29
 800ca06:	d512      	bpl.n	800ca2e <__swsetup_r+0x7a>
 800ca08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca0a:	b141      	cbz	r1, 800ca1e <__swsetup_r+0x6a>
 800ca0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca10:	4299      	cmp	r1, r3
 800ca12:	d002      	beq.n	800ca1a <__swsetup_r+0x66>
 800ca14:	4630      	mov	r0, r6
 800ca16:	f7fe fd51 	bl	800b4bc <_free_r>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	2300      	movs	r3, #0
 800ca28:	6063      	str	r3, [r4, #4]
 800ca2a:	6923      	ldr	r3, [r4, #16]
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	f043 0308 	orr.w	r3, r3, #8
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	b94b      	cbnz	r3, 800ca4e <__swsetup_r+0x9a>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca44:	d003      	beq.n	800ca4e <__swsetup_r+0x9a>
 800ca46:	4621      	mov	r1, r4
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f000 f84d 	bl	800cae8 <__smakebuf_r>
 800ca4e:	89a0      	ldrh	r0, [r4, #12]
 800ca50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca54:	f010 0301 	ands.w	r3, r0, #1
 800ca58:	d00a      	beq.n	800ca70 <__swsetup_r+0xbc>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60a3      	str	r3, [r4, #8]
 800ca5e:	6963      	ldr	r3, [r4, #20]
 800ca60:	425b      	negs	r3, r3
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	b943      	cbnz	r3, 800ca7a <__swsetup_r+0xc6>
 800ca68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca6c:	d1ba      	bne.n	800c9e4 <__swsetup_r+0x30>
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}
 800ca70:	0781      	lsls	r1, r0, #30
 800ca72:	bf58      	it	pl
 800ca74:	6963      	ldrpl	r3, [r4, #20]
 800ca76:	60a3      	str	r3, [r4, #8]
 800ca78:	e7f4      	b.n	800ca64 <__swsetup_r+0xb0>
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	e7f7      	b.n	800ca6e <__swsetup_r+0xba>
 800ca7e:	bf00      	nop
 800ca80:	20000010 	.word	0x20000010
 800ca84:	0800d144 	.word	0x0800d144
 800ca88:	0800d164 	.word	0x0800d164
 800ca8c:	0800d124 	.word	0x0800d124

0800ca90 <abort>:
 800ca90:	b508      	push	{r3, lr}
 800ca92:	2006      	movs	r0, #6
 800ca94:	f000 f898 	bl	800cbc8 <raise>
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f7f5 f8f3 	bl	8001c84 <_exit>

0800ca9e <__swhatbuf_r>:
 800ca9e:	b570      	push	{r4, r5, r6, lr}
 800caa0:	460e      	mov	r6, r1
 800caa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa6:	2900      	cmp	r1, #0
 800caa8:	b096      	sub	sp, #88	; 0x58
 800caaa:	4614      	mov	r4, r2
 800caac:	461d      	mov	r5, r3
 800caae:	da08      	bge.n	800cac2 <__swhatbuf_r+0x24>
 800cab0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	602a      	str	r2, [r5, #0]
 800cab8:	061a      	lsls	r2, r3, #24
 800caba:	d410      	bmi.n	800cade <__swhatbuf_r+0x40>
 800cabc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cac0:	e00e      	b.n	800cae0 <__swhatbuf_r+0x42>
 800cac2:	466a      	mov	r2, sp
 800cac4:	f000 f89c 	bl	800cc00 <_fstat_r>
 800cac8:	2800      	cmp	r0, #0
 800caca:	dbf1      	blt.n	800cab0 <__swhatbuf_r+0x12>
 800cacc:	9a01      	ldr	r2, [sp, #4]
 800cace:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cad2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cad6:	425a      	negs	r2, r3
 800cad8:	415a      	adcs	r2, r3
 800cada:	602a      	str	r2, [r5, #0]
 800cadc:	e7ee      	b.n	800cabc <__swhatbuf_r+0x1e>
 800cade:	2340      	movs	r3, #64	; 0x40
 800cae0:	2000      	movs	r0, #0
 800cae2:	6023      	str	r3, [r4, #0]
 800cae4:	b016      	add	sp, #88	; 0x58
 800cae6:	bd70      	pop	{r4, r5, r6, pc}

0800cae8 <__smakebuf_r>:
 800cae8:	898b      	ldrh	r3, [r1, #12]
 800caea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caec:	079d      	lsls	r5, r3, #30
 800caee:	4606      	mov	r6, r0
 800caf0:	460c      	mov	r4, r1
 800caf2:	d507      	bpl.n	800cb04 <__smakebuf_r+0x1c>
 800caf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	6123      	str	r3, [r4, #16]
 800cafc:	2301      	movs	r3, #1
 800cafe:	6163      	str	r3, [r4, #20]
 800cb00:	b002      	add	sp, #8
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	ab01      	add	r3, sp, #4
 800cb06:	466a      	mov	r2, sp
 800cb08:	f7ff ffc9 	bl	800ca9e <__swhatbuf_r>
 800cb0c:	9900      	ldr	r1, [sp, #0]
 800cb0e:	4605      	mov	r5, r0
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7fe fd3f 	bl	800b594 <_malloc_r>
 800cb16:	b948      	cbnz	r0, 800cb2c <__smakebuf_r+0x44>
 800cb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1c:	059a      	lsls	r2, r3, #22
 800cb1e:	d4ef      	bmi.n	800cb00 <__smakebuf_r+0x18>
 800cb20:	f023 0303 	bic.w	r3, r3, #3
 800cb24:	f043 0302 	orr.w	r3, r3, #2
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	e7e3      	b.n	800caf4 <__smakebuf_r+0xc>
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <__smakebuf_r+0x7c>)
 800cb2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	6020      	str	r0, [r4, #0]
 800cb34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	9b00      	ldr	r3, [sp, #0]
 800cb3c:	6163      	str	r3, [r4, #20]
 800cb3e:	9b01      	ldr	r3, [sp, #4]
 800cb40:	6120      	str	r0, [r4, #16]
 800cb42:	b15b      	cbz	r3, 800cb5c <__smakebuf_r+0x74>
 800cb44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f86b 	bl	800cc24 <_isatty_r>
 800cb4e:	b128      	cbz	r0, 800cb5c <__smakebuf_r+0x74>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	f043 0301 	orr.w	r3, r3, #1
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	89a0      	ldrh	r0, [r4, #12]
 800cb5e:	4305      	orrs	r5, r0
 800cb60:	81a5      	strh	r5, [r4, #12]
 800cb62:	e7cd      	b.n	800cb00 <__smakebuf_r+0x18>
 800cb64:	0800c3e9 	.word	0x0800c3e9

0800cb68 <_malloc_usable_size_r>:
 800cb68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb6c:	1f18      	subs	r0, r3, #4
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	bfbc      	itt	lt
 800cb72:	580b      	ldrlt	r3, [r1, r0]
 800cb74:	18c0      	addlt	r0, r0, r3
 800cb76:	4770      	bx	lr

0800cb78 <_raise_r>:
 800cb78:	291f      	cmp	r1, #31
 800cb7a:	b538      	push	{r3, r4, r5, lr}
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	d904      	bls.n	800cb8c <_raise_r+0x14>
 800cb82:	2316      	movs	r3, #22
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb8e:	b112      	cbz	r2, 800cb96 <_raise_r+0x1e>
 800cb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb94:	b94b      	cbnz	r3, 800cbaa <_raise_r+0x32>
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f830 	bl	800cbfc <_getpid_r>
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	4601      	mov	r1, r0
 800cba0:	4620      	mov	r0, r4
 800cba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cba6:	f000 b817 	b.w	800cbd8 <_kill_r>
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d00a      	beq.n	800cbc4 <_raise_r+0x4c>
 800cbae:	1c59      	adds	r1, r3, #1
 800cbb0:	d103      	bne.n	800cbba <_raise_r+0x42>
 800cbb2:	2316      	movs	r3, #22
 800cbb4:	6003      	str	r3, [r0, #0]
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	e7e7      	b.n	800cb8a <_raise_r+0x12>
 800cbba:	2400      	movs	r4, #0
 800cbbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	4798      	blx	r3
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7e0      	b.n	800cb8a <_raise_r+0x12>

0800cbc8 <raise>:
 800cbc8:	4b02      	ldr	r3, [pc, #8]	; (800cbd4 <raise+0xc>)
 800cbca:	4601      	mov	r1, r0
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	f7ff bfd3 	b.w	800cb78 <_raise_r>
 800cbd2:	bf00      	nop
 800cbd4:	20000010 	.word	0x20000010

0800cbd8 <_kill_r>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	4d07      	ldr	r5, [pc, #28]	; (800cbf8 <_kill_r+0x20>)
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4604      	mov	r4, r0
 800cbe0:	4608      	mov	r0, r1
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	f7f5 f83d 	bl	8001c64 <_kill>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	d102      	bne.n	800cbf4 <_kill_r+0x1c>
 800cbee:	682b      	ldr	r3, [r5, #0]
 800cbf0:	b103      	cbz	r3, 800cbf4 <_kill_r+0x1c>
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000714 	.word	0x20000714

0800cbfc <_getpid_r>:
 800cbfc:	f7f5 b82a 	b.w	8001c54 <_getpid>

0800cc00 <_fstat_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4d07      	ldr	r5, [pc, #28]	; (800cc20 <_fstat_r+0x20>)
 800cc04:	2300      	movs	r3, #0
 800cc06:	4604      	mov	r4, r0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	f7f5 f888 	bl	8001d22 <_fstat>
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	d102      	bne.n	800cc1c <_fstat_r+0x1c>
 800cc16:	682b      	ldr	r3, [r5, #0]
 800cc18:	b103      	cbz	r3, 800cc1c <_fstat_r+0x1c>
 800cc1a:	6023      	str	r3, [r4, #0]
 800cc1c:	bd38      	pop	{r3, r4, r5, pc}
 800cc1e:	bf00      	nop
 800cc20:	20000714 	.word	0x20000714

0800cc24 <_isatty_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d06      	ldr	r5, [pc, #24]	; (800cc40 <_isatty_r+0x1c>)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	602b      	str	r3, [r5, #0]
 800cc30:	f7f5 f887 	bl	8001d42 <_isatty>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d102      	bne.n	800cc3e <_isatty_r+0x1a>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	b103      	cbz	r3, 800cc3e <_isatty_r+0x1a>
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	20000714 	.word	0x20000714

0800cc44 <_init>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	bf00      	nop
 800cc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4a:	bc08      	pop	{r3}
 800cc4c:	469e      	mov	lr, r3
 800cc4e:	4770      	bx	lr

0800cc50 <_fini>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	bf00      	nop
 800cc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc56:	bc08      	pop	{r3}
 800cc58:	469e      	mov	lr, r3
 800cc5a:	4770      	bx	lr
